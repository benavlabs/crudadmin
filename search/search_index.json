{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CRUDAdmin","text":"<p> Modern admin interface for FastAPI with built-in authentication, event tracking, and security features </p> <p> </p> <p> CRUDAdmin is a robust admin interface generator for FastAPI applications, offering secure authentication, comprehensive event tracking, and essential monitoring features. Built on top of FastCRUD and SQLAlchemy, it helps you create production-ready admin panels with minimal configuration. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Session-based Authentication: Secure session management with inactivity timeouts and concurrent session limits</li> <li>Built-in Security: IP restrictions, HTTPS enforcement, and secure cookie handling</li> <li>Event Tracking: Comprehensive audit logs for all admin actions with user attribution</li> <li>Health Monitoring: Real-time system status dashboard with key metrics </li> <li>Auto-generated Interface: Creates admin UI directly from your SQLAlchemy models</li> <li>Smart Filtering: Type-aware field filtering and efficient search</li> <li>Modern UI: Clean interface with dark/light theme support</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Before installing CRUDAdmin, ensure you have:</p> <ul> <li>Python: Version 3.9 or newer</li> <li>FastAPI: Latest version for the web framework </li> <li>SQLAlchemy: Version 2.0+ for database operations</li> <li>Pydantic: Version 2.0+ for data validation</li> </ul>"},{"location":"#installing","title":"Installing","text":"<p>To install, just run:</p> <pre><code>pip install crudadmin\n</code></pre> <p>Or, if using poetry:</p> <pre><code>poetry add crudadmin\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Here's a quick example to get you started:</p>"},{"location":"#define-your-models-and-schemas","title":"Define Your Models and Schemas","text":"models.py<pre><code>from sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy import Column, Integer, String\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    username = Column(String, unique=True)\n    email = Column(String)\n    role = Column(String)\n</code></pre> schemas.py<pre><code>from pydantic import BaseModel, EmailStr\n\nclass UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    role: str = \"user\"\n\nclass UserUpdate(BaseModel):\n    email: EmailStr | None = None\n    role: str | None = None\n</code></pre>"},{"location":"#set-up-the-admin-interface","title":"Set Up the Admin Interface","text":"main.py<pre><code>from contextlib import asynccontextmanager\nfrom fastapi import FastAPI\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom crudadmin import CRUDAdmin\nimport os\n\n# Database setup\nengine = create_async_engine(\"sqlite+aiosqlite:///app.db\")\nsession = AsyncSession(engine)\n\n# Create admin interface\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=os.environ.get(\"ADMIN_SECRET_KEY\"),\n    initial_admin={\n        \"username\": \"admin\",\n        \"password\": \"secure_password123\"\n    }\n)\n\n# Add models to admin\nadmin.add_view(\n    model=User,\n    create_schema=UserCreate,\n    update_schema=UserUpdate,\n    allowed_actions={\"view\", \"create\", \"update\"}\n)\n\n# Setup FastAPI with proper initialization\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Initialize database tables\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # Initialize admin interface\n    await admin.initialize()\n    yield\n\n# Create and mount the app\napp = FastAPI(lifespan=lifespan)\napp.mount(\"/admin\", admin.app)\n</code></pre>"},{"location":"#enable-security-features","title":"Enable Security Features","text":"<p>CRUDAdmin offers robust security options out of the box:</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    # Security settings\n    allowed_ips=[\"10.0.0.1\"],\n    allowed_networks=[\"192.168.1.0/24\"],\n    secure_cookies=True,\n    enforce_https=True,\n    # Session settings\n    max_sessions_per_user=5,\n    session_timeout_minutes=30\n)\n</code></pre>"},{"location":"#enable-event-tracking","title":"Enable Event Tracking","text":"<p>Track all admin actions with built-in audit logs:</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    track_events=True,\n    admin_db_url=\"postgresql+asyncpg://user:pass@localhost/admin_logs\"\n)\n</code></pre>"},{"location":"#current-limitations","title":"Current Limitations","text":"<p>The following features are in development:</p> <ul> <li>No file upload support yet</li> <li>No custom admin views (model-based only) </li> <li>No custom field widgets</li> <li>No SQLAlchemy relationship support</li> <li>No export functionality</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api/admin_site/","title":"AdminSite Class API Reference","text":""},{"location":"api/admin_site/#class-definition","title":"Class Definition","text":"<p>Core admin interface site handler managing authentication, routing, and views.</p> <p>Handles the core functionality of the admin interface including: - Authentication and session management - Route configuration and URL handling - Template rendering and context management - Dashboard and model views - Event logging and audit trails - Security and access control</p> <p>The AdminSite class serves as the central coordinator for all admin functionality, managing user sessions, handling authentication flows, and providing secure access to administrative features.</p> <p>Parameters:</p> Name Type Description Default <code>database_config</code> <code>DatabaseConfig</code> <p>Database configuration for admin interface</p> required <code>templates_directory</code> <code>str</code> <p>Path to template files</p> required <code>models</code> <code>Dict[str, Any]</code> <p>Dictionary of registered models</p> required <code>admin_authentication</code> <code>AdminAuthentication</code> <p>Authentication handler</p> required <code>mount_path</code> <code>str</code> <p>URL prefix for admin routes</p> required <code>theme</code> <code>str</code> <p>Active UI theme</p> required <code>secure_cookies</code> <code>bool</code> <p>Enable secure cookie flags</p> required <code>event_integration</code> <code>Optional[Any]</code> <p>Optional event logging integration</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>db_config</code> <code>DatabaseConfig</code> <p>Database configuration instance</p> <code>router</code> <code>APIRouter</code> <p>FastAPI router for admin endpoints</p> <code>templates</code> <code>Jinja2Templates</code> <p>Jinja2 template handler</p> <code>models</code> <code>Dict[str, Any]</code> <p>Dictionary of registered models</p> <code>admin_user_service</code> <code>AdminUserService</code> <p>Service for user management</p> <code>admin_authentication</code> <code>AdminAuthentication</code> <p>Authentication handler</p> <code>mount_path</code> <code>str</code> <p>URL prefix for admin routes</p> <code>theme</code> <code>str</code> <p>Active UI theme</p> <code>event_integration</code> <code>Optional[Any]</code> <p>Event logging handler</p> <code>session_manager</code> <code>SessionManager</code> <p>Session tracking service</p> <code>secure_cookies</code> <code>bool</code> <p>Cookie security flag</p> <p>Examples:</p> <p>Basic setup with SQLite: <pre><code>from fastapi.templating import Jinja2Templates\nfrom .auth import AdminAuthentication\nfrom .db import DatabaseConfig\n\nadmin_site = AdminSite(\n    database_config=db_config,\n    templates_directory=\"templates\",\n    models={},  # Empty initially\n    admin_authentication=auth_handler,\n    mount_path=\"/admin\",\n    theme=\"dark-theme\",\n    secure_cookies=True\n)\n\n# Add routes\nadmin_site.setup_routes()\n</code></pre></p> <p>Production configuration: <pre><code>admin_site = AdminSite(\n    database_config=db_config,\n    templates_directory=templates_path,\n    models=model_registry,\n    admin_authentication=auth_handler,\n    mount_path=\"/admin\",\n    theme=\"dark-theme\",\n    secure_cookies=True,\n    event_integration=event_logger\n)\n</code></pre></p> Source code in <code>crudadmin/admin_interface/admin_site.py</code> <pre><code>class AdminSite:\n    \"\"\"\n    Core admin interface site handler managing authentication, routing, and views.\n\n    **Handles the core functionality of the admin interface including:**\n    - Authentication and session management\n    - Route configuration and URL handling\n    - Template rendering and context management\n    - Dashboard and model views\n    - Event logging and audit trails\n    - Security and access control\n\n    The AdminSite class serves as the central coordinator for all admin functionality,\n    managing user sessions, handling authentication flows, and providing secure access\n    to administrative features.\n\n    Args:\n        database_config: Database configuration for admin interface\n        templates_directory: Path to template files\n        models: Dictionary of registered models\n        admin_authentication: Authentication handler\n        mount_path: URL prefix for admin routes\n        theme: Active UI theme\n        secure_cookies: Enable secure cookie flags\n        event_integration: Optional event logging integration\n\n    Attributes:\n        db_config: Database configuration instance\n        router: FastAPI router for admin endpoints\n        templates: Jinja2 template handler\n        models: Dictionary of registered models\n        admin_user_service: Service for user management\n        admin_authentication: Authentication handler\n        mount_path: URL prefix for admin routes\n        theme: Active UI theme\n        event_integration: Event logging handler\n        session_manager: Session tracking service\n        secure_cookies: Cookie security flag\n\n    Examples:\n        Basic setup with SQLite:\n        ```python\n        from fastapi.templating import Jinja2Templates\n        from .auth import AdminAuthentication\n        from .db import DatabaseConfig\n\n        admin_site = AdminSite(\n            database_config=db_config,\n            templates_directory=\"templates\",\n            models={},  # Empty initially\n            admin_authentication=auth_handler,\n            mount_path=\"/admin\",\n            theme=\"dark-theme\",\n            secure_cookies=True\n        )\n\n        # Add routes\n        admin_site.setup_routes()\n        ```\n\n        Production configuration:\n        ```python\n        admin_site = AdminSite(\n            database_config=db_config,\n            templates_directory=templates_path,\n            models=model_registry,\n            admin_authentication=auth_handler,\n            mount_path=\"/admin\",\n            theme=\"dark-theme\",\n            secure_cookies=True,\n            event_integration=event_logger\n        )\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        database_config: DatabaseConfig,\n        templates_directory: str,\n        models: Dict[str, Any],\n        admin_authentication: AdminAuthentication,\n        mount_path: str,\n        theme: str,\n        secure_cookies: bool,\n        event_integration: Optional[Any] = None,\n    ) -&gt; None:\n        self.db_config: DatabaseConfig = database_config\n        self.router: APIRouter = APIRouter()\n        self.templates: Jinja2Templates = Jinja2Templates(directory=templates_directory)\n        self.models: Dict[str, Any] = models\n        self.admin_user_service: AdminUserService = AdminUserService(\n            db_config=database_config\n        )\n        self.admin_authentication: AdminAuthentication = admin_authentication\n        self.admin_user_service = admin_authentication.user_service\n\n        self.mount_path: str = mount_path\n        self.theme: str = theme\n        self.event_integration: Optional[Any] = event_integration\n\n        self.session_manager: SessionManager = SessionManager(\n            self.db_config,\n            max_sessions_per_user=5,\n            session_timeout_minutes=30,\n            cleanup_interval_minutes=15,\n        )\n\n        self.secure_cookies: bool = secure_cookies\n\n    def setup_routes(self) -&gt; None:\n        \"\"\"\n        Configure all admin interface routes including auth, dashboard and model views.\n\n        Routes Created:\n            **Auth Routes:**\n                - POST /login - Handle login form submission\n                - GET /login - Display login page\n                - GET /logout - Process user logout\n\n            **Dashboard Routes:**\n                - GET / - Main dashboard view\n                - GET /dashboard-content - HTMX dashboard updates\n\n        Notes:\n            - All routes except login require authentication\n            - Routes use Jinja2 templates for rendering\n            - HTMX integration for dynamic updates\n            - Event logging integration if enabled\n\n        Example:\n            ```python\n            admin_site = AdminSite(...)\n            admin_site.setup_routes()\n            app.include_router(admin_site.router)\n            ```\n        \"\"\"\n        self.router.add_api_route(\n            \"/login\",\n            self.login_page(),\n            methods=[\"POST\"],\n            include_in_schema=False,\n            response_model=None,\n        )\n        self.router.add_api_route(\n            \"/logout\",\n            self.logout_endpoint(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            dependencies=[Depends(self.admin_authentication.get_current_user)],\n            response_model=None,\n        )\n        self.router.add_api_route(\n            \"/login\",\n            self.admin_login_page(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            response_model=None,\n        )\n        self.router.add_api_route(\n            \"/dashboard-content\",\n            self.dashboard_content(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            dependencies=[Depends(self.admin_authentication.get_current_user)],\n            response_model=None,\n        )\n        self.router.add_api_route(\n            \"/\",\n            self.dashboard_page(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            dependencies=[Depends(self.admin_authentication.get_current_user)],\n            response_model=None,\n        )\n\n    def login_page(self) -&gt; EndpointCallable:\n        \"\"\"\n        Create login form handler for admin authentication.\n\n        Returns:\n            FastAPI route handler that processes login form submission.\n\n        Notes:\n            - Validates credentials and creates user session on success\n            - Sets secure cookies with session ID\n            - Logs login attempts if event tracking enabled\n        \"\"\"\n\n        @log_auth_action(EventType.LOGIN)\n        async def login_page_inner(\n            request: Request,\n            response: Response,\n            form_data: OAuth2PasswordRequestForm = Depends(),\n            db: AsyncSession = Depends(self.db_config.get_admin_db),\n            event_integration: Optional[Any] = Depends(lambda: self.event_integration),\n        ) -&gt; RouteResponse:\n            logger.info(\"Processing login attempt...\")\n            try:\n                user = await self.admin_user_service.authenticate_user(\n                    form_data.username, form_data.password, db=db\n                )\n                if not user:\n                    logger.warning(\n                        f\"Authentication failed for user: {form_data.username}\"\n                    )\n                    return self.templates.TemplateResponse(\n                        \"auth/login.html\",\n                        {\n                            \"request\": request,\n                            \"error\": \"Invalid credentials. Please try again.\",\n                            \"mount_path\": self.mount_path,\n                            \"theme\": self.theme,\n                        },\n                    )\n\n                request.state.user = user\n                logger.info(\"User authenticated successfully, creating session\")\n\n                try:\n                    logger.info(\"Creating user session...\")\n                    session = await self.session_manager.create_session(\n                        request=request,\n                        user_id=user[\"id\"],\n                        metadata={\n                            \"login_type\": \"password\",\n                            \"username\": user[\"username\"],\n                            \"creation_time\": datetime.now(UTC).isoformat(),\n                        },\n                    )\n\n                    if not session:\n                        logger.error(\"Failed to create session\")\n                        raise Exception(\"Session creation failed\")\n\n                    logger.info(f\"Session created successfully: {session.session_id}\")\n\n                    response = RedirectResponse(\n                        url=f\"/{self.mount_path}/\", status_code=303\n                    )\n\n                    session_timeout_seconds = int(\n                        self.session_manager.session_timeout.total_seconds()\n                    )\n\n                    response.set_cookie(\n                        key=\"session_id\",\n                        value=session.session_id,\n                        httponly=True,\n                        secure=self.secure_cookies,\n                        max_age=session_timeout_seconds,\n                        path=f\"/{self.mount_path}\",\n                        samesite=\"lax\",\n                    )\n\n                    await db.commit()\n                    logger.info(\"Login completed successfully\")\n                    return response\n\n                except Exception as e:\n                    logger.error(\n                        f\"Error during session creation: {str(e)}\", exc_info=True\n                    )\n                    await db.rollback()\n                    return self.templates.TemplateResponse(\n                        \"auth/login.html\",\n                        {\n                            \"request\": request,\n                            \"error\": f\"Error creating session: {str(e)}\",\n                            \"mount_path\": self.mount_path,\n                            \"theme\": self.theme,\n                        },\n                    )\n\n            except Exception as e:\n                logger.error(f\"Error during login: {str(e)}\", exc_info=True)\n                return self.templates.TemplateResponse(\n                    \"auth/login.html\",\n                    {\n                        \"request\": request,\n                        \"error\": \"An error occurred during login. Please try again.\",\n                        \"mount_path\": self.mount_path,\n                        \"theme\": self.theme,\n                    },\n                )\n\n        return cast(EndpointCallable, login_page_inner)\n\n    def logout_endpoint(self) -&gt; EndpointCallable:\n        \"\"\"\n        Create logout handler for admin authentication.\n\n        Returns:\n            FastAPI route handler that terminates session and clears auth cookies.\n\n        Notes:\n            - Revokes access tokens\n            - Terminates active sessions\n            - Cleans up auth cookies\n            - Logs logout events if tracking enabled\n        \"\"\"\n\n        @log_auth_action(EventType.LOGOUT)\n        async def logout_endpoint_inner(\n            request: Request,\n            response: Response,\n            db: AsyncSession = Depends(self.db_config.get_admin_db),\n            session_id: Optional[str] = Cookie(None),\n            event_integration: Optional[Any] = Depends(lambda: self.event_integration),\n        ) -&gt; RouteResponse:\n            if session_id:\n                await self.session_manager.terminate_session(\n                    db=db, session_id=session_id\n                )\n\n            response = RedirectResponse(\n                url=f\"/{self.mount_path}/login\", status_code=303\n            )\n\n            response.delete_cookie(key=\"session_id\", path=f\"/{self.mount_path}\")\n\n            return response\n\n        return cast(EndpointCallable, logout_endpoint_inner)\n\n    def admin_login_page(self) -&gt; EndpointCallable:\n        \"\"\"\n        Create login page handler for the admin interface.\n\n        Returns:\n            FastAPI route handler for login page\n\n        Notes:\n            - Checks for existing auth cookies\n            - Validates active sessions\n            - Redirects authenticated users to dashboard\n            - Displays login form with any error messages\n        \"\"\"\n\n        async def admin_login_page_inner(\n            request: Request,\n            db: AsyncSession = Depends(self.db_config.get_admin_db),\n        ) -&gt; RouteResponse:\n            try:\n                session_id = request.cookies.get(\"session_id\")\n\n                if session_id:\n                    is_valid_session = await self.session_manager.validate_session(\n                        db=db, session_id=session_id\n                    )\n\n                    if is_valid_session:\n                        return RedirectResponse(\n                            url=f\"/{self.mount_path}/\", status_code=303\n                        )\n\n            except Exception:\n                pass\n\n            error = request.query_params.get(\"error\")\n            return self.templates.TemplateResponse(\n                \"auth/login.html\",\n                {\n                    \"request\": request,\n                    \"mount_path\": self.mount_path,\n                    \"theme\": self.theme,\n                    \"error\": error,\n                },\n            )\n\n        return cast(EndpointCallable, admin_login_page_inner)\n\n    def dashboard_content(self) -&gt; EndpointCallable:\n        \"\"\"\n        Create dashboard content handler for HTMX dynamic updates.\n\n        Returns:\n            FastAPI route handler for dashboard content\n        \"\"\"\n\n        async def dashboard_content_inner(\n            request: Request,\n            admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n            app_db: AsyncSession = Depends(\n                cast(\n                    Callable[..., AsyncGenerator[AsyncSession, None]],\n                    self.db_config.session,\n                )\n            ),\n        ) -&gt; RouteResponse:\n            \"\"\"\n            Renders partial content for the dashboard (HTMX).\n            \"\"\"\n            context = await self.get_base_context(admin_db=admin_db, app_db=app_db)\n            context.update({\"request\": request})\n            return self.templates.TemplateResponse(\n                \"admin/dashboard/dashboard_content.html\", context\n            )\n\n        return cast(EndpointCallable, dashboard_content_inner)\n\n    async def get_base_context(\n        self, admin_db: AsyncSession, app_db: AsyncSession\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Get common context data needed for base template.\n\n        Args:\n            db: Database session for queries\n\n        Returns:\n            Dictionary containing auth tables, model data, and config\n\n        Notes:\n            - Queries model counts asynchronously\n            - Includes auth model stats and status\n            - Required by all admin templates\n        \"\"\"\n        auth_model_counts: Dict[str, int] = {}\n        for model_name, model_data in self.admin_authentication.auth_models.items():\n            crud_obj = cast(FastCRUD, model_data[\"crud\"])\n            if model_name == \"AdminSession\":\n                total_count = await crud_obj.count(self.db_config.admin_session)\n                active_count = await crud_obj.count(\n                    self.db_config.admin_session, is_active=True\n                )\n                auth_model_counts[model_name] = total_count\n                auth_model_counts[f\"{model_name}_active\"] = active_count\n            else:\n                count = await crud_obj.count(self.db_config.admin_session)\n                auth_model_counts[model_name] = count\n\n        model_counts: Dict[str, int] = {}\n        for model_name, model_data in self.models.items():\n            crud = cast(FastCRUD, model_data[\"crud\"])\n            cnt = await crud.count(app_db)\n            model_counts[model_name] = cnt\n\n        return {\n            \"auth_table_names\": self.admin_authentication.auth_models.keys(),\n            \"table_names\": self.models.keys(),\n            \"auth_model_counts\": auth_model_counts,\n            \"model_counts\": model_counts,\n            \"mount_path\": self.mount_path,\n            \"track_events\": self.event_integration is not None,\n            \"theme\": self.theme,\n        }\n\n    def dashboard_page(self) -&gt; EndpointCallable:\n        \"\"\"\n        Create main dashboard page handler.\n\n        Returns:\n            FastAPI route handler for the admin dashboard\n        \"\"\"\n\n        async def dashboard_page_inner(\n            request: Request,\n            admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n            app_db: AsyncSession = Depends(\n                cast(\n                    Callable[..., AsyncGenerator[AsyncSession, None]],\n                    self.db_config.session,\n                )\n            ),\n        ) -&gt; RouteResponse:\n            context = await self.get_base_context(admin_db=admin_db, app_db=app_db)\n            context.update({\"request\": request, \"include_sidebar_and_header\": True})\n            return self.templates.TemplateResponse(\n                \"admin/dashboard/dashboard.html\", context\n            )\n\n        return cast(EndpointCallable, dashboard_page_inner)\n\n    def admin_auth_model_page(self, model_key: str) -&gt; EndpointCallable:\n        \"\"\"\n        Create page handler for authentication model views.\n\n        Args:\n            model_key: Name of authentication model to display\n\n        Returns:\n            FastAPI route handler for auth model list view\n\n        Notes:\n            - Handles pagination and sorting\n            - Formats special fields like JSON\n            - Integrates with event logging if enabled\n        \"\"\"\n\n        async def admin_auth_model_page_inner(\n            request: Request,\n            admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n            db: AsyncSession = Depends(self.db_config.get_admin_db),\n        ) -&gt; RouteResponse:\n            auth_model = self.admin_authentication.auth_models[model_key]\n            sqlalchemy_model = cast(Any, auth_model[\"model\"])\n\n            table_columns = []\n            if hasattr(sqlalchemy_model, \"__table__\"):\n                table_columns = [\n                    column.key for column in sqlalchemy_model.__table__.columns\n                ]\n\n            page_str = request.query_params.get(\"page\", \"1\")\n            limit_str = request.query_params.get(\"rows-per-page-select\", \"10\")\n\n            try:\n                page = int(page_str)\n                limit = int(limit_str)\n            except ValueError:\n                page = 1\n                limit = 10\n\n            offset = (page - 1) * limit\n            items: Dict[str, Any] = {\"data\": [], \"total_count\": 0}\n            try:\n                crud = cast(FastCRUD, auth_model[\"crud\"])\n                fetched = await crud.get_multi(db=admin_db, offset=offset, limit=limit)\n                items = dict(fetched)\n\n                logger.info(f\"Retrieved items for {model_key}: {items}\")\n                total_items = items.get(\"total_count\", 0)\n\n                if model_key == \"AdminSession\":\n                    formatted_items = []\n                    data = items[\"data\"]\n                    for item in data:\n                        if not isinstance(item, dict):\n                            item = {\n                                k: v\n                                for k, v in vars(item).items()\n                                if not k.startswith(\"_\")\n                            }\n                        if \"device_info\" in item and isinstance(\n                            item[\"device_info\"], dict\n                        ):\n                            item[\"device_info\"] = str(item[\"device_info\"])\n                        if \"session_metadata\" in item and isinstance(\n                            item[\"session_metadata\"], dict\n                        ):\n                            item[\"session_metadata\"] = str(item[\"session_metadata\"])\n                        formatted_items.append(item)\n                    items[\"data\"] = formatted_items\n            except Exception as e:\n                logger.error(\n                    f\"Error retrieving {model_key} data: {str(e)}\", exc_info=True\n                )\n                total_items = 0\n\n            total_pages = max(1, (total_items + limit - 1) // limit)\n\n            context = await self.get_base_context(admin_db=admin_db, app_db=db)\n            context.update(\n                {\n                    \"request\": request,\n                    \"model_items\": items[\"data\"],\n                    \"model_name\": model_key,\n                    \"table_columns\": table_columns,\n                    \"current_page\": page,\n                    \"rows_per_page\": limit,\n                    \"total_items\": total_items,\n                    \"total_pages\": total_pages,\n                    \"primary_key_info\": self.db_config.get_primary_key_info(\n                        cast(Any, sqlalchemy_model)\n                    ),\n                    \"sort_column\": None,\n                    \"sort_order\": \"asc\",\n                    \"include_sidebar_and_header\": True,\n                }\n            )\n\n            return self.templates.TemplateResponse(\"admin/model/list.html\", context)\n\n        return cast(EndpointCallable, admin_auth_model_page_inner)\n</code></pre>"},{"location":"api/admin_site/#crudadmin.admin_interface.admin_site.AdminSite.admin_auth_model_page","title":"<code>admin_auth_model_page(model_key)</code>","text":"<p>Create page handler for authentication model views.</p> <p>Parameters:</p> Name Type Description Default <code>model_key</code> <code>str</code> <p>Name of authentication model to display</p> required <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for auth model list view</p> Notes <ul> <li>Handles pagination and sorting</li> <li>Formats special fields like JSON</li> <li>Integrates with event logging if enabled</li> </ul> Source code in <code>crudadmin/admin_interface/admin_site.py</code> <pre><code>def admin_auth_model_page(self, model_key: str) -&gt; EndpointCallable:\n    \"\"\"\n    Create page handler for authentication model views.\n\n    Args:\n        model_key: Name of authentication model to display\n\n    Returns:\n        FastAPI route handler for auth model list view\n\n    Notes:\n        - Handles pagination and sorting\n        - Formats special fields like JSON\n        - Integrates with event logging if enabled\n    \"\"\"\n\n    async def admin_auth_model_page_inner(\n        request: Request,\n        admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n        db: AsyncSession = Depends(self.db_config.get_admin_db),\n    ) -&gt; RouteResponse:\n        auth_model = self.admin_authentication.auth_models[model_key]\n        sqlalchemy_model = cast(Any, auth_model[\"model\"])\n\n        table_columns = []\n        if hasattr(sqlalchemy_model, \"__table__\"):\n            table_columns = [\n                column.key for column in sqlalchemy_model.__table__.columns\n            ]\n\n        page_str = request.query_params.get(\"page\", \"1\")\n        limit_str = request.query_params.get(\"rows-per-page-select\", \"10\")\n\n        try:\n            page = int(page_str)\n            limit = int(limit_str)\n        except ValueError:\n            page = 1\n            limit = 10\n\n        offset = (page - 1) * limit\n        items: Dict[str, Any] = {\"data\": [], \"total_count\": 0}\n        try:\n            crud = cast(FastCRUD, auth_model[\"crud\"])\n            fetched = await crud.get_multi(db=admin_db, offset=offset, limit=limit)\n            items = dict(fetched)\n\n            logger.info(f\"Retrieved items for {model_key}: {items}\")\n            total_items = items.get(\"total_count\", 0)\n\n            if model_key == \"AdminSession\":\n                formatted_items = []\n                data = items[\"data\"]\n                for item in data:\n                    if not isinstance(item, dict):\n                        item = {\n                            k: v\n                            for k, v in vars(item).items()\n                            if not k.startswith(\"_\")\n                        }\n                    if \"device_info\" in item and isinstance(\n                        item[\"device_info\"], dict\n                    ):\n                        item[\"device_info\"] = str(item[\"device_info\"])\n                    if \"session_metadata\" in item and isinstance(\n                        item[\"session_metadata\"], dict\n                    ):\n                        item[\"session_metadata\"] = str(item[\"session_metadata\"])\n                    formatted_items.append(item)\n                items[\"data\"] = formatted_items\n        except Exception as e:\n            logger.error(\n                f\"Error retrieving {model_key} data: {str(e)}\", exc_info=True\n            )\n            total_items = 0\n\n        total_pages = max(1, (total_items + limit - 1) // limit)\n\n        context = await self.get_base_context(admin_db=admin_db, app_db=db)\n        context.update(\n            {\n                \"request\": request,\n                \"model_items\": items[\"data\"],\n                \"model_name\": model_key,\n                \"table_columns\": table_columns,\n                \"current_page\": page,\n                \"rows_per_page\": limit,\n                \"total_items\": total_items,\n                \"total_pages\": total_pages,\n                \"primary_key_info\": self.db_config.get_primary_key_info(\n                    cast(Any, sqlalchemy_model)\n                ),\n                \"sort_column\": None,\n                \"sort_order\": \"asc\",\n                \"include_sidebar_and_header\": True,\n            }\n        )\n\n        return self.templates.TemplateResponse(\"admin/model/list.html\", context)\n\n    return cast(EndpointCallable, admin_auth_model_page_inner)\n</code></pre>"},{"location":"api/admin_site/#crudadmin.admin_interface.admin_site.AdminSite.admin_login_page","title":"<code>admin_login_page()</code>","text":"<p>Create login page handler for the admin interface.</p> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for login page</p> Notes <ul> <li>Checks for existing auth cookies</li> <li>Validates active sessions</li> <li>Redirects authenticated users to dashboard</li> <li>Displays login form with any error messages</li> </ul> Source code in <code>crudadmin/admin_interface/admin_site.py</code> <pre><code>def admin_login_page(self) -&gt; EndpointCallable:\n    \"\"\"\n    Create login page handler for the admin interface.\n\n    Returns:\n        FastAPI route handler for login page\n\n    Notes:\n        - Checks for existing auth cookies\n        - Validates active sessions\n        - Redirects authenticated users to dashboard\n        - Displays login form with any error messages\n    \"\"\"\n\n    async def admin_login_page_inner(\n        request: Request,\n        db: AsyncSession = Depends(self.db_config.get_admin_db),\n    ) -&gt; RouteResponse:\n        try:\n            session_id = request.cookies.get(\"session_id\")\n\n            if session_id:\n                is_valid_session = await self.session_manager.validate_session(\n                    db=db, session_id=session_id\n                )\n\n                if is_valid_session:\n                    return RedirectResponse(\n                        url=f\"/{self.mount_path}/\", status_code=303\n                    )\n\n        except Exception:\n            pass\n\n        error = request.query_params.get(\"error\")\n        return self.templates.TemplateResponse(\n            \"auth/login.html\",\n            {\n                \"request\": request,\n                \"mount_path\": self.mount_path,\n                \"theme\": self.theme,\n                \"error\": error,\n            },\n        )\n\n    return cast(EndpointCallable, admin_login_page_inner)\n</code></pre>"},{"location":"api/admin_site/#crudadmin.admin_interface.admin_site.AdminSite.dashboard_content","title":"<code>dashboard_content()</code>","text":"<p>Create dashboard content handler for HTMX dynamic updates.</p> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for dashboard content</p> Source code in <code>crudadmin/admin_interface/admin_site.py</code> <pre><code>def dashboard_content(self) -&gt; EndpointCallable:\n    \"\"\"\n    Create dashboard content handler for HTMX dynamic updates.\n\n    Returns:\n        FastAPI route handler for dashboard content\n    \"\"\"\n\n    async def dashboard_content_inner(\n        request: Request,\n        admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n        app_db: AsyncSession = Depends(\n            cast(\n                Callable[..., AsyncGenerator[AsyncSession, None]],\n                self.db_config.session,\n            )\n        ),\n    ) -&gt; RouteResponse:\n        \"\"\"\n        Renders partial content for the dashboard (HTMX).\n        \"\"\"\n        context = await self.get_base_context(admin_db=admin_db, app_db=app_db)\n        context.update({\"request\": request})\n        return self.templates.TemplateResponse(\n            \"admin/dashboard/dashboard_content.html\", context\n        )\n\n    return cast(EndpointCallable, dashboard_content_inner)\n</code></pre>"},{"location":"api/admin_site/#crudadmin.admin_interface.admin_site.AdminSite.dashboard_page","title":"<code>dashboard_page()</code>","text":"<p>Create main dashboard page handler.</p> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for the admin dashboard</p> Source code in <code>crudadmin/admin_interface/admin_site.py</code> <pre><code>def dashboard_page(self) -&gt; EndpointCallable:\n    \"\"\"\n    Create main dashboard page handler.\n\n    Returns:\n        FastAPI route handler for the admin dashboard\n    \"\"\"\n\n    async def dashboard_page_inner(\n        request: Request,\n        admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n        app_db: AsyncSession = Depends(\n            cast(\n                Callable[..., AsyncGenerator[AsyncSession, None]],\n                self.db_config.session,\n            )\n        ),\n    ) -&gt; RouteResponse:\n        context = await self.get_base_context(admin_db=admin_db, app_db=app_db)\n        context.update({\"request\": request, \"include_sidebar_and_header\": True})\n        return self.templates.TemplateResponse(\n            \"admin/dashboard/dashboard.html\", context\n        )\n\n    return cast(EndpointCallable, dashboard_page_inner)\n</code></pre>"},{"location":"api/admin_site/#crudadmin.admin_interface.admin_site.AdminSite.get_base_context","title":"<code>get_base_context(admin_db, app_db)</code>  <code>async</code>","text":"<p>Get common context data needed for base template.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <p>Database session for queries</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing auth tables, model data, and config</p> Notes <ul> <li>Queries model counts asynchronously</li> <li>Includes auth model stats and status</li> <li>Required by all admin templates</li> </ul> Source code in <code>crudadmin/admin_interface/admin_site.py</code> <pre><code>async def get_base_context(\n    self, admin_db: AsyncSession, app_db: AsyncSession\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get common context data needed for base template.\n\n    Args:\n        db: Database session for queries\n\n    Returns:\n        Dictionary containing auth tables, model data, and config\n\n    Notes:\n        - Queries model counts asynchronously\n        - Includes auth model stats and status\n        - Required by all admin templates\n    \"\"\"\n    auth_model_counts: Dict[str, int] = {}\n    for model_name, model_data in self.admin_authentication.auth_models.items():\n        crud_obj = cast(FastCRUD, model_data[\"crud\"])\n        if model_name == \"AdminSession\":\n            total_count = await crud_obj.count(self.db_config.admin_session)\n            active_count = await crud_obj.count(\n                self.db_config.admin_session, is_active=True\n            )\n            auth_model_counts[model_name] = total_count\n            auth_model_counts[f\"{model_name}_active\"] = active_count\n        else:\n            count = await crud_obj.count(self.db_config.admin_session)\n            auth_model_counts[model_name] = count\n\n    model_counts: Dict[str, int] = {}\n    for model_name, model_data in self.models.items():\n        crud = cast(FastCRUD, model_data[\"crud\"])\n        cnt = await crud.count(app_db)\n        model_counts[model_name] = cnt\n\n    return {\n        \"auth_table_names\": self.admin_authentication.auth_models.keys(),\n        \"table_names\": self.models.keys(),\n        \"auth_model_counts\": auth_model_counts,\n        \"model_counts\": model_counts,\n        \"mount_path\": self.mount_path,\n        \"track_events\": self.event_integration is not None,\n        \"theme\": self.theme,\n    }\n</code></pre>"},{"location":"api/admin_site/#crudadmin.admin_interface.admin_site.AdminSite.login_page","title":"<code>login_page()</code>","text":"<p>Create login form handler for admin authentication.</p> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler that processes login form submission.</p> Notes <ul> <li>Validates credentials and creates user session on success</li> <li>Sets secure cookies with session ID</li> <li>Logs login attempts if event tracking enabled</li> </ul> Source code in <code>crudadmin/admin_interface/admin_site.py</code> <pre><code>def login_page(self) -&gt; EndpointCallable:\n    \"\"\"\n    Create login form handler for admin authentication.\n\n    Returns:\n        FastAPI route handler that processes login form submission.\n\n    Notes:\n        - Validates credentials and creates user session on success\n        - Sets secure cookies with session ID\n        - Logs login attempts if event tracking enabled\n    \"\"\"\n\n    @log_auth_action(EventType.LOGIN)\n    async def login_page_inner(\n        request: Request,\n        response: Response,\n        form_data: OAuth2PasswordRequestForm = Depends(),\n        db: AsyncSession = Depends(self.db_config.get_admin_db),\n        event_integration: Optional[Any] = Depends(lambda: self.event_integration),\n    ) -&gt; RouteResponse:\n        logger.info(\"Processing login attempt...\")\n        try:\n            user = await self.admin_user_service.authenticate_user(\n                form_data.username, form_data.password, db=db\n            )\n            if not user:\n                logger.warning(\n                    f\"Authentication failed for user: {form_data.username}\"\n                )\n                return self.templates.TemplateResponse(\n                    \"auth/login.html\",\n                    {\n                        \"request\": request,\n                        \"error\": \"Invalid credentials. Please try again.\",\n                        \"mount_path\": self.mount_path,\n                        \"theme\": self.theme,\n                    },\n                )\n\n            request.state.user = user\n            logger.info(\"User authenticated successfully, creating session\")\n\n            try:\n                logger.info(\"Creating user session...\")\n                session = await self.session_manager.create_session(\n                    request=request,\n                    user_id=user[\"id\"],\n                    metadata={\n                        \"login_type\": \"password\",\n                        \"username\": user[\"username\"],\n                        \"creation_time\": datetime.now(UTC).isoformat(),\n                    },\n                )\n\n                if not session:\n                    logger.error(\"Failed to create session\")\n                    raise Exception(\"Session creation failed\")\n\n                logger.info(f\"Session created successfully: {session.session_id}\")\n\n                response = RedirectResponse(\n                    url=f\"/{self.mount_path}/\", status_code=303\n                )\n\n                session_timeout_seconds = int(\n                    self.session_manager.session_timeout.total_seconds()\n                )\n\n                response.set_cookie(\n                    key=\"session_id\",\n                    value=session.session_id,\n                    httponly=True,\n                    secure=self.secure_cookies,\n                    max_age=session_timeout_seconds,\n                    path=f\"/{self.mount_path}\",\n                    samesite=\"lax\",\n                )\n\n                await db.commit()\n                logger.info(\"Login completed successfully\")\n                return response\n\n            except Exception as e:\n                logger.error(\n                    f\"Error during session creation: {str(e)}\", exc_info=True\n                )\n                await db.rollback()\n                return self.templates.TemplateResponse(\n                    \"auth/login.html\",\n                    {\n                        \"request\": request,\n                        \"error\": f\"Error creating session: {str(e)}\",\n                        \"mount_path\": self.mount_path,\n                        \"theme\": self.theme,\n                    },\n                )\n\n        except Exception as e:\n            logger.error(f\"Error during login: {str(e)}\", exc_info=True)\n            return self.templates.TemplateResponse(\n                \"auth/login.html\",\n                {\n                    \"request\": request,\n                    \"error\": \"An error occurred during login. Please try again.\",\n                    \"mount_path\": self.mount_path,\n                    \"theme\": self.theme,\n                },\n            )\n\n    return cast(EndpointCallable, login_page_inner)\n</code></pre>"},{"location":"api/admin_site/#crudadmin.admin_interface.admin_site.AdminSite.logout_endpoint","title":"<code>logout_endpoint()</code>","text":"<p>Create logout handler for admin authentication.</p> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler that terminates session and clears auth cookies.</p> Notes <ul> <li>Revokes access tokens</li> <li>Terminates active sessions</li> <li>Cleans up auth cookies</li> <li>Logs logout events if tracking enabled</li> </ul> Source code in <code>crudadmin/admin_interface/admin_site.py</code> <pre><code>def logout_endpoint(self) -&gt; EndpointCallable:\n    \"\"\"\n    Create logout handler for admin authentication.\n\n    Returns:\n        FastAPI route handler that terminates session and clears auth cookies.\n\n    Notes:\n        - Revokes access tokens\n        - Terminates active sessions\n        - Cleans up auth cookies\n        - Logs logout events if tracking enabled\n    \"\"\"\n\n    @log_auth_action(EventType.LOGOUT)\n    async def logout_endpoint_inner(\n        request: Request,\n        response: Response,\n        db: AsyncSession = Depends(self.db_config.get_admin_db),\n        session_id: Optional[str] = Cookie(None),\n        event_integration: Optional[Any] = Depends(lambda: self.event_integration),\n    ) -&gt; RouteResponse:\n        if session_id:\n            await self.session_manager.terminate_session(\n                db=db, session_id=session_id\n            )\n\n        response = RedirectResponse(\n            url=f\"/{self.mount_path}/login\", status_code=303\n        )\n\n        response.delete_cookie(key=\"session_id\", path=f\"/{self.mount_path}\")\n\n        return response\n\n    return cast(EndpointCallable, logout_endpoint_inner)\n</code></pre>"},{"location":"api/admin_site/#crudadmin.admin_interface.admin_site.AdminSite.setup_routes","title":"<code>setup_routes()</code>","text":"<p>Configure all admin interface routes including auth, dashboard and model views.</p> Routes Created <p>Auth Routes:     - POST /login - Handle login form submission     - GET /login - Display login page     - GET /logout - Process user logout</p> <p>Dashboard Routes:     - GET / - Main dashboard view     - GET /dashboard-content - HTMX dashboard updates</p> Notes <ul> <li>All routes except login require authentication</li> <li>Routes use Jinja2 templates for rendering</li> <li>HTMX integration for dynamic updates</li> <li>Event logging integration if enabled</li> </ul> Example <pre><code>admin_site = AdminSite(...)\nadmin_site.setup_routes()\napp.include_router(admin_site.router)\n</code></pre> Source code in <code>crudadmin/admin_interface/admin_site.py</code> <pre><code>def setup_routes(self) -&gt; None:\n    \"\"\"\n    Configure all admin interface routes including auth, dashboard and model views.\n\n    Routes Created:\n        **Auth Routes:**\n            - POST /login - Handle login form submission\n            - GET /login - Display login page\n            - GET /logout - Process user logout\n\n        **Dashboard Routes:**\n            - GET / - Main dashboard view\n            - GET /dashboard-content - HTMX dashboard updates\n\n    Notes:\n        - All routes except login require authentication\n        - Routes use Jinja2 templates for rendering\n        - HTMX integration for dynamic updates\n        - Event logging integration if enabled\n\n    Example:\n        ```python\n        admin_site = AdminSite(...)\n        admin_site.setup_routes()\n        app.include_router(admin_site.router)\n        ```\n    \"\"\"\n    self.router.add_api_route(\n        \"/login\",\n        self.login_page(),\n        methods=[\"POST\"],\n        include_in_schema=False,\n        response_model=None,\n    )\n    self.router.add_api_route(\n        \"/logout\",\n        self.logout_endpoint(),\n        methods=[\"GET\"],\n        include_in_schema=False,\n        dependencies=[Depends(self.admin_authentication.get_current_user)],\n        response_model=None,\n    )\n    self.router.add_api_route(\n        \"/login\",\n        self.admin_login_page(),\n        methods=[\"GET\"],\n        include_in_schema=False,\n        response_model=None,\n    )\n    self.router.add_api_route(\n        \"/dashboard-content\",\n        self.dashboard_content(),\n        methods=[\"GET\"],\n        include_in_schema=False,\n        dependencies=[Depends(self.admin_authentication.get_current_user)],\n        response_model=None,\n    )\n    self.router.add_api_route(\n        \"/\",\n        self.dashboard_page(),\n        methods=[\"GET\"],\n        include_in_schema=False,\n        dependencies=[Depends(self.admin_authentication.get_current_user)],\n        response_model=None,\n    )\n</code></pre>"},{"location":"api/crud_admin/","title":"CRUDAdmin Class API Reference","text":""},{"location":"api/crud_admin/#class-definition","title":"Class Definition","text":"<p>FastAPI-based admin interface for managing database models and authentication.</p> Features <ul> <li>Selective CRUD for added models</li> <li>Event logging and audit trails</li> <li>Health monitoring and dashboard</li> <li>IP restriction and HTTPS enforcement</li> <li>Session management</li> <li>Token-based authentication</li> </ul> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>Async SQLAlchemy session for database operations</p> required <code>SECRET_KEY</code> <code>str</code> <p>Secret key for session management and cookie signing. Generate securely using: Python one-liner (recommended) python -c \"import secrets; print(secrets.token_urlsafe(32))\"</p> <p>OpenSSL openssl rand -base64 32</p> <p>/dev/urandom (Unix/Linux) head -c 32 /dev/urandom | base64</p> <p>The secret key must be: - At least 32 bytes (256 bits) long - Stored securely (e.g., in environment variables) - Different for each environment - Not committed to version control</p> required <code>mount_path</code> <code>Optional[str]</code> <p>URL path where admin interface is mounted, default \"/admin\"</p> <code>'/admin'</code> <code>theme</code> <code>Optional[str]</code> <p>UI theme ('dark-theme' or 'light-theme'), default \"dark-theme\"</p> <code>'dark-theme'</code> <code>admin_db_url</code> <code>Optional[str]</code> <p>SQLite/PostgreSQL database URL for admin data</p> <code>None</code> <code>admin_db_path</code> <code>Optional[str]</code> <p>File path for SQLite admin database</p> <code>None</code> <code>db_config</code> <code>Optional[DatabaseConfig]</code> <p>Optional pre-configured DatabaseConfig</p> <code>None</code> <code>setup_on_initialization</code> <code>bool</code> <p>Whether to run setup on init, default True</p> <code>True</code> <code>initial_admin</code> <code>Optional[Union[dict, BaseModel]]</code> <p>Initial admin user credentials</p> <code>None</code> <code>allowed_ips</code> <code>Optional[List[str]]</code> <p>List of allowed IP addresses</p> <code>None</code> <code>allowed_networks</code> <code>Optional[List[str]]</code> <p>List of allowed IP networks in CIDR notation</p> <code>None</code> <code>max_sessions_per_user</code> <code>int</code> <p>Limit concurrent sessions, default 5</p> <code>5</code> <code>session_timeout_minutes</code> <code>int</code> <p>Session inactivity timeout, default 30 minutes</p> <code>30</code> <code>cleanup_interval_minutes</code> <code>int</code> <p>How often to remove expired sessions, default 15 minutes</p> <code>15</code> <code>secure_cookies</code> <code>bool</code> <p>Enable secure cookie flag, default True</p> <code>True</code> <code>enforce_https</code> <code>bool</code> <p>Redirect HTTP to HTTPS, default False</p> <code>False</code> <code>https_port</code> <code>int</code> <p>HTTPS port for redirects, default 443</p> <code>443</code> <code>track_events</code> <code>bool</code> <p>Enable event logging, default False</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If mount_path is invalid or theme is unsupported</p> <code>ImportError</code> <p>If required dependencies are missing</p> <code>RuntimeError</code> <p>If database connection fails</p> Notes <ul> <li>Database Configuration uses SQLite by default in ./crudadmin_data/admin.db</li> <li>Database is auto-initialized unless setup_on_initialization=False</li> </ul> Example <p>Basic setup with SQLite: <pre><code>from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy import Column, Integer, String\nimport os\n\n# Generate secret key\nSECRET_KEY = os.environ.get(\"ADMIN_SECRET_KEY\") or os.urandom(32).hex()\n\n# Define models\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    username = Column(String, unique=True)\n    email = Column(String)\n    role = Column(String)\n\n# Setup database\nengine = create_async_engine(\"sqlite+aiosqlite:///app.db\")\nsession = AsyncSession(engine)\n\n# Create admin interface\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    initial_admin={\n        \"username\": \"admin\",\n        \"password\": \"secure_pass123\"\n    }\n)\n</code></pre></p> <p>Production setup with security features: <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    # Security features\n    allowed_ips=[\"10.0.0.1\", \"10.0.0.2\"],\n    allowed_networks=[\"192.168.1.0/24\"],\n    secure_cookies=True,\n    enforce_https=True,\n    # Custom PostgreSQL admin database\n    admin_db_url=\"postgresql+asyncpg://user:pass@localhost/admin\",\n    # Session configuration\n    max_sessions_per_user=3,\n    session_timeout_minutes=15,\n    # Enable audit logging\n    track_events=True\n)\n</code></pre></p> <p>Session management configuration: <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    # Session management settings\n    max_sessions_per_user=5,\n    session_timeout_minutes=30,\n    cleanup_interval_minutes=15,\n    # Secure cookie settings\n    secure_cookies=True,\n    # Initial admin user\n    initial_admin={\n        \"username\": \"admin\",\n        \"password\": \"very_secure_password_123\",\n        \"is_superuser\": True\n    }\n)\n</code></pre></p> <p>Setup with multiple models and custom schemas: <pre><code>from pydantic import BaseModel, EmailStr\nfrom decimal import Decimal\nfrom datetime import datetime\n\n# Models\nclass Product(Base):\n    __tablename__ = \"products\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    price = Column(Decimal)\n    created_at = Column(DateTime)\n\nclass Order(Base):\n    __tablename__ = \"orders\"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    total = Column(Decimal)\n    status = Column(String)\n    order_date = Column(DateTime)\n\n# Schemas\nclass ProductCreate(BaseModel):\n    name: str\n    price: Decimal\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n\nclass ProductUpdate(BaseModel):\n    name: Optional[str] = None\n    price: Optional[Decimal] = None\n\nclass OrderCreate(BaseModel):\n    user_id: int\n    total: Decimal\n    status: str = \"pending\"\n    order_date: datetime = Field(default_factory=datetime.utcnow)\n\nclass OrderUpdate(BaseModel):\n    status: Optional[str] = None\n    total: Optional[Decimal] = None\n\n# Add views\nadmin.add_view(\n    model=Product,\n    create_schema=ProductCreate,\n    update_schema=ProductUpdate,\n    update_internal_schema=None,\n    delete_schema=None,\n    allowed_actions={\"view\", \"create\", \"update\"}  # No deletion\n)\n\nadmin.add_view(\n    model=Order,\n    create_schema=OrderCreate,\n    update_schema=OrderUpdate,\n    update_internal_schema=None,\n    delete_schema=None,\n    allowed_actions={\"view\", \"update\"}  # View and update only\n)\n</code></pre></p> <p>Event tracking and audit logs: <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    track_events=True,  # Enable event tracking\n    # Custom admin database for logs\n    admin_db_url=\"postgresql+asyncpg://user:pass@localhost/admin_logs\",\n)\n\n# Events tracked automatically:\n# - User logins/logouts\n# - Model creates/updates/deletes\n# - Failed authentication attempts\n# - System health status\n</code></pre></p> Source code in <code>crudadmin/admin_interface/crud_admin.py</code> <pre><code>class CRUDAdmin:\n    \"\"\"\n    FastAPI-based admin interface for managing database models and authentication.\n\n    Features:\n        - Selective CRUD for added models\n        - Event logging and audit trails\n        - Health monitoring and dashboard\n        - IP restriction and HTTPS enforcement\n        - Session management\n        - Token-based authentication\n\n    Args:\n        session: Async SQLAlchemy session for database operations\n        SECRET_KEY: Secret key for session management and cookie signing. Generate securely using:\n            **Python one-liner (recommended)**\n            python -c \"import secrets; print(secrets.token_urlsafe(32))\"\n\n            **OpenSSL**\n            openssl rand -base64 32\n\n            **/dev/urandom (Unix/Linux)**\n            head -c 32 /dev/urandom | base64\n\n            **The secret key must be:**\n            - At least 32 bytes (256 bits) long\n            - Stored securely (e.g., in environment variables)\n            - Different for each environment\n            - Not committed to version control\n\n        mount_path: URL path where admin interface is mounted, default \"/admin\"\n        theme: UI theme ('dark-theme' or 'light-theme'), default \"dark-theme\"\n        admin_db_url: SQLite/PostgreSQL database URL for admin data\n        admin_db_path: File path for SQLite admin database\n        db_config: Optional pre-configured DatabaseConfig\n        setup_on_initialization: Whether to run setup on init, default True\n        initial_admin: Initial admin user credentials\n        allowed_ips: List of allowed IP addresses\n        allowed_networks: List of allowed IP networks in CIDR notation\n        max_sessions_per_user: Limit concurrent sessions, default 5\n        session_timeout_minutes: Session inactivity timeout, default 30 minutes\n        cleanup_interval_minutes: How often to remove expired sessions, default 15 minutes\n        secure_cookies: Enable secure cookie flag, default True\n        enforce_https: Redirect HTTP to HTTPS, default False\n        https_port: HTTPS port for redirects, default 443\n        track_events: Enable event logging, default False\n\n    Raises:\n        ValueError: If mount_path is invalid or theme is unsupported\n        ImportError: If required dependencies are missing\n        RuntimeError: If database connection fails\n\n    Notes:\n        - Database Configuration uses SQLite by default in ./crudadmin_data/admin.db\n        - Database is auto-initialized unless setup_on_initialization=False\n\n    Example:\n        Basic setup with SQLite:\n        ```python\n        from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\n        from sqlalchemy.orm import declarative_base\n        from sqlalchemy import Column, Integer, String\n        import os\n\n        # Generate secret key\n        SECRET_KEY = os.environ.get(\"ADMIN_SECRET_KEY\") or os.urandom(32).hex()\n\n        # Define models\n        Base = declarative_base()\n\n        class User(Base):\n            __tablename__ = \"users\"\n            id = Column(Integer, primary_key=True)\n            username = Column(String, unique=True)\n            email = Column(String)\n            role = Column(String)\n\n        # Setup database\n        engine = create_async_engine(\"sqlite+aiosqlite:///app.db\")\n        session = AsyncSession(engine)\n\n        # Create admin interface\n        admin = CRUDAdmin(\n            session=session,\n            SECRET_KEY=SECRET_KEY,\n            initial_admin={\n                \"username\": \"admin\",\n                \"password\": \"secure_pass123\"\n            }\n        )\n        ```\n\n        Production setup with security features:\n        ```python\n        admin = CRUDAdmin(\n            session=session,\n            SECRET_KEY=SECRET_KEY,\n            # Security features\n            allowed_ips=[\"10.0.0.1\", \"10.0.0.2\"],\n            allowed_networks=[\"192.168.1.0/24\"],\n            secure_cookies=True,\n            enforce_https=True,\n            # Custom PostgreSQL admin database\n            admin_db_url=\"postgresql+asyncpg://user:pass@localhost/admin\",\n            # Session configuration\n            max_sessions_per_user=3,\n            session_timeout_minutes=15,\n            # Enable audit logging\n            track_events=True\n        )\n        ```\n\n        Session management configuration:\n        ```python\n        admin = CRUDAdmin(\n            session=session,\n            SECRET_KEY=SECRET_KEY,\n            # Session management settings\n            max_sessions_per_user=5,\n            session_timeout_minutes=30,\n            cleanup_interval_minutes=15,\n            # Secure cookie settings\n            secure_cookies=True,\n            # Initial admin user\n            initial_admin={\n                \"username\": \"admin\",\n                \"password\": \"very_secure_password_123\",\n                \"is_superuser\": True\n            }\n        )\n        ```\n\n        Setup with multiple models and custom schemas:\n        ```python\n        from pydantic import BaseModel, EmailStr\n        from decimal import Decimal\n        from datetime import datetime\n\n        # Models\n        class Product(Base):\n            __tablename__ = \"products\"\n            id = Column(Integer, primary_key=True)\n            name = Column(String)\n            price = Column(Decimal)\n            created_at = Column(DateTime)\n\n        class Order(Base):\n            __tablename__ = \"orders\"\n            id = Column(Integer, primary_key=True)\n            user_id = Column(Integer, ForeignKey(\"users.id\"))\n            total = Column(Decimal)\n            status = Column(String)\n            order_date = Column(DateTime)\n\n        # Schemas\n        class ProductCreate(BaseModel):\n            name: str\n            price: Decimal\n            created_at: datetime = Field(default_factory=datetime.utcnow)\n\n        class ProductUpdate(BaseModel):\n            name: Optional[str] = None\n            price: Optional[Decimal] = None\n\n        class OrderCreate(BaseModel):\n            user_id: int\n            total: Decimal\n            status: str = \"pending\"\n            order_date: datetime = Field(default_factory=datetime.utcnow)\n\n        class OrderUpdate(BaseModel):\n            status: Optional[str] = None\n            total: Optional[Decimal] = None\n\n        # Add views\n        admin.add_view(\n            model=Product,\n            create_schema=ProductCreate,\n            update_schema=ProductUpdate,\n            update_internal_schema=None,\n            delete_schema=None,\n            allowed_actions={\"view\", \"create\", \"update\"}  # No deletion\n        )\n\n        admin.add_view(\n            model=Order,\n            create_schema=OrderCreate,\n            update_schema=OrderUpdate,\n            update_internal_schema=None,\n            delete_schema=None,\n            allowed_actions={\"view\", \"update\"}  # View and update only\n        )\n        ```\n\n        Event tracking and audit logs:\n        ```python\n        admin = CRUDAdmin(\n            session=session,\n            SECRET_KEY=SECRET_KEY,\n            track_events=True,  # Enable event tracking\n            # Custom admin database for logs\n            admin_db_url=\"postgresql+asyncpg://user:pass@localhost/admin_logs\",\n        )\n\n        # Events tracked automatically:\n        # - User logins/logouts\n        # - Model creates/updates/deletes\n        # - Failed authentication attempts\n        # - System health status\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        session: AsyncSession,\n        SECRET_KEY: str,\n        mount_path: Optional[str] = \"/admin\",\n        theme: Optional[str] = \"dark-theme\",\n        admin_db_url: Optional[str] = None,\n        admin_db_path: Optional[str] = None,\n        db_config: Optional[DatabaseConfig] = None,\n        setup_on_initialization: bool = True,\n        initial_admin: Optional[Union[dict, BaseModel]] = None,\n        allowed_ips: Optional[List[str]] = None,\n        allowed_networks: Optional[List[str]] = None,\n        max_sessions_per_user: int = 5,\n        session_timeout_minutes: int = 30,\n        cleanup_interval_minutes: int = 15,\n        secure_cookies: bool = True,\n        enforce_https: bool = False,\n        https_port: int = 443,\n        track_events: bool = False,\n    ) -&gt; None:\n        self.mount_path = mount_path.strip(\"/\") if mount_path else \"admin\"\n        self.theme = theme or \"dark-theme\"\n        self.track_events = track_events\n\n        self.templates_directory = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"..\", \"templates\"\n        )\n\n        self.static_directory = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"..\", \"static\"\n        )\n\n        self.app = FastAPI()\n        self.app.mount(\n            \"/static\", StaticFiles(directory=self.static_directory), name=\"admin_static\"\n        )\n\n        self.app.add_middleware(AdminAuthMiddleware, admin_instance=self)\n\n        from ..event import create_admin_audit_log, create_admin_event_log\n\n        event_log_model: Optional[Type[DeclarativeBase]] = None\n        audit_log_model: Optional[Type[DeclarativeBase]] = None\n\n        if self.track_events:\n            event_log_model = cast(\n                Type[DeclarativeBase], create_admin_event_log(AdminBase)\n            )\n            audit_log_model = cast(\n                Type[DeclarativeBase], create_admin_audit_log(AdminBase)\n            )\n\n        self.db_config = db_config or DatabaseConfig(\n            base=AdminBase,\n            session=session,\n            admin_db_url=admin_db_url,\n            admin_db_path=admin_db_path,\n            admin_session=create_admin_session_model(AdminBase),\n            admin_event_log=event_log_model,\n            admin_audit_log=audit_log_model,\n        )\n\n        if self.track_events:\n            from ..event import init_event_system\n\n            self.event_service, self.event_integration = init_event_system(\n                self.db_config\n            )\n        else:\n            self.event_service = None\n            self.event_integration = None\n\n        self.SECRET_KEY = SECRET_KEY\n\n        self.admin_user_service = AdminUserService(db_config=self.db_config)\n        self.initial_admin = initial_admin\n        self.models: Dict[str, ModelConfig] = {}\n        self.router = APIRouter(tags=[\"admin\"])\n        self.oauth2_scheme = OAuth2PasswordBearer(tokenUrl=f\"/{self.mount_path}/login\")\n        self.secure_cookies = secure_cookies\n\n        self.session_manager = SessionManager(\n            self.db_config,\n            max_sessions_per_user=max_sessions_per_user,\n            session_timeout_minutes=session_timeout_minutes,\n            cleanup_interval_minutes=cleanup_interval_minutes,\n        )\n\n        self.admin_authentication = AdminAuthentication(\n            database_config=self.db_config,\n            user_service=self.admin_user_service,\n            session_manager=self.session_manager,\n            oauth2_scheme=self.oauth2_scheme,\n            event_integration=self.event_integration,\n        )\n\n        self.templates = Jinja2Templates(directory=self.templates_directory)\n\n        if setup_on_initialization:\n            self.setup()\n\n        if allowed_ips or allowed_networks:\n            self.app.add_middleware(\n                IPRestrictionMiddleware,\n                allowed_ips=allowed_ips,\n                allowed_networks=allowed_networks,\n            )\n\n        if enforce_https:\n            from .middleware.https import HTTPSRedirectMiddleware\n\n            self.app.add_middleware(HTTPSRedirectMiddleware, https_port=https_port)\n\n        self.app.include_router(self.router)\n\n    async def initialize(self) -&gt; None:\n        \"\"\"\n        Initialize admin database tables and create initial admin user.\n\n        Creates required tables:\n        - AdminUser for user management\n        - AdminSession for session tracking\n        - AdminEventLog and AdminAuditLog if event tracking enabled\n\n        Also creates initial admin user if credentials were provided.\n\n        Raises:\n            AssertionError: If event log models are misconfigured\n            ValueError: If database initialization fails\n\n        Notes:\n            - This is called automatically if setup_on_initialization=True\n            - Tables are created with 'checkfirst' to avoid conflicts\n            - Initial admin is only created if no admin exists\n\n        Example:\n            Manual initialization:\n            ```python\n            admin = CRUDAdmin(\n                session=async_session,\n                SECRET_KEY=\"key\",\n                setup_on_initialization=False\n            )\n            await admin.initialize()\n            ```\n        \"\"\"\n        if hasattr(self.db_config, \"AdminEventLog\") and self.db_config.AdminEventLog:\n            assert hasattr(self.db_config.AdminEventLog, \"metadata\"), (\n                \"AdminEventLog must have metadata\"\n            )\n\n        if hasattr(self.db_config, \"AdminAuditLog\") and self.db_config.AdminAuditLog:\n            assert hasattr(self.db_config.AdminAuditLog, \"metadata\"), (\n                \"AdminAuditLog must have metadata\"\n            )\n\n        async with self.db_config.admin_engine.begin() as conn:\n            await conn.run_sync(self.db_config.AdminUser.metadata.create_all)\n            await conn.run_sync(self.db_config.AdminSession.metadata.create_all)\n\n            if (\n                self.track_events\n                and self.db_config.AdminEventLog\n                and self.db_config.AdminAuditLog\n            ):\n                await conn.run_sync(self.db_config.AdminEventLog.metadata.create_all)\n                await conn.run_sync(self.db_config.AdminAuditLog.metadata.create_all)\n\n        if self.initial_admin:\n            await self._create_initial_admin(self.initial_admin)\n\n    def setup_event_routes(self) -&gt; None:\n        \"\"\"\n        Set up routes for event log management.\n\n        Creates endpoints:\n        - GET /management/events - Event log page\n        - GET /management/events/content - Event log data\n\n        Notes:\n            - Only created if track_events=True\n            - Routes require authentication\n        \"\"\"\n        if self.track_events:\n            self.router.add_api_route(\n                \"/management/events\",\n                self.event_log_page(),\n                methods=[\"GET\"],\n                include_in_schema=False,\n                dependencies=[Depends(self.admin_authentication.get_current_user())],\n                response_model=None,\n            )\n            self.router.add_api_route(\n                \"/management/events/content\",\n                self.event_log_content(),\n                methods=[\"GET\"],\n                include_in_schema=False,\n                dependencies=[Depends(self.admin_authentication.get_current_user())],\n                response_model=None,\n            )\n\n    def event_log_page(\n        self,\n    ) -&gt; Callable[[Request, AsyncSession], Awaitable[RouteResponse]]:\n        \"\"\"\n        Create endpoint for event log main page.\n\n        Returns:\n            FastAPI route handler that renders event log template\n            with filtering options\n        \"\"\"\n\n        admin_db_db_dependency = cast(\n            Callable[..., AsyncSession], self.db_config.get_admin_db\n        )\n        app_db_dependency = cast(Callable[..., AsyncSession], self.db_config.session)\n\n        async def event_log_page_inner(\n            request: Request,\n            admin_db: AsyncSession = Depends(admin_db_db_dependency),\n            app_db: AsyncSession = Depends(app_db_dependency),\n        ) -&gt; RouteResponse:\n            from ..event import EventStatus, EventType\n\n            users = await self.db_config.crud_users.get_multi(db=app_db)\n\n            context = await self.admin_site.get_base_context(\n                admin_db=admin_db, app_db=app_db\n            )\n            context.update(\n                {\n                    \"request\": request,\n                    \"include_sidebar_and_header\": True,\n                    \"event_types\": [e.value for e in EventType],\n                    \"statuses\": [s.value for s in EventStatus],\n                    \"users\": users[\"data\"],\n                    \"mount_path\": self.mount_path,\n                }\n            )\n\n            return self.templates.TemplateResponse(\n                \"admin/management/events.html\", context\n            )\n\n        return event_log_page_inner\n\n    def event_log_content(self) -&gt; EndpointFunction:\n        \"\"\"\n        Create endpoint for event log data with filtering and pagination.\n\n        Returns:\n            FastAPI route handler that provides filtered event data\n            with user and audit details\n\n        Notes:\n            - Supports filtering by:\n            - Event type\n            - Status\n            - Username\n            - Date range\n            - Returns enriched events with:\n            - Username\n            - Resource details\n            - Audit trail data\n            - Includes pagination metadata\n\n        Examples:\n            Filter events:\n            GET /management/events/content?event_type=create&amp;status=success\n\n            Filter by date:\n            GET /management/events/content?start_date=2024-01-01&amp;end_date=2024-01-31\n        \"\"\"\n\n        admin_db_db_dependency = cast(\n            Callable[..., AsyncSession], self.db_config.get_admin_db\n        )\n\n        async def event_log_content_inner(\n            request: Request,\n            admin_db: AsyncSession = Depends(admin_db_db_dependency),\n            page: int = 1,\n            limit: int = 10,\n        ) -&gt; RouteResponse:\n            try:\n                if not self.db_config.AdminEventLog:\n                    raise ValueError(\"AdminEventLog is not configured\")\n\n                crud_events: FastCRUD = FastCRUD(self.db_config.AdminEventLog)\n\n                event_type = cast(Optional[str], request.query_params.get(\"event_type\"))\n                status = cast(Optional[str], request.query_params.get(\"status\"))\n                username = cast(Optional[str], request.query_params.get(\"username\"))\n                start_date = cast(Optional[str], request.query_params.get(\"start_date\"))\n                end_date = cast(Optional[str], request.query_params.get(\"end_date\"))\n\n                filter_criteria: Dict[str, Any] = {}\n                if event_type:\n                    filter_criteria[\"event_type\"] = event_type\n                if status:\n                    filter_criteria[\"status\"] = status\n\n                if username:\n                    user = await self.db_config.crud_users.get(\n                        db=admin_db, username=username\n                    )\n                    if user and isinstance(user, dict):\n                        filter_criteria[\"user_id\"] = user.get(\"id\")\n\n                if start_date:\n                    start = datetime.strptime(start_date, \"%Y-%m-%d\").replace(\n                        tzinfo=UTC\n                    )\n                    filter_criteria[\"timestamp__gte\"] = start\n\n                if end_date:\n                    end = (\n                        datetime.strptime(end_date, \"%Y-%m-%d\") + timedelta(days=1)\n                    ).replace(tzinfo=UTC)\n                    filter_criteria[\"timestamp__lt\"] = end\n\n                events = await crud_events.get_multi(\n                    db=admin_db,\n                    offset=(page - 1) * limit,\n                    limit=limit,\n                    sort_columns=[\"timestamp\"],\n                    sort_orders=[\"desc\"],\n                    **filter_criteria,\n                )\n\n                enriched_events = []\n                if isinstance(events[\"data\"], list):\n                    for event in events[\"data\"]:\n                        if isinstance(event, dict):\n                            event_data = dict(event)\n                            user = await self.db_config.crud_users.get(\n                                db=admin_db, id=event.get(\"user_id\")\n                            )\n                            if isinstance(user, dict):\n                                event_data[\"username\"] = user.get(\"username\", \"Unknown\")\n\n                            if event.get(\"resource_type\") and event.get(\"resource_id\"):\n                                if not self.db_config.AdminAuditLog:\n                                    raise ValueError(\"AdminAuditLog is not configured\")\n\n                                crud_audits: FastCRUD = FastCRUD(\n                                    self.db_config.AdminAuditLog\n                                )\n                                audit = await crud_audits.get(\n                                    db=admin_db, event_id=event.get(\"id\")\n                                )\n                                if audit and isinstance(audit, dict):\n                                    event_data[\"details\"] = {\n                                        \"resource_details\": {\n                                            \"model\": event.get(\"resource_type\"),\n                                            \"id\": event.get(\"resource_id\"),\n                                            \"changes\": audit.get(\"new_state\"),\n                                        }\n                                    }\n\n                            enriched_events.append(event_data)\n\n                total_items = events.get(\"total_count\", 0)\n                assert isinstance(total_items, int), (\n                    f\"'total_count' should be int, got {type(total_items)}\"\n                )\n\n                total_pages = max(1, (total_items + limit - 1) // limit)\n\n                return self.templates.TemplateResponse(\n                    \"admin/management/events_content.html\",\n                    {\n                        \"request\": request,\n                        \"events\": enriched_events,\n                        \"page\": page,\n                        \"total_pages\": total_pages,\n                        \"mount_path\": self.mount_path,\n                        \"start_date\": start_date,\n                        \"end_date\": end_date,\n                        \"selected_type\": event_type,\n                        \"selected_status\": status,\n                        \"selected_user\": username,\n                    },\n                )\n\n            except Exception as e:\n                logger.error(f\"Error retrieving events: {str(e)}\")\n                return self.templates.TemplateResponse(\n                    \"admin/management/events_content.html\",\n                    {\n                        \"request\": request,\n                        \"events\": [],\n                        \"page\": 1,\n                        \"total_pages\": 1,\n                        \"mount_path\": self.mount_path,\n                    },\n                )\n\n        return event_log_content_inner\n\n    def setup(\n        self,\n    ) -&gt; None:\n        \"\"\"\n        Set up admin interface routes and views.\n\n        Configures:\n        - Authentication routes and middleware\n        - Model CRUD views\n        - Management views (health check, events)\n        - Static files\n\n        Notes:\n            - Called automatically if setup_on_initialization=True\n            - Can be called manually after initialization\n            - Respects allowed_actions configuration\n        \"\"\"\n        self.admin_site = AdminSite(\n            database_config=self.db_config,\n            templates_directory=self.templates_directory,\n            models=self.models,\n            admin_authentication=self.admin_authentication,\n            mount_path=self.mount_path,\n            theme=self.theme,\n            secure_cookies=self.secure_cookies,\n            event_integration=self.event_integration if self.track_events else None,\n        )\n\n        self.admin_site.setup_routes()\n\n        for model_name, data in self.admin_authentication.auth_models.items():\n            allowed_actions = {\n                \"AdminUser\": {\"view\", \"create\", \"update\"},\n                \"AdminSession\": {\"view\", \"delete\"},\n            }.get(model_name, {\"view\"})\n\n            model = cast(Type[DeclarativeBase], data[\"model\"])\n            create_schema = cast(Type[BaseModel], data[\"create_schema\"])\n            update_schema = cast(Type[BaseModel], data[\"update_schema\"])\n            update_internal_schema = cast(\n                Optional[Type[BaseModel]], data[\"update_internal_schema\"]\n            )\n            delete_schema = cast(Optional[Type[BaseModel]], data[\"delete_schema\"])\n\n            self.add_view(\n                model=model,\n                create_schema=create_schema,\n                update_schema=update_schema,\n                update_internal_schema=update_internal_schema,\n                delete_schema=delete_schema,\n                include_in_models=False,\n                allowed_actions=allowed_actions,\n            )\n\n        get_user_dependency = cast(\n            Callable[..., AsyncSession], self.admin_authentication.get_current_user\n        )\n\n        self.router.add_api_route(\n            \"/management/health\",\n            self.health_check_page(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            dependencies=[Depends(get_user_dependency)],\n            response_model=None,\n        )\n\n        self.router.add_api_route(\n            \"/management/health/content\",\n            self.health_check_content(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            dependencies=[Depends(get_user_dependency)],\n            response_model=None,\n        )\n\n        if self.track_events:\n            self.router.add_api_route(\n                \"/management/events\",\n                self.event_log_page(),\n                methods=[\"GET\"],\n                include_in_schema=False,\n                dependencies=[Depends(get_user_dependency)],\n                response_model=None,\n            )\n            self.router.add_api_route(\n                \"/management/events/content\",\n                self.event_log_content(),\n                methods=[\"GET\"],\n                include_in_schema=False,\n                dependencies=[Depends(get_user_dependency)],\n                response_model=None,\n            )\n\n        self.router.include_router(router=self.admin_site.router)\n\n    def add_view(\n        self,\n        model: Type[DeclarativeBase],\n        create_schema: Type[BaseModel],\n        update_schema: Type[BaseModel],\n        update_internal_schema: Optional[Type[BaseModel]],\n        delete_schema: Optional[Type[BaseModel]],\n        include_in_models: bool = True,\n        allowed_actions: Optional[set[str]] = None,\n    ) -&gt; None:\n        \"\"\"\n        Add CRUD view for a database model.\n\n        Creates a web interface for managing model instances with forms generated\n        from Pydantic schemas.\n\n        Args:\n            model: SQLAlchemy model class to manage\n            create_schema: Pydantic schema for create operations\n            update_schema: Pydantic schema for update operations\n            update_internal_schema: Internal schema for special update cases\n            delete_schema: Schema for delete operations\n            include_in_models: Show in models list in admin UI\n            allowed_actions: **Set of allowed operations:**\n                - **\"view\"**: Allow viewing records\n                - **\"create\"**: Allow creating new records\n                - **\"update\"**: Allow updating existing records\n                - **\"delete\"**: Allow deleting records\n                Defaults to all actions if None\n\n        Raises:\n            ValueError: If schemas don't match model structure\n            TypeError: If model is not a SQLAlchemy model\n\n        Notes:\n            - Forms are auto-generated with field types determined from Pydantic schemas\n            - Actions controlled by allowed_actions parameter\n\n            URL Routes:\n            - List view: /admin/&lt;model_name&gt;/\n            - Create: /admin/&lt;model_name&gt;/create\n            - Update: /admin/&lt;model_name&gt;/update/&lt;id&gt;\n            - Delete: /admin/&lt;model_name&gt;/delete/&lt;id&gt;\n\n        Example:\n            Basic user management:\n            ```python\n            from pydantic import BaseModel, EmailStr, Field\n            from typing import Optional\n            from datetime import datetime\n\n            class UserCreate(BaseModel):\n                username: str = Field(..., min_length=3, max_length=50)\n                email: EmailStr\n                role: str = Field(default=\"user\")\n                active: bool = Field(default=True)\n                join_date: datetime = Field(default_factory=datetime.utcnow)\n\n            class UserUpdate(BaseModel):\n                email: Optional[EmailStr] = None\n                role: Optional[str] = None\n                active: Optional[bool] = None\n\n            admin.add_view(\n                model=User,\n                create_schema=UserCreate,\n                update_schema=UserUpdate,\n                update_internal_schema=None,\n                delete_schema=None,\n                allowed_actions={\"view\", \"create\", \"update\"}  # No deletion\n            )\n            ```\n\n            Product catalog with custom validation:\n            ```python\n            from decimal import Decimal\n            from pydantic import Field, validator\n\n            class ProductCreate(BaseModel):\n                name: str = Field(..., min_length=2, max_length=100)\n                price: Decimal = Field(..., ge=0)\n                description: Optional[str] = Field(None, max_length=500)\n                category: str\n                in_stock: bool = True\n\n                @validator(\"price\")\n                def validate_price(cls, v):\n                    if v &gt; 1000000:\n                        raise ValueError(\"Price cannot exceed 1,000,000\")\n                    return v\n\n            class ProductUpdate(BaseModel):\n                name: Optional[str] = Field(None, min_length=2, max_length=100)\n                price: Optional[Decimal] = Field(None, ge=0)\n                description: Optional[str] = None\n                in_stock: Optional[bool] = None\n\n            admin.add_view(\n                model=Product,\n                create_schema=ProductCreate,\n                update_schema=ProductUpdate,\n                update_internal_schema=None,\n                delete_schema=None,\n                allowed_actions={\"view\", \"create\", \"update\"}\n            )\n            ```\n\n            Order management with enum and relationships:\n            ```python\n            from enum import Enum\n            from typing import List\n\n            class OrderStatus(str, Enum):\n                pending = \"pending\"\n                paid = \"paid\"\n                shipped = \"shipped\"\n                delivered = \"delivered\"\n                cancelled = \"cancelled\"\n\n            class OrderCreate(BaseModel):\n                user_id: int = Field(..., gt=0)\n                items: List[int] = Field(..., min_items=1)\n                shipping_address: str\n                status: OrderStatus = Field(default=OrderStatus.pending)\n                notes: Optional[str] = None\n\n                class Config:\n                    json_schema_extra = {\n                        \"example\": {\n                            \"user_id\": 1,\n                            \"items\": [1, 2, 3],\n                            \"shipping_address\": \"123 Main St\",\n                            \"status\": \"pending\"\n                        }\n                    }\n\n            class OrderUpdate(BaseModel):\n                status: Optional[OrderStatus] = None\n                notes: Optional[str] = None\n\n            # Custom delete schema with soft delete\n            class OrderDelete(BaseModel):\n                archive: bool = Field(default=False, description=\"Archive instead of delete\")\n                reason: Optional[str] = Field(None, max_length=200)\n\n            admin.add_view(\n                model=Order,\n                create_schema=OrderCreate,\n                update_schema=OrderUpdate,\n                update_internal_schema=None,\n                delete_schema=OrderDelete,\n                allowed_actions={\"view\", \"create\", \"update\", \"delete\"}\n            )\n            ```\n\n            Read-only audit log:\n            ```python\n            class AuditLogSchema(BaseModel):\n                id: int\n                timestamp: datetime\n                user_id: int\n                action: str\n                details: dict\n\n                class Config:\n                    orm_mode = True\n\n            admin.add_view(\n                model=AuditLog,\n                create_schema=AuditLogSchema,\n                update_schema=AuditLogSchema,\n                update_internal_schema=None,\n                delete_schema=None,\n                allowed_actions={\"view\"},  # Read-only\n                include_in_models=False  # Hide from nav\n            )\n            ```\n        \"\"\"\n        model_key = model.__name__\n        if include_in_models:\n            self.models[model_key] = {\n                \"model\": model,\n                \"create_schema\": create_schema,\n                \"update_schema\": update_schema,\n                \"update_internal_schema\": update_internal_schema,\n                \"delete_schema\": delete_schema,\n                \"crud\": FastCRUD(model),\n            }\n\n        allowed_actions = allowed_actions or {\"view\", \"create\", \"update\", \"delete\"}\n\n        admin_view = ModelView(\n            database_config=self.db_config,\n            templates=self.templates,\n            model=model,\n            create_schema=create_schema,\n            update_schema=update_schema,\n            update_internal_schema=update_internal_schema,\n            delete_schema=delete_schema,\n            admin_site=self.admin_site,\n            allowed_actions=allowed_actions,\n            event_integration=self.event_integration if self.track_events else None,\n        )\n\n        if self.track_events and self.event_integration:\n            admin_view.event_integration = self.event_integration\n\n        current_user_dep = cast(\n            Callable[..., Any], self.admin_site.admin_authentication.get_current_user\n        )\n        self.app.include_router(\n            admin_view.router,\n            prefix=f\"/{model_key}\",\n            dependencies=[Depends(current_user_dep)],\n            include_in_schema=False,\n        )\n\n    def health_check_page(\n        self,\n    ) -&gt; Callable[[Request, AsyncSession], Awaitable[RouteResponse]]:\n        \"\"\"\n        Create endpoint for system health check page.\n\n        Returns:\n            FastAPI route handler that renders health check template\n        \"\"\"\n\n        admin_db_db_dependency = cast(\n            Callable[..., AsyncSession], self.db_config.get_admin_db\n        )\n        app_db_dependency = cast(Callable[..., AsyncSession], self.db_config.session)\n\n        async def health_check_page_inner(\n            request: Request,\n            admin_db: AsyncSession = Depends(admin_db_db_dependency),\n            app_db: AsyncSession = Depends(app_db_dependency),\n        ) -&gt; RouteResponse:\n            context = await self.admin_site.get_base_context(\n                admin_db=admin_db, app_db=app_db\n            )\n            context.update({\"request\": request, \"include_sidebar_and_header\": True})\n\n            return self.templates.TemplateResponse(\n                \"admin/management/health.html\", context\n            )\n\n        return health_check_page_inner\n\n    def health_check_content(\n        self,\n    ) -&gt; Callable[[Request, AsyncSession], Awaitable[RouteResponse]]:\n        \"\"\"\n        Create endpoint for health check data.\n\n        Returns:\n            FastAPI route handler that checks:\n            - Database connectivity\n            - Session management\n            - Token service\n        \"\"\"\n\n        db_dependency = cast(Callable[..., AsyncSession], self.db_config.session)\n\n        async def health_check_content_inner(\n            request: Request, db: AsyncSession = Depends(db_dependency)\n        ) -&gt; RouteResponse:\n            health_checks = {}\n\n            start_time = time.time()\n            try:\n                await db.execute(text(\"SELECT 1\"))\n                latency = (time.time() - start_time) * 1000\n                health_checks[\"database\"] = {\n                    \"status\": \"healthy\",\n                    \"message\": \"Connected successfully\",\n                    \"latency\": latency,\n                }\n            except Exception as e:\n                health_checks[\"database\"] = {\"status\": \"unhealthy\", \"message\": str(e)}\n\n            try:\n                await self.session_manager.cleanup_expired_sessions(db)\n                health_checks[\"session_management\"] = {\n                    \"status\": \"healthy\",\n                    \"message\": \"Session cleanup working\",\n                }\n            except Exception as e:\n                health_checks[\"session_management\"] = {\n                    \"status\": \"unhealthy\",\n                    \"message\": str(e),\n                }\n\n            context = {\n                \"request\": request,\n                \"health_checks\": health_checks,\n                \"last_checked\": datetime.now(UTC),\n            }\n\n            return self.templates.TemplateResponse(\n                \"admin/management/health_content.html\", context\n            )\n\n        return health_check_content_inner\n\n    async def _create_initial_admin(self, admin_data: Union[dict, BaseModel]) -&gt; None:\n        \"\"\"\n        Create initial admin user if none exists.\n\n        Args:\n            admin_data: Admin credentials as dict or Pydantic model\n\n        Raises:\n            ValueError: If admin_data has invalid format\n            Exception: If database operations fail\n\n        Notes:\n            - Only creates admin if no users exist\n            - Handles both dict and Pydantic model input\n            - Password is hashed before storage\n        \"\"\"\n        async for admin_session in self.db_config.get_admin_db():\n            try:\n                admins_count = await self.db_config.crud_users.count(admin_session)\n\n                if admins_count &lt; 1:\n                    if isinstance(admin_data, dict):\n                        create_data = AdminUserCreate(**admin_data)\n                    elif isinstance(admin_data, BaseModel):\n                        if isinstance(admin_data, AdminUserCreate):\n                            create_data = admin_data\n                        else:\n                            create_data = AdminUserCreate(**admin_data.dict())\n                    else:\n                        msg = (\n                            \"Initial admin data must be either a dict or Pydantic model\"\n                        )\n                        logger.error(msg)\n                        raise ValueError(msg)\n\n                    hashed_password = self.admin_user_service.get_password_hash(\n                        create_data.password\n                    )\n                    internal_data = AdminUserCreateInternal(\n                        username=create_data.username,\n                        hashed_password=hashed_password,\n                    )\n\n                    await self.db_config.crud_users.create(\n                        admin_session, object=cast(Any, internal_data)\n                    )\n                    await admin_session.commit()\n                    logger.info(\n                        \"Created initial admin user - username: %s\",\n                        create_data.username,\n                    )\n\n            except Exception as e:\n                logger.error(\n                    \"Error creating initial admin user: %s\", str(e), exc_info=True\n                )\n                raise\n</code></pre>"},{"location":"api/crud_admin/#crudadmin.admin_interface.crud_admin.CRUDAdmin.add_view","title":"<code>add_view(model, create_schema, update_schema, update_internal_schema, delete_schema, include_in_models=True, allowed_actions=None)</code>","text":"<p>Add CRUD view for a database model.</p> <p>Creates a web interface for managing model instances with forms generated from Pydantic schemas.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Type[DeclarativeBase]</code> <p>SQLAlchemy model class to manage</p> required <code>create_schema</code> <code>Type[BaseModel]</code> <p>Pydantic schema for create operations</p> required <code>update_schema</code> <code>Type[BaseModel]</code> <p>Pydantic schema for update operations</p> required <code>update_internal_schema</code> <code>Optional[Type[BaseModel]]</code> <p>Internal schema for special update cases</p> required <code>delete_schema</code> <code>Optional[Type[BaseModel]]</code> <p>Schema for delete operations</p> required <code>include_in_models</code> <code>bool</code> <p>Show in models list in admin UI</p> <code>True</code> <code>allowed_actions</code> <code>Optional[set[str]]</code> <p>Set of allowed operations: - \"view\": Allow viewing records - \"create\": Allow creating new records - \"update\": Allow updating existing records - \"delete\": Allow deleting records Defaults to all actions if None</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If schemas don't match model structure</p> <code>TypeError</code> <p>If model is not a SQLAlchemy model</p> Notes <ul> <li>Forms are auto-generated with field types determined from Pydantic schemas</li> <li>Actions controlled by allowed_actions parameter</li> </ul> <p>URL Routes: - List view: /admin// - Create: /admin//create - Update: /admin//update/ - Delete: /admin//delete/ Example <p>Basic user management: <pre><code>from pydantic import BaseModel, EmailStr, Field\nfrom typing import Optional\nfrom datetime import datetime\n\nclass UserCreate(BaseModel):\n    username: str = Field(..., min_length=3, max_length=50)\n    email: EmailStr\n    role: str = Field(default=\"user\")\n    active: bool = Field(default=True)\n    join_date: datetime = Field(default_factory=datetime.utcnow)\n\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = None\n    role: Optional[str] = None\n    active: Optional[bool] = None\n\nadmin.add_view(\n    model=User,\n    create_schema=UserCreate,\n    update_schema=UserUpdate,\n    update_internal_schema=None,\n    delete_schema=None,\n    allowed_actions={\"view\", \"create\", \"update\"}  # No deletion\n)\n</code></pre></p> <p>Product catalog with custom validation: <pre><code>from decimal import Decimal\nfrom pydantic import Field, validator\n\nclass ProductCreate(BaseModel):\n    name: str = Field(..., min_length=2, max_length=100)\n    price: Decimal = Field(..., ge=0)\n    description: Optional[str] = Field(None, max_length=500)\n    category: str\n    in_stock: bool = True\n\n    @validator(\"price\")\n    def validate_price(cls, v):\n        if v &gt; 1000000:\n            raise ValueError(\"Price cannot exceed 1,000,000\")\n        return v\n\nclass ProductUpdate(BaseModel):\n    name: Optional[str] = Field(None, min_length=2, max_length=100)\n    price: Optional[Decimal] = Field(None, ge=0)\n    description: Optional[str] = None\n    in_stock: Optional[bool] = None\n\nadmin.add_view(\n    model=Product,\n    create_schema=ProductCreate,\n    update_schema=ProductUpdate,\n    update_internal_schema=None,\n    delete_schema=None,\n    allowed_actions={\"view\", \"create\", \"update\"}\n)\n</code></pre></p> <p>Order management with enum and relationships: <pre><code>from enum import Enum\nfrom typing import List\n\nclass OrderStatus(str, Enum):\n    pending = \"pending\"\n    paid = \"paid\"\n    shipped = \"shipped\"\n    delivered = \"delivered\"\n    cancelled = \"cancelled\"\n\nclass OrderCreate(BaseModel):\n    user_id: int = Field(..., gt=0)\n    items: List[int] = Field(..., min_items=1)\n    shipping_address: str\n    status: OrderStatus = Field(default=OrderStatus.pending)\n    notes: Optional[str] = None\n\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"user_id\": 1,\n                \"items\": [1, 2, 3],\n                \"shipping_address\": \"123 Main St\",\n                \"status\": \"pending\"\n            }\n        }\n\nclass OrderUpdate(BaseModel):\n    status: Optional[OrderStatus] = None\n    notes: Optional[str] = None\n\n# Custom delete schema with soft delete\nclass OrderDelete(BaseModel):\n    archive: bool = Field(default=False, description=\"Archive instead of delete\")\n    reason: Optional[str] = Field(None, max_length=200)\n\nadmin.add_view(\n    model=Order,\n    create_schema=OrderCreate,\n    update_schema=OrderUpdate,\n    update_internal_schema=None,\n    delete_schema=OrderDelete,\n    allowed_actions={\"view\", \"create\", \"update\", \"delete\"}\n)\n</code></pre></p> <p>Read-only audit log: <pre><code>class AuditLogSchema(BaseModel):\n    id: int\n    timestamp: datetime\n    user_id: int\n    action: str\n    details: dict\n\n    class Config:\n        orm_mode = True\n\nadmin.add_view(\n    model=AuditLog,\n    create_schema=AuditLogSchema,\n    update_schema=AuditLogSchema,\n    update_internal_schema=None,\n    delete_schema=None,\n    allowed_actions={\"view\"},  # Read-only\n    include_in_models=False  # Hide from nav\n)\n</code></pre></p> Source code in <code>crudadmin/admin_interface/crud_admin.py</code> <pre><code>def add_view(\n    self,\n    model: Type[DeclarativeBase],\n    create_schema: Type[BaseModel],\n    update_schema: Type[BaseModel],\n    update_internal_schema: Optional[Type[BaseModel]],\n    delete_schema: Optional[Type[BaseModel]],\n    include_in_models: bool = True,\n    allowed_actions: Optional[set[str]] = None,\n) -&gt; None:\n    \"\"\"\n    Add CRUD view for a database model.\n\n    Creates a web interface for managing model instances with forms generated\n    from Pydantic schemas.\n\n    Args:\n        model: SQLAlchemy model class to manage\n        create_schema: Pydantic schema for create operations\n        update_schema: Pydantic schema for update operations\n        update_internal_schema: Internal schema for special update cases\n        delete_schema: Schema for delete operations\n        include_in_models: Show in models list in admin UI\n        allowed_actions: **Set of allowed operations:**\n            - **\"view\"**: Allow viewing records\n            - **\"create\"**: Allow creating new records\n            - **\"update\"**: Allow updating existing records\n            - **\"delete\"**: Allow deleting records\n            Defaults to all actions if None\n\n    Raises:\n        ValueError: If schemas don't match model structure\n        TypeError: If model is not a SQLAlchemy model\n\n    Notes:\n        - Forms are auto-generated with field types determined from Pydantic schemas\n        - Actions controlled by allowed_actions parameter\n\n        URL Routes:\n        - List view: /admin/&lt;model_name&gt;/\n        - Create: /admin/&lt;model_name&gt;/create\n        - Update: /admin/&lt;model_name&gt;/update/&lt;id&gt;\n        - Delete: /admin/&lt;model_name&gt;/delete/&lt;id&gt;\n\n    Example:\n        Basic user management:\n        ```python\n        from pydantic import BaseModel, EmailStr, Field\n        from typing import Optional\n        from datetime import datetime\n\n        class UserCreate(BaseModel):\n            username: str = Field(..., min_length=3, max_length=50)\n            email: EmailStr\n            role: str = Field(default=\"user\")\n            active: bool = Field(default=True)\n            join_date: datetime = Field(default_factory=datetime.utcnow)\n\n        class UserUpdate(BaseModel):\n            email: Optional[EmailStr] = None\n            role: Optional[str] = None\n            active: Optional[bool] = None\n\n        admin.add_view(\n            model=User,\n            create_schema=UserCreate,\n            update_schema=UserUpdate,\n            update_internal_schema=None,\n            delete_schema=None,\n            allowed_actions={\"view\", \"create\", \"update\"}  # No deletion\n        )\n        ```\n\n        Product catalog with custom validation:\n        ```python\n        from decimal import Decimal\n        from pydantic import Field, validator\n\n        class ProductCreate(BaseModel):\n            name: str = Field(..., min_length=2, max_length=100)\n            price: Decimal = Field(..., ge=0)\n            description: Optional[str] = Field(None, max_length=500)\n            category: str\n            in_stock: bool = True\n\n            @validator(\"price\")\n            def validate_price(cls, v):\n                if v &gt; 1000000:\n                    raise ValueError(\"Price cannot exceed 1,000,000\")\n                return v\n\n        class ProductUpdate(BaseModel):\n            name: Optional[str] = Field(None, min_length=2, max_length=100)\n            price: Optional[Decimal] = Field(None, ge=0)\n            description: Optional[str] = None\n            in_stock: Optional[bool] = None\n\n        admin.add_view(\n            model=Product,\n            create_schema=ProductCreate,\n            update_schema=ProductUpdate,\n            update_internal_schema=None,\n            delete_schema=None,\n            allowed_actions={\"view\", \"create\", \"update\"}\n        )\n        ```\n\n        Order management with enum and relationships:\n        ```python\n        from enum import Enum\n        from typing import List\n\n        class OrderStatus(str, Enum):\n            pending = \"pending\"\n            paid = \"paid\"\n            shipped = \"shipped\"\n            delivered = \"delivered\"\n            cancelled = \"cancelled\"\n\n        class OrderCreate(BaseModel):\n            user_id: int = Field(..., gt=0)\n            items: List[int] = Field(..., min_items=1)\n            shipping_address: str\n            status: OrderStatus = Field(default=OrderStatus.pending)\n            notes: Optional[str] = None\n\n            class Config:\n                json_schema_extra = {\n                    \"example\": {\n                        \"user_id\": 1,\n                        \"items\": [1, 2, 3],\n                        \"shipping_address\": \"123 Main St\",\n                        \"status\": \"pending\"\n                    }\n                }\n\n        class OrderUpdate(BaseModel):\n            status: Optional[OrderStatus] = None\n            notes: Optional[str] = None\n\n        # Custom delete schema with soft delete\n        class OrderDelete(BaseModel):\n            archive: bool = Field(default=False, description=\"Archive instead of delete\")\n            reason: Optional[str] = Field(None, max_length=200)\n\n        admin.add_view(\n            model=Order,\n            create_schema=OrderCreate,\n            update_schema=OrderUpdate,\n            update_internal_schema=None,\n            delete_schema=OrderDelete,\n            allowed_actions={\"view\", \"create\", \"update\", \"delete\"}\n        )\n        ```\n\n        Read-only audit log:\n        ```python\n        class AuditLogSchema(BaseModel):\n            id: int\n            timestamp: datetime\n            user_id: int\n            action: str\n            details: dict\n\n            class Config:\n                orm_mode = True\n\n        admin.add_view(\n            model=AuditLog,\n            create_schema=AuditLogSchema,\n            update_schema=AuditLogSchema,\n            update_internal_schema=None,\n            delete_schema=None,\n            allowed_actions={\"view\"},  # Read-only\n            include_in_models=False  # Hide from nav\n        )\n        ```\n    \"\"\"\n    model_key = model.__name__\n    if include_in_models:\n        self.models[model_key] = {\n            \"model\": model,\n            \"create_schema\": create_schema,\n            \"update_schema\": update_schema,\n            \"update_internal_schema\": update_internal_schema,\n            \"delete_schema\": delete_schema,\n            \"crud\": FastCRUD(model),\n        }\n\n    allowed_actions = allowed_actions or {\"view\", \"create\", \"update\", \"delete\"}\n\n    admin_view = ModelView(\n        database_config=self.db_config,\n        templates=self.templates,\n        model=model,\n        create_schema=create_schema,\n        update_schema=update_schema,\n        update_internal_schema=update_internal_schema,\n        delete_schema=delete_schema,\n        admin_site=self.admin_site,\n        allowed_actions=allowed_actions,\n        event_integration=self.event_integration if self.track_events else None,\n    )\n\n    if self.track_events and self.event_integration:\n        admin_view.event_integration = self.event_integration\n\n    current_user_dep = cast(\n        Callable[..., Any], self.admin_site.admin_authentication.get_current_user\n    )\n    self.app.include_router(\n        admin_view.router,\n        prefix=f\"/{model_key}\",\n        dependencies=[Depends(current_user_dep)],\n        include_in_schema=False,\n    )\n</code></pre>"},{"location":"api/crud_admin/#crudadmin.admin_interface.crud_admin.CRUDAdmin.event_log_content","title":"<code>event_log_content()</code>","text":"<p>Create endpoint for event log data with filtering and pagination.</p> <p>Returns:</p> Type Description <code>EndpointFunction</code> <p>FastAPI route handler that provides filtered event data</p> <code>EndpointFunction</code> <p>with user and audit details</p> Notes <ul> <li>Supports filtering by:</li> <li>Event type</li> <li>Status</li> <li>Username</li> <li>Date range</li> <li>Returns enriched events with:</li> <li>Username</li> <li>Resource details</li> <li>Audit trail data</li> <li>Includes pagination metadata</li> </ul> <p>Examples:</p> <p>Filter events: GET /management/events/content?event_type=create&amp;status=success</p> <p>Filter by date: GET /management/events/content?start_date=2024-01-01&amp;end_date=2024-01-31</p> Source code in <code>crudadmin/admin_interface/crud_admin.py</code> <pre><code>def event_log_content(self) -&gt; EndpointFunction:\n    \"\"\"\n    Create endpoint for event log data with filtering and pagination.\n\n    Returns:\n        FastAPI route handler that provides filtered event data\n        with user and audit details\n\n    Notes:\n        - Supports filtering by:\n        - Event type\n        - Status\n        - Username\n        - Date range\n        - Returns enriched events with:\n        - Username\n        - Resource details\n        - Audit trail data\n        - Includes pagination metadata\n\n    Examples:\n        Filter events:\n        GET /management/events/content?event_type=create&amp;status=success\n\n        Filter by date:\n        GET /management/events/content?start_date=2024-01-01&amp;end_date=2024-01-31\n    \"\"\"\n\n    admin_db_db_dependency = cast(\n        Callable[..., AsyncSession], self.db_config.get_admin_db\n    )\n\n    async def event_log_content_inner(\n        request: Request,\n        admin_db: AsyncSession = Depends(admin_db_db_dependency),\n        page: int = 1,\n        limit: int = 10,\n    ) -&gt; RouteResponse:\n        try:\n            if not self.db_config.AdminEventLog:\n                raise ValueError(\"AdminEventLog is not configured\")\n\n            crud_events: FastCRUD = FastCRUD(self.db_config.AdminEventLog)\n\n            event_type = cast(Optional[str], request.query_params.get(\"event_type\"))\n            status = cast(Optional[str], request.query_params.get(\"status\"))\n            username = cast(Optional[str], request.query_params.get(\"username\"))\n            start_date = cast(Optional[str], request.query_params.get(\"start_date\"))\n            end_date = cast(Optional[str], request.query_params.get(\"end_date\"))\n\n            filter_criteria: Dict[str, Any] = {}\n            if event_type:\n                filter_criteria[\"event_type\"] = event_type\n            if status:\n                filter_criteria[\"status\"] = status\n\n            if username:\n                user = await self.db_config.crud_users.get(\n                    db=admin_db, username=username\n                )\n                if user and isinstance(user, dict):\n                    filter_criteria[\"user_id\"] = user.get(\"id\")\n\n            if start_date:\n                start = datetime.strptime(start_date, \"%Y-%m-%d\").replace(\n                    tzinfo=UTC\n                )\n                filter_criteria[\"timestamp__gte\"] = start\n\n            if end_date:\n                end = (\n                    datetime.strptime(end_date, \"%Y-%m-%d\") + timedelta(days=1)\n                ).replace(tzinfo=UTC)\n                filter_criteria[\"timestamp__lt\"] = end\n\n            events = await crud_events.get_multi(\n                db=admin_db,\n                offset=(page - 1) * limit,\n                limit=limit,\n                sort_columns=[\"timestamp\"],\n                sort_orders=[\"desc\"],\n                **filter_criteria,\n            )\n\n            enriched_events = []\n            if isinstance(events[\"data\"], list):\n                for event in events[\"data\"]:\n                    if isinstance(event, dict):\n                        event_data = dict(event)\n                        user = await self.db_config.crud_users.get(\n                            db=admin_db, id=event.get(\"user_id\")\n                        )\n                        if isinstance(user, dict):\n                            event_data[\"username\"] = user.get(\"username\", \"Unknown\")\n\n                        if event.get(\"resource_type\") and event.get(\"resource_id\"):\n                            if not self.db_config.AdminAuditLog:\n                                raise ValueError(\"AdminAuditLog is not configured\")\n\n                            crud_audits: FastCRUD = FastCRUD(\n                                self.db_config.AdminAuditLog\n                            )\n                            audit = await crud_audits.get(\n                                db=admin_db, event_id=event.get(\"id\")\n                            )\n                            if audit and isinstance(audit, dict):\n                                event_data[\"details\"] = {\n                                    \"resource_details\": {\n                                        \"model\": event.get(\"resource_type\"),\n                                        \"id\": event.get(\"resource_id\"),\n                                        \"changes\": audit.get(\"new_state\"),\n                                    }\n                                }\n\n                        enriched_events.append(event_data)\n\n            total_items = events.get(\"total_count\", 0)\n            assert isinstance(total_items, int), (\n                f\"'total_count' should be int, got {type(total_items)}\"\n            )\n\n            total_pages = max(1, (total_items + limit - 1) // limit)\n\n            return self.templates.TemplateResponse(\n                \"admin/management/events_content.html\",\n                {\n                    \"request\": request,\n                    \"events\": enriched_events,\n                    \"page\": page,\n                    \"total_pages\": total_pages,\n                    \"mount_path\": self.mount_path,\n                    \"start_date\": start_date,\n                    \"end_date\": end_date,\n                    \"selected_type\": event_type,\n                    \"selected_status\": status,\n                    \"selected_user\": username,\n                },\n            )\n\n        except Exception as e:\n            logger.error(f\"Error retrieving events: {str(e)}\")\n            return self.templates.TemplateResponse(\n                \"admin/management/events_content.html\",\n                {\n                    \"request\": request,\n                    \"events\": [],\n                    \"page\": 1,\n                    \"total_pages\": 1,\n                    \"mount_path\": self.mount_path,\n                },\n            )\n\n    return event_log_content_inner\n</code></pre>"},{"location":"api/crud_admin/#crudadmin.admin_interface.crud_admin.CRUDAdmin.event_log_page","title":"<code>event_log_page()</code>","text":"<p>Create endpoint for event log main page.</p> <p>Returns:</p> Type Description <code>Callable[[Request, AsyncSession], Awaitable[RouteResponse]]</code> <p>FastAPI route handler that renders event log template</p> <code>Callable[[Request, AsyncSession], Awaitable[RouteResponse]]</code> <p>with filtering options</p> Source code in <code>crudadmin/admin_interface/crud_admin.py</code> <pre><code>def event_log_page(\n    self,\n) -&gt; Callable[[Request, AsyncSession], Awaitable[RouteResponse]]:\n    \"\"\"\n    Create endpoint for event log main page.\n\n    Returns:\n        FastAPI route handler that renders event log template\n        with filtering options\n    \"\"\"\n\n    admin_db_db_dependency = cast(\n        Callable[..., AsyncSession], self.db_config.get_admin_db\n    )\n    app_db_dependency = cast(Callable[..., AsyncSession], self.db_config.session)\n\n    async def event_log_page_inner(\n        request: Request,\n        admin_db: AsyncSession = Depends(admin_db_db_dependency),\n        app_db: AsyncSession = Depends(app_db_dependency),\n    ) -&gt; RouteResponse:\n        from ..event import EventStatus, EventType\n\n        users = await self.db_config.crud_users.get_multi(db=app_db)\n\n        context = await self.admin_site.get_base_context(\n            admin_db=admin_db, app_db=app_db\n        )\n        context.update(\n            {\n                \"request\": request,\n                \"include_sidebar_and_header\": True,\n                \"event_types\": [e.value for e in EventType],\n                \"statuses\": [s.value for s in EventStatus],\n                \"users\": users[\"data\"],\n                \"mount_path\": self.mount_path,\n            }\n        )\n\n        return self.templates.TemplateResponse(\n            \"admin/management/events.html\", context\n        )\n\n    return event_log_page_inner\n</code></pre>"},{"location":"api/crud_admin/#crudadmin.admin_interface.crud_admin.CRUDAdmin.health_check_content","title":"<code>health_check_content()</code>","text":"<p>Create endpoint for health check data.</p> <p>Returns:</p> Type Description <code>Callable[[Request, AsyncSession], Awaitable[RouteResponse]]</code> <p>FastAPI route handler that checks:</p> <code>Callable[[Request, AsyncSession], Awaitable[RouteResponse]]</code> <ul> <li>Database connectivity</li> </ul> <code>Callable[[Request, AsyncSession], Awaitable[RouteResponse]]</code> <ul> <li>Session management</li> </ul> <code>Callable[[Request, AsyncSession], Awaitable[RouteResponse]]</code> <ul> <li>Token service</li> </ul> Source code in <code>crudadmin/admin_interface/crud_admin.py</code> <pre><code>def health_check_content(\n    self,\n) -&gt; Callable[[Request, AsyncSession], Awaitable[RouteResponse]]:\n    \"\"\"\n    Create endpoint for health check data.\n\n    Returns:\n        FastAPI route handler that checks:\n        - Database connectivity\n        - Session management\n        - Token service\n    \"\"\"\n\n    db_dependency = cast(Callable[..., AsyncSession], self.db_config.session)\n\n    async def health_check_content_inner(\n        request: Request, db: AsyncSession = Depends(db_dependency)\n    ) -&gt; RouteResponse:\n        health_checks = {}\n\n        start_time = time.time()\n        try:\n            await db.execute(text(\"SELECT 1\"))\n            latency = (time.time() - start_time) * 1000\n            health_checks[\"database\"] = {\n                \"status\": \"healthy\",\n                \"message\": \"Connected successfully\",\n                \"latency\": latency,\n            }\n        except Exception as e:\n            health_checks[\"database\"] = {\"status\": \"unhealthy\", \"message\": str(e)}\n\n        try:\n            await self.session_manager.cleanup_expired_sessions(db)\n            health_checks[\"session_management\"] = {\n                \"status\": \"healthy\",\n                \"message\": \"Session cleanup working\",\n            }\n        except Exception as e:\n            health_checks[\"session_management\"] = {\n                \"status\": \"unhealthy\",\n                \"message\": str(e),\n            }\n\n        context = {\n            \"request\": request,\n            \"health_checks\": health_checks,\n            \"last_checked\": datetime.now(UTC),\n        }\n\n        return self.templates.TemplateResponse(\n            \"admin/management/health_content.html\", context\n        )\n\n    return health_check_content_inner\n</code></pre>"},{"location":"api/crud_admin/#crudadmin.admin_interface.crud_admin.CRUDAdmin.health_check_page","title":"<code>health_check_page()</code>","text":"<p>Create endpoint for system health check page.</p> <p>Returns:</p> Type Description <code>Callable[[Request, AsyncSession], Awaitable[RouteResponse]]</code> <p>FastAPI route handler that renders health check template</p> Source code in <code>crudadmin/admin_interface/crud_admin.py</code> <pre><code>def health_check_page(\n    self,\n) -&gt; Callable[[Request, AsyncSession], Awaitable[RouteResponse]]:\n    \"\"\"\n    Create endpoint for system health check page.\n\n    Returns:\n        FastAPI route handler that renders health check template\n    \"\"\"\n\n    admin_db_db_dependency = cast(\n        Callable[..., AsyncSession], self.db_config.get_admin_db\n    )\n    app_db_dependency = cast(Callable[..., AsyncSession], self.db_config.session)\n\n    async def health_check_page_inner(\n        request: Request,\n        admin_db: AsyncSession = Depends(admin_db_db_dependency),\n        app_db: AsyncSession = Depends(app_db_dependency),\n    ) -&gt; RouteResponse:\n        context = await self.admin_site.get_base_context(\n            admin_db=admin_db, app_db=app_db\n        )\n        context.update({\"request\": request, \"include_sidebar_and_header\": True})\n\n        return self.templates.TemplateResponse(\n            \"admin/management/health.html\", context\n        )\n\n    return health_check_page_inner\n</code></pre>"},{"location":"api/crud_admin/#crudadmin.admin_interface.crud_admin.CRUDAdmin.initialize","title":"<code>initialize()</code>  <code>async</code>","text":"<p>Initialize admin database tables and create initial admin user.</p> <p>Creates required tables: - AdminUser for user management - AdminSession for session tracking - AdminEventLog and AdminAuditLog if event tracking enabled</p> <p>Also creates initial admin user if credentials were provided.</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If event log models are misconfigured</p> <code>ValueError</code> <p>If database initialization fails</p> Notes <ul> <li>This is called automatically if setup_on_initialization=True</li> <li>Tables are created with 'checkfirst' to avoid conflicts</li> <li>Initial admin is only created if no admin exists</li> </ul> Example <p>Manual initialization: <pre><code>admin = CRUDAdmin(\n    session=async_session,\n    SECRET_KEY=\"key\",\n    setup_on_initialization=False\n)\nawait admin.initialize()\n</code></pre></p> Source code in <code>crudadmin/admin_interface/crud_admin.py</code> <pre><code>async def initialize(self) -&gt; None:\n    \"\"\"\n    Initialize admin database tables and create initial admin user.\n\n    Creates required tables:\n    - AdminUser for user management\n    - AdminSession for session tracking\n    - AdminEventLog and AdminAuditLog if event tracking enabled\n\n    Also creates initial admin user if credentials were provided.\n\n    Raises:\n        AssertionError: If event log models are misconfigured\n        ValueError: If database initialization fails\n\n    Notes:\n        - This is called automatically if setup_on_initialization=True\n        - Tables are created with 'checkfirst' to avoid conflicts\n        - Initial admin is only created if no admin exists\n\n    Example:\n        Manual initialization:\n        ```python\n        admin = CRUDAdmin(\n            session=async_session,\n            SECRET_KEY=\"key\",\n            setup_on_initialization=False\n        )\n        await admin.initialize()\n        ```\n    \"\"\"\n    if hasattr(self.db_config, \"AdminEventLog\") and self.db_config.AdminEventLog:\n        assert hasattr(self.db_config.AdminEventLog, \"metadata\"), (\n            \"AdminEventLog must have metadata\"\n        )\n\n    if hasattr(self.db_config, \"AdminAuditLog\") and self.db_config.AdminAuditLog:\n        assert hasattr(self.db_config.AdminAuditLog, \"metadata\"), (\n            \"AdminAuditLog must have metadata\"\n        )\n\n    async with self.db_config.admin_engine.begin() as conn:\n        await conn.run_sync(self.db_config.AdminUser.metadata.create_all)\n        await conn.run_sync(self.db_config.AdminSession.metadata.create_all)\n\n        if (\n            self.track_events\n            and self.db_config.AdminEventLog\n            and self.db_config.AdminAuditLog\n        ):\n            await conn.run_sync(self.db_config.AdminEventLog.metadata.create_all)\n            await conn.run_sync(self.db_config.AdminAuditLog.metadata.create_all)\n\n    if self.initial_admin:\n        await self._create_initial_admin(self.initial_admin)\n</code></pre>"},{"location":"api/crud_admin/#crudadmin.admin_interface.crud_admin.CRUDAdmin.setup","title":"<code>setup()</code>","text":"<p>Set up admin interface routes and views.</p> <p>Configures: - Authentication routes and middleware - Model CRUD views - Management views (health check, events) - Static files</p> Notes <ul> <li>Called automatically if setup_on_initialization=True</li> <li>Can be called manually after initialization</li> <li>Respects allowed_actions configuration</li> </ul> Source code in <code>crudadmin/admin_interface/crud_admin.py</code> <pre><code>def setup(\n    self,\n) -&gt; None:\n    \"\"\"\n    Set up admin interface routes and views.\n\n    Configures:\n    - Authentication routes and middleware\n    - Model CRUD views\n    - Management views (health check, events)\n    - Static files\n\n    Notes:\n        - Called automatically if setup_on_initialization=True\n        - Can be called manually after initialization\n        - Respects allowed_actions configuration\n    \"\"\"\n    self.admin_site = AdminSite(\n        database_config=self.db_config,\n        templates_directory=self.templates_directory,\n        models=self.models,\n        admin_authentication=self.admin_authentication,\n        mount_path=self.mount_path,\n        theme=self.theme,\n        secure_cookies=self.secure_cookies,\n        event_integration=self.event_integration if self.track_events else None,\n    )\n\n    self.admin_site.setup_routes()\n\n    for model_name, data in self.admin_authentication.auth_models.items():\n        allowed_actions = {\n            \"AdminUser\": {\"view\", \"create\", \"update\"},\n            \"AdminSession\": {\"view\", \"delete\"},\n        }.get(model_name, {\"view\"})\n\n        model = cast(Type[DeclarativeBase], data[\"model\"])\n        create_schema = cast(Type[BaseModel], data[\"create_schema\"])\n        update_schema = cast(Type[BaseModel], data[\"update_schema\"])\n        update_internal_schema = cast(\n            Optional[Type[BaseModel]], data[\"update_internal_schema\"]\n        )\n        delete_schema = cast(Optional[Type[BaseModel]], data[\"delete_schema\"])\n\n        self.add_view(\n            model=model,\n            create_schema=create_schema,\n            update_schema=update_schema,\n            update_internal_schema=update_internal_schema,\n            delete_schema=delete_schema,\n            include_in_models=False,\n            allowed_actions=allowed_actions,\n        )\n\n    get_user_dependency = cast(\n        Callable[..., AsyncSession], self.admin_authentication.get_current_user\n    )\n\n    self.router.add_api_route(\n        \"/management/health\",\n        self.health_check_page(),\n        methods=[\"GET\"],\n        include_in_schema=False,\n        dependencies=[Depends(get_user_dependency)],\n        response_model=None,\n    )\n\n    self.router.add_api_route(\n        \"/management/health/content\",\n        self.health_check_content(),\n        methods=[\"GET\"],\n        include_in_schema=False,\n        dependencies=[Depends(get_user_dependency)],\n        response_model=None,\n    )\n\n    if self.track_events:\n        self.router.add_api_route(\n            \"/management/events\",\n            self.event_log_page(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            dependencies=[Depends(get_user_dependency)],\n            response_model=None,\n        )\n        self.router.add_api_route(\n            \"/management/events/content\",\n            self.event_log_content(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            dependencies=[Depends(get_user_dependency)],\n            response_model=None,\n        )\n\n    self.router.include_router(router=self.admin_site.router)\n</code></pre>"},{"location":"api/crud_admin/#crudadmin.admin_interface.crud_admin.CRUDAdmin.setup_event_routes","title":"<code>setup_event_routes()</code>","text":"<p>Set up routes for event log management.</p> <p>Creates endpoints: - GET /management/events - Event log page - GET /management/events/content - Event log data</p> Notes <ul> <li>Only created if track_events=True</li> <li>Routes require authentication</li> </ul> Source code in <code>crudadmin/admin_interface/crud_admin.py</code> <pre><code>def setup_event_routes(self) -&gt; None:\n    \"\"\"\n    Set up routes for event log management.\n\n    Creates endpoints:\n    - GET /management/events - Event log page\n    - GET /management/events/content - Event log data\n\n    Notes:\n        - Only created if track_events=True\n        - Routes require authentication\n    \"\"\"\n    if self.track_events:\n        self.router.add_api_route(\n            \"/management/events\",\n            self.event_log_page(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            dependencies=[Depends(self.admin_authentication.get_current_user())],\n            response_model=None,\n        )\n        self.router.add_api_route(\n            \"/management/events/content\",\n            self.event_log_content(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            dependencies=[Depends(self.admin_authentication.get_current_user())],\n            response_model=None,\n        )\n</code></pre>"},{"location":"api/model_view/","title":"ModelView Class API Reference","text":""},{"location":"api/model_view/#class-definition","title":"Class Definition","text":"<p>View class for managing CRUD operations and UI for database models in FastAPI admin interface.</p> Features <ul> <li>Automatic form generation from Pydantic schemas</li> <li>List view with pagination, sorting, and filtering</li> <li>Create/update forms with validation</li> <li>Bulk delete operations</li> <li>Event logging integration</li> <li>HTMX-powered dynamic updates</li> </ul> <p>Parameters:</p> Name Type Description Default <code>database_config</code> <code>DatabaseConfig</code> <p>DatabaseConfig instance for DB connections</p> required <code>templates</code> <code>Jinja2Templates</code> <p>Jinja2Templates instance for rendering views</p> required <code>model</code> <code>Type[DeclarativeBase]</code> <p>SQLAlchemy model class to manage</p> required <code>allowed_actions</code> <code>Set[str]</code> <p>Set of allowed operations ('view', 'create', 'update', 'delete')</p> required <code>create_schema</code> <code>Type[CreateSchemaType]</code> <p>Pydantic schema for create operations</p> required <code>update_schema</code> <code>Type[UpdateSchemaType]</code> <p>Pydantic schema for update operations</p> required <code>update_internal_schema</code> <code>Optional[Type[UpdateSchemaInternalType]]</code> <p>Optional internal schema for special update cases</p> <code>None</code> <code>delete_schema</code> <code>Optional[Type[DeleteSchemaType]]</code> <p>Optional schema for delete operations</p> <code>None</code> <code>select_schema</code> <code>Optional[Type[SelectSchemaType]]</code> <p>Optional schema for select operations</p> <code>None</code> <code>admin_model</code> <code>bool</code> <p>Whether this is an admin-specific model</p> <code>False</code> <code>admin_site</code> <code>Optional[Any]</code> <p>Reference to parent AdminSite instance</p> <code>None</code> <code>event_integration</code> <code>Optional[Any]</code> <p>Optional event logging integration</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If schemas don't match model structure</p> <code>TypeError</code> <p>If model is not a SQLAlchemy model</p> <code>RuntimeError</code> <p>If required dependencies are missing</p> Notes <ul> <li>Forms are auto-generated based on Pydantic schema definitions</li> <li>List views support server-side pagination and filtering</li> <li>Changes are tracked if event logging is enabled</li> <li>HTMX is used for dynamic content updates</li> <li>Templates can be customized by overriding defaults</li> </ul> URLs Generated <p>List View:     GET /{model_name}/ - Main list view with pagination     GET /{model_name}/get_model_list - HTMX-powered list content</p> <p>Create:     GET /{model_name}/create_page - Create form     POST /{model_name}/form_create - Handle create submission</p> <p>Update:     GET /{model_name}/update/{id} - Update form for specific record     POST /{model_name}/form_update/{id} - Handle update submission</p> <p>Delete:     DELETE /{model_name}/bulk-delete - Bulk delete selected records</p> <p>API Endpoints:     All CRUD operations also exposed as REST API endpoints under /crud/</p> Example <p>Basic model view setup: <pre><code>from pydantic import BaseModel, Field\nfrom sqlalchemy import Column, Integer, String\nfrom sqlalchemy.ext.declarative import DeclarativeBase\n\n# Define model\nclass User(DeclarativeBase):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    username = Column(String, unique=True)\n    email = Column(String)\n    role = Column(String)\n\n# Define schemas\nclass UserCreate(BaseModel):\n    username: str = Field(..., min_length=3)\n    email: str = Field(..., pattern=r\"[^@]+@[^@]+\\.[^@]+\")\n    role: str = Field(default=\"user\")\n\nclass UserUpdate(BaseModel):\n    email: Optional[str] = Field(None, pattern=r\"[^@]+@[^@]+\\.[^@]+\")\n    role: Optional[str] = None\n\n# Create view\nuser_view = ModelView(\n    database_config=db_config,\n    templates=templates,\n    model=User,\n    create_schema=UserCreate,\n    update_schema=UserUpdate,\n    allowed_actions={\"view\", \"create\", \"update\"}\n)\n</code></pre></p> <p>Custom form validation: <pre><code>from datetime import datetime\nfrom decimal import Decimal\nfrom typing import Optional\nfrom pydantic import BaseModel, Field, validator\n\nclass OrderCreate(BaseModel):\n    customer_id: int\n    total: Decimal = Field(..., ge=0)\n    status: str = Field(default=\"pending\")\n    notes: Optional[str] = None\n\n    @validator(\"total\")\n    def validate_total(cls, v):\n        if v &gt; 1000000:\n            raise ValueError(\"Order total cannot exceed 1,000,000\")\n        return v\n\n    @validator(\"status\")\n    def validate_status(cls, v):\n        allowed = {\"pending\", \"paid\", \"shipped\", \"cancelled\"}\n        if v not in allowed:\n            raise ValueError(f\"Status must be one of: {allowed}\")\n        return v\n\nclass OrderUpdate(BaseModel):\n    status: Optional[str] = None\n    notes: Optional[str] = None\n\n    @validator(\"status\")\n    def validate_status(cls, v):\n        if v is not None:\n            allowed = {\"pending\", \"paid\", \"shipped\", \"cancelled\"}\n            if v not in allowed:\n                raise ValueError(f\"Status must be one of: {allowed}\")\n        return v\n\norder_view = ModelView(\n    database_config=db_config,\n    templates=templates,\n    model=Order,\n    create_schema=OrderCreate,\n    update_schema=OrderUpdate,\n    allowed_actions={\"view\", \"create\", \"update\"}\n)\n</code></pre></p> <p>Event logging integration: <pre><code>from typing import Optional\nfrom datetime import datetime\nfrom pydantic import BaseModel, Field\n\nclass ProductCreate(BaseModel):\n    name: str\n    price: float = Field(..., gt=0)\n    stock: int = Field(..., ge=0)\n\nclass ProductUpdate(BaseModel):\n    name: Optional[str] = None\n    price: Optional[float] = Field(None, gt=0)\n    stock: Optional[int] = Field(None, ge=0)\n\n# With event logging\nproduct_view = ModelView(\n    database_config=db_config,\n    templates=templates,\n    model=Product,\n    create_schema=ProductCreate,\n    update_schema=ProductUpdate,\n    event_integration=event_logger,  # Enable logging\n    allowed_actions={\"view\", \"create\", \"update\", \"delete\"}\n)\n\n# Events logged:\n# - Record creation with user info\n# - Updates with change details\n# - Deletions with record info\n# - View access for audit trails\n</code></pre></p> <p>Custom templates: <pre><code>templates = Jinja2Templates(directory=\"custom_templates\")\n\n# Override default templates\ncustom_templates = {\n    \"list\": \"custom/model/list.html\",\n    \"create\": \"custom/model/create.html\",\n    \"update\": \"custom/model/update.html\"\n}\n\nview = ModelView(\n    database_config=db_config,\n    templates=templates,  # Custom templates\n    model=User,\n    create_schema=UserCreate,\n    update_schema=UserUpdate,\n    allowed_actions={\"view\", \"create\", \"update\"}\n)\n</code></pre></p> <p>Restricted actions: <pre><code># Read-only view\nreadonly_view = ModelView(\n    database_config=db_config,\n    templates=templates,\n    model=AuditLog,\n    create_schema=AuditLogSchema,\n    update_schema=AuditLogSchema,\n    allowed_actions={\"view\"}  # View only\n)\n\n# No delete view\nno_delete_view = ModelView(\n    database_config=db_config,\n    templates=templates,\n    model=Customer,\n    create_schema=CustomerCreate,\n    update_schema=CustomerUpdate,\n    allowed_actions={\"view\", \"create\", \"update\"}  # No delete\n)\n</code></pre></p> Source code in <code>crudadmin/admin_interface/model_view.py</code> <pre><code>class ModelView:\n    r\"\"\"\n    View class for managing CRUD operations and UI for database models in FastAPI admin interface.\n\n    Features:\n        - Automatic form generation from Pydantic schemas\n        - List view with pagination, sorting, and filtering\n        - Create/update forms with validation\n        - Bulk delete operations\n        - Event logging integration\n        - HTMX-powered dynamic updates\n\n    Args:\n        database_config: DatabaseConfig instance for DB connections\n        templates: Jinja2Templates instance for rendering views\n        model: SQLAlchemy model class to manage\n        allowed_actions: Set of allowed operations ('view', 'create', 'update', 'delete')\n        create_schema: Pydantic schema for create operations\n        update_schema: Pydantic schema for update operations\n        update_internal_schema: Optional internal schema for special update cases\n        delete_schema: Optional schema for delete operations\n        select_schema: Optional schema for select operations\n        admin_model: Whether this is an admin-specific model\n        admin_site: Reference to parent AdminSite instance\n        event_integration: Optional event logging integration\n\n    Raises:\n        ValueError: If schemas don't match model structure\n        TypeError: If model is not a SQLAlchemy model\n        RuntimeError: If required dependencies are missing\n\n    Notes:\n        - Forms are auto-generated based on Pydantic schema definitions\n        - List views support server-side pagination and filtering\n        - Changes are tracked if event logging is enabled\n        - HTMX is used for dynamic content updates\n        - Templates can be customized by overriding defaults\n\n    URLs Generated:\n        **List View:**\n            GET /{model_name}/ - Main list view with pagination\n            GET /{model_name}/get_model_list - HTMX-powered list content\n\n        **Create:**\n            GET /{model_name}/create_page - Create form\n            POST /{model_name}/form_create - Handle create submission\n\n        **Update:**\n            GET /{model_name}/update/{id} - Update form for specific record\n            POST /{model_name}/form_update/{id} - Handle update submission\n\n        **Delete:**\n            DELETE /{model_name}/bulk-delete - Bulk delete selected records\n\n        **API Endpoints:**\n            All CRUD operations also exposed as REST API endpoints under /crud/\n\n    Example:\n        Basic model view setup:\n        ```python\n        from pydantic import BaseModel, Field\n        from sqlalchemy import Column, Integer, String\n        from sqlalchemy.ext.declarative import DeclarativeBase\n\n        # Define model\n        class User(DeclarativeBase):\n            __tablename__ = \"users\"\n            id = Column(Integer, primary_key=True)\n            username = Column(String, unique=True)\n            email = Column(String)\n            role = Column(String)\n\n        # Define schemas\n        class UserCreate(BaseModel):\n            username: str = Field(..., min_length=3)\n            email: str = Field(..., pattern=r\"[^@]+@[^@]+\\.[^@]+\")\n            role: str = Field(default=\"user\")\n\n        class UserUpdate(BaseModel):\n            email: Optional[str] = Field(None, pattern=r\"[^@]+@[^@]+\\.[^@]+\")\n            role: Optional[str] = None\n\n        # Create view\n        user_view = ModelView(\n            database_config=db_config,\n            templates=templates,\n            model=User,\n            create_schema=UserCreate,\n            update_schema=UserUpdate,\n            allowed_actions={\"view\", \"create\", \"update\"}\n        )\n        ```\n\n        Custom form validation:\n        ```python\n        from datetime import datetime\n        from decimal import Decimal\n        from typing import Optional\n        from pydantic import BaseModel, Field, validator\n\n        class OrderCreate(BaseModel):\n            customer_id: int\n            total: Decimal = Field(..., ge=0)\n            status: str = Field(default=\"pending\")\n            notes: Optional[str] = None\n\n            @validator(\"total\")\n            def validate_total(cls, v):\n                if v &gt; 1000000:\n                    raise ValueError(\"Order total cannot exceed 1,000,000\")\n                return v\n\n            @validator(\"status\")\n            def validate_status(cls, v):\n                allowed = {\"pending\", \"paid\", \"shipped\", \"cancelled\"}\n                if v not in allowed:\n                    raise ValueError(f\"Status must be one of: {allowed}\")\n                return v\n\n        class OrderUpdate(BaseModel):\n            status: Optional[str] = None\n            notes: Optional[str] = None\n\n            @validator(\"status\")\n            def validate_status(cls, v):\n                if v is not None:\n                    allowed = {\"pending\", \"paid\", \"shipped\", \"cancelled\"}\n                    if v not in allowed:\n                        raise ValueError(f\"Status must be one of: {allowed}\")\n                return v\n\n        order_view = ModelView(\n            database_config=db_config,\n            templates=templates,\n            model=Order,\n            create_schema=OrderCreate,\n            update_schema=OrderUpdate,\n            allowed_actions={\"view\", \"create\", \"update\"}\n        )\n        ```\n\n        Event logging integration:\n        ```python\n        from typing import Optional\n        from datetime import datetime\n        from pydantic import BaseModel, Field\n\n        class ProductCreate(BaseModel):\n            name: str\n            price: float = Field(..., gt=0)\n            stock: int = Field(..., ge=0)\n\n        class ProductUpdate(BaseModel):\n            name: Optional[str] = None\n            price: Optional[float] = Field(None, gt=0)\n            stock: Optional[int] = Field(None, ge=0)\n\n        # With event logging\n        product_view = ModelView(\n            database_config=db_config,\n            templates=templates,\n            model=Product,\n            create_schema=ProductCreate,\n            update_schema=ProductUpdate,\n            event_integration=event_logger,  # Enable logging\n            allowed_actions={\"view\", \"create\", \"update\", \"delete\"}\n        )\n\n        # Events logged:\n        # - Record creation with user info\n        # - Updates with change details\n        # - Deletions with record info\n        # - View access for audit trails\n        ```\n\n        Custom templates:\n        ```python\n        templates = Jinja2Templates(directory=\"custom_templates\")\n\n        # Override default templates\n        custom_templates = {\n            \"list\": \"custom/model/list.html\",\n            \"create\": \"custom/model/create.html\",\n            \"update\": \"custom/model/update.html\"\n        }\n\n        view = ModelView(\n            database_config=db_config,\n            templates=templates,  # Custom templates\n            model=User,\n            create_schema=UserCreate,\n            update_schema=UserUpdate,\n            allowed_actions={\"view\", \"create\", \"update\"}\n        )\n        ```\n\n        Restricted actions:\n        ```python\n        # Read-only view\n        readonly_view = ModelView(\n            database_config=db_config,\n            templates=templates,\n            model=AuditLog,\n            create_schema=AuditLogSchema,\n            update_schema=AuditLogSchema,\n            allowed_actions={\"view\"}  # View only\n        )\n\n        # No delete view\n        no_delete_view = ModelView(\n            database_config=db_config,\n            templates=templates,\n            model=Customer,\n            create_schema=CustomerCreate,\n            update_schema=CustomerUpdate,\n            allowed_actions={\"view\", \"create\", \"update\"}  # No delete\n        )\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        database_config: DatabaseConfig,\n        templates: Jinja2Templates,\n        model: Type[DeclarativeBase],\n        allowed_actions: Set[str],\n        create_schema: Type[CreateSchemaType],\n        update_schema: Type[UpdateSchemaType],\n        update_internal_schema: Optional[Type[UpdateSchemaInternalType]] = None,\n        delete_schema: Optional[Type[DeleteSchemaType]] = None,\n        select_schema: Optional[Type[SelectSchemaType]] = None,\n        admin_model: bool = False,\n        admin_site: Optional[Any] = None,\n        event_integration: Optional[Any] = None,\n    ) -&gt; None:\n        self.db_config = database_config\n        self.templates = templates\n        self.model = model\n        self.model_key = model.__name__\n        self.router = APIRouter()\n\n        get_session: Callable[[], AsyncGenerator[AsyncSession, None]]\n        if self._model_is_admin_model(model):\n            get_session = self.db_config.get_admin_db\n        else:\n            get_session = cast(\n                Callable[[], AsyncGenerator[AsyncSession, None]], self.db_config.session\n            )\n        self.session = get_session\n\n        self.create_schema = create_schema\n        self.update_schema = update_schema\n        self.update_internal_schema = update_internal_schema\n        self.delete_schema = delete_schema\n        self.select_schema = select_schema\n\n        self.admin_model = admin_model\n        self.admin_site = admin_site\n        self.allowed_actions = allowed_actions\n        self.event_integration = event_integration\n\n        self.user_service = (\n            self.admin_site.admin_user_service if self.admin_site else None\n        )\n\n        self.crud: FastCRUD[Any, Any, Any, Any, Any, Any] = FastCRUD(self.model)\n\n        self.endpoints_template = EndpointCreator(\n            session=self.session,\n            model=self.model,\n            crud=self.crud,\n            create_schema=self.create_schema,\n            update_schema=self.update_schema,\n            delete_schema=self.delete_schema,\n        )\n        self.endpoints_template.add_routes_to_router()\n        self.router.include_router(self.endpoints_template.router, prefix=\"/crud\")\n\n        self.setup_routes()\n\n    def _model_is_admin_model(self, model: Type[DeclarativeBase]) -&gt; bool:\n        \"\"\"Check if the given model is one of the admin-specific models.\"\"\"\n        admin_model_names = [\n            self.db_config.AdminUser.__name__,\n            self.db_config.AdminSession.__name__,\n        ]\n        if self.db_config.AdminEventLog:\n            admin_model_names.append(self.db_config.AdminEventLog.__name__)\n        if self.db_config.AdminAuditLog:\n            admin_model_names.append(self.db_config.AdminAuditLog.__name__)\n\n        return model.__name__ in admin_model_names\n\n    def setup_routes(self) -&gt; None:\n        \"\"\"\n        Configure FastAPI routes based on allowed actions.\n\n        Sets up the following routes if allowed:\n        - Create: /form_create (POST), /create_page (GET)\n        - View: / (GET), /get_model_list (GET)\n        - Delete: /bulk-delete (DELETE)\n        - Update: /update/{id} (GET), /form_update/{id} (POST)\n\n        Routes are configured based on the allowed_actions set provided during initialization.\n        All routes use appropriate templates and include required dependencies.\n\n        Example:\n            ```python\n            # Configure with specific actions\n            view = ModelView(\n                allowed_actions={\"view\", \"create\", \"update\"},\n                ...\n            )\n            view.setup_routes()  # Only creates view/create/update routes\n            ```\n        \"\"\"\n        if \"create\" in self.allowed_actions:\n            self.router.add_api_route(\n                \"/form_create\",\n                self.form_create_endpoint(template=\"admin/model/create.html\"),\n                methods=[\"POST\"],\n                include_in_schema=False,\n                response_model=None,\n            )\n            self.router.add_api_route(\n                \"/create_page\",\n                self.get_model_create_page(template=\"admin/model/create.html\"),\n                methods=[\"GET\"],\n                include_in_schema=False,\n                response_model=None,\n            )\n\n        if \"view\" in self.allowed_actions:\n            self.router.add_api_route(\n                \"/\",\n                self.get_model_admin_page(),\n                methods=[\"GET\"],\n                include_in_schema=False,\n                response_model=None,\n            )\n            self.router.add_api_route(\n                \"/get_model_list\",\n                self.get_model_admin_page(\n                    template=\"admin/model/components/list_content.html\"\n                ),\n                methods=[\"GET\"],\n                include_in_schema=False,\n                response_model=None,\n            )\n\n        if \"delete\" in self.allowed_actions:\n            self.router.add_api_route(\n                \"/bulk-delete\",\n                self.bulk_delete_endpoint(),\n                methods=[\"DELETE\"],\n                include_in_schema=False,\n                response_model=None,\n            )\n\n        if \"update\" in self.allowed_actions:\n            self.router.add_api_route(\n                \"/update/{id}\",\n                self.get_model_update_page(template=\"admin/model/update.html\"),\n                methods=[\"GET\"],\n                include_in_schema=False,\n                response_model=None,\n            )\n            self.router.add_api_route(\n                \"/form_update/{id}\",\n                self.form_update_endpoint(),\n                methods=[\"POST\"],\n                include_in_schema=False,\n                response_model=None,\n            )\n\n    def form_create_endpoint(self, template: str) -&gt; EndpointCallable:\n        \"\"\"\n        Create endpoint for handling form submissions to create new model records.\n\n        Args:\n            template: Path to Jinja2 template for rendering form\n\n        Returns:\n            FastAPI route handler for create form submission\n\n        Features:\n            - Form data validation using create_schema\n            - Special handling for AdminUser model\n            - File upload support\n            - Field error collection\n            - Event logging integration\n            - HTMX support for dynamic updates\n\n        Notes:\n            - Uses @log_admin_action decorator for event tracking\n            - Handles both single and multi-value form fields\n            - Supports password hashing for AdminUser model\n\n        Example:\n            ```python\n            endpoint = view.form_create_endpoint(\"admin/model/create.html\")\n            router.add_api_route(\"/create\", endpoint, methods=[\"POST\"])\n            ```\n        \"\"\"\n\n        @log_admin_action(EventType.CREATE, model=self.model)\n        async def form_create_endpoint_inner(\n            request: Request,\n            db: AsyncSession = Depends(self.session),\n            admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n            current_user: dict = Depends(\n                cast(Any, self.admin_site).admin_authentication.get_current_user()\n            ),\n            event_integration=Depends(lambda: self.event_integration),\n        ) -&gt; Response:\n            \"\"\"Handle POST form submission to create a model record.\"\"\"\n            assert self.admin_site is not None\n\n            form_fields = _get_form_fields_from_schema(self.create_schema)\n            error_message: Optional[str] = None\n            field_errors: Dict[str, str] = {}\n            field_values: Dict[str, Any] = {}\n\n            try:\n                if request.method == \"POST\":\n                    form_data_raw = await request.form()\n                    form_data: Dict[str, Any] = {}\n\n                    for field in form_fields:\n                        key = field[\"name\"]\n                        raw_value = form_data_raw.getlist(key)\n                        if len(raw_value) == 1:\n                            value = raw_value[0]\n                            form_data[key] = value if value else field.get(\"default\")\n                            field_values[key] = value\n                        elif len(raw_value) &gt; 1:\n                            form_data[key] = raw_value\n                            field_values[key] = raw_value\n                        else:\n                            form_data[key] = field.get(\"default\")\n\n                    try:\n                        if self.model.__name__ == \"AdminUser\":\n                            if not self.user_service:\n                                raise ValueError(\"No user_service available.\")\n                            item_data = self.create_schema(**form_data)\n\n                            password = getattr(item_data, \"password\", None)\n                            if password is not None:\n                                hashed_password = self.user_service.get_password_hash(\n                                    password\n                                )\n                            else:\n                                hashed_password = None\n\n                            username = getattr(item_data, \"username\", None)\n                            if username is None:\n                                raise ValueError(\"AdminUser requires a username.\")\n\n                            from ..admin_user.schemas import AdminUserCreateInternal\n\n                            internal_data = AdminUserCreateInternal(\n                                username=username,\n                                hashed_password=hashed_password or \"\",\n                            )\n                            result = await self.crud.create(db=db, object=internal_data)\n                        else:\n                            item_data = self.create_schema(**form_data)\n                            result = await self.crud.create(db=db, object=item_data)\n                            await db.commit()\n\n                        if result:\n                            request.state.crud_result = result\n                            if \"HX-Request\" in request.headers:\n                                return RedirectResponse(\n                                    url=f\"/{self.admin_site.mount_path}/{self.model.__name__}/\",\n                                    headers={\n                                        \"HX-Redirect\": f\"/{self.admin_site.mount_path}/{self.model.__name__}/\"\n                                    },\n                                )\n                            return RedirectResponse(\n                                url=f\"/{self.admin_site.mount_path}/{self.model.__name__}/\",\n                                status_code=303,\n                            )\n\n                    except ValidationError as e:\n                        field_errors = {\n                            str(err[\"loc\"][0]): err[\"msg\"] for err in e.errors()\n                        }\n                        error_message = \"Please correct the errors below.\"\n                    except Exception as e:\n                        error_message = str(e)\n\n            except Exception as e:\n                error_message = str(e)\n\n            context = {\n                \"request\": request,\n                \"model_name\": self.model_key,\n                \"form_fields\": form_fields,\n                \"error\": error_message,\n                \"field_errors\": field_errors,\n                \"field_values\": field_values,\n                \"mount_path\": self.admin_site.mount_path,\n            }\n\n            return self.templates.TemplateResponse(\n                template, context, status_code=422 if error_message else 200\n            )\n\n        return cast(EndpointCallable, form_create_endpoint_inner)\n\n    def bulk_delete_endpoint(self) -&gt; EndpointCallable:\n        \"\"\"\n        Create endpoint for bulk deletion of model records.\n\n        Returns:\n            FastAPI route handler for bulk delete operations\n\n        Features:\n            - Handles multiple record deletion in one request\n            - Supports different primary key types (int, str, float)\n            - Validates IDs before deletion\n            - Handles pagination after deletion\n            - Event logging integration\n            - Transaction management\n\n        Notes:\n            - Expects JSON payload with \"ids\" list\n            - Performs type conversion based on primary key type\n            - Maintains pagination state after deletion\n            - Rolls back transaction on error\n\n        Example:\n            ```python\n            # Delete multiple records\n            await client.delete(\"/bulk-delete\", json={\"ids\": [1, 2, 3]})\n            ```\n\n        Response Formats:\n            **Success:**\n                - Returns updated list content template\n                - Status: 200 OK\n\n            **Errors:**\n                - 400: No IDs provided\n                - 422: Invalid ID format\n                - 400: Database error during deletion\n        \"\"\"\n\n        @log_admin_action(EventType.DELETE, model=self.model)\n        async def bulk_delete_endpoint_inner(\n            request: Request,\n            db: AsyncSession = Depends(self.session),\n            admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n            current_user: dict = Depends(\n                cast(Any, self.admin_site).admin_authentication.get_current_user()\n            ),\n            event_integration=Depends(lambda: self.event_integration),\n        ) -&gt; Response:\n            \"\"\"Handle bulk deletion of model instances using JSON list of IDs.\"\"\"\n            assert self.admin_site is not None\n            try:\n                body = await request.json()\n\n                page_str = request.query_params.get(\"page\", \"1\")\n                rows_str = request.query_params.get(\"rows-per-page-select\", \"10\")\n                page = int(page_str)\n                rows_per_page = int(rows_str)\n\n                ids = body.get(\"ids\", [])\n                if not ids:\n                    return JSONResponse(\n                        status_code=400,\n                        content={\n                            \"detail\": [{\"message\": \"No IDs provided for deletion\"}]\n                        },\n                    )\n\n                inspector = inspect(self.model)\n                primary_key = inspector.primary_key[0]\n                pk_name = primary_key.name\n                pk_type = primary_key.type.python_type\n\n                valid_ids: List[Union[int, str, float]] = []\n                for id_value in ids:\n                    try:\n                        if pk_type is int:\n                            valid_ids.append(int(id_value))\n                        elif pk_type is str:\n                            valid_ids.append(str(id_value))\n                        elif pk_type is float:\n                            valid_ids.append(float(id_value))\n                        else:\n                            valid_ids.append(id_value)\n                    except (ValueError, TypeError):\n                        return JSONResponse(\n                            status_code=422,\n                            content={\n                                \"detail\": [{\"message\": f\"Invalid ID value: {id_value}\"}]\n                            },\n                        )\n\n                filter_criteria: Dict[str, List[Union[int, str, float]]] = {\n                    f\"{pk_name}__in\": valid_ids\n                }\n                records_to_delete = await self.crud.get_multi(\n                    db=db, limit=len(valid_ids), **cast(Any, filter_criteria)\n                )\n\n                request.state.deleted_records = records_to_delete.get(\"data\", [])\n\n                try:\n                    for id_value in valid_ids:\n                        await self.crud.delete(\n                            db=db,\n                            db_row=None,\n                            commit=False,\n                            allow_multiple=False,\n                            **{pk_name: id_value},\n                        )\n                    await db.commit()\n                except Exception as e:\n                    await db.rollback()\n                    return JSONResponse(\n                        status_code=400,\n                        content={\n                            \"detail\": [{\"message\": f\"Error during deletion: {str(e)}\"}]\n                        },\n                    )\n\n                total_count = await self.crud.count(db=db)\n                max_page = (total_count + rows_per_page - 1) // rows_per_page\n                adjusted_page = min(page, max(1, max_page))\n\n                items_result = await self.crud.get_multi(\n                    db=db,\n                    offset=(adjusted_page - 1) * rows_per_page,\n                    limit=rows_per_page,\n                )\n\n                items: Dict[str, Any] = {\n                    \"data\": items_result.get(\"data\", []),\n                    \"total_count\": items_result.get(\"total_count\", 0),\n                }\n\n                table_columns = [column.key for column in self.model.__table__.columns]\n                primary_key_info = self.db_config.get_primary_key_info(self.model)\n\n                context: Dict[str, Any] = {\n                    \"request\": request,\n                    \"model_items\": items[\"data\"],\n                    \"model_name\": self.model_key,\n                    \"table_columns\": table_columns,\n                    \"total_items\": items[\"total_count\"],\n                    \"current_page\": adjusted_page,\n                    \"rows_per_page\": rows_per_page,\n                    \"primary_key_info\": primary_key_info,\n                    \"mount_path\": self.admin_site.mount_path,\n                }\n\n                return self.templates.TemplateResponse(\n                    \"admin/model/components/list_content.html\", context\n                )\n\n            except ValueError as e:\n                return JSONResponse(\n                    status_code=422, content={\"detail\": [{\"message\": str(e)}]}\n                )\n            except Exception as e:\n                return JSONResponse(\n                    status_code=422,\n                    content={\n                        \"detail\": [{\"message\": f\"Error processing request: {str(e)}\"}]\n                    },\n                )\n\n        return cast(EndpointCallable, bulk_delete_endpoint_inner)\n\n    def get_model_admin_page(\n        self, template: str = \"admin/model/list.html\"\n    ) -&gt; EndpointCallable:\n        \"\"\"\n        Create endpoint for model list view with filtering and pagination.\n\n        Args:\n            template: Path to Jinja2 template for rendering list view\n\n        Returns:\n            FastAPI route handler for model list page\n\n        Example:\n            ```python\n            # Basic list view\n            response = await client.get(\"/?page=1&amp;rows-per-page-select=25\")\n\n            # Sorted and filtered\n            response = await client.get(\n                \"/?sort_by=username&amp;sort_order=desc&amp;column-to-search=email&amp;search-input=example.com\"\n            )\n            ```\n        \"\"\"\n\n        async def get_model_admin_page_inner(\n            request: Request,\n            admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n            app_db: AsyncSession = Depends(\n                cast(\n                    Callable[..., AsyncGenerator[AsyncSession, None]],\n                    self.db_config.get_app_session(),\n                )\n            ),\n        ) -&gt; Response:\n            \"\"\"Display the model list page, allowing pagination, sorting, and searching.\"\"\"\n            if self._model_is_admin_model(self.model):\n                db = admin_db\n            else:\n                db = app_db\n\n            if template == \"admin/model/list.html\" and not request.url.path.endswith(\n                \"/\"\n            ):\n                redirect_url = request.url.path + \"/\"\n                if request.url.query:\n                    redirect_url += \"?\" + request.url.query\n                return RedirectResponse(redirect_url, status_code=307)\n\n            try:\n                page = max(1, int(request.query_params.get(\"page\", \"1\")))\n                rows_per_page = int(\n                    request.query_params.get(\"rows-per-page-select\", \"10\")\n                )\n            except ValueError:\n                page = 1\n                rows_per_page = 10\n\n            sort_column = request.query_params.get(\"sort_by\")\n            sort_order = request.query_params.get(\"sort_order\", \"asc\")\n\n            sort_columns = (\n                [sort_column] if sort_column and sort_column != \"None\" else None\n            )\n            sort_orders = [sort_order] if sort_order and sort_order != \"None\" else None\n\n            search_column = request.query_params.get(\"column-to-search\")\n            search_value = request.query_params.get(\"search-input\", \"\").strip()\n\n            filter_criteria: Dict[str, Any] = {}\n            if search_column and search_value:\n                column = self.model.__table__.columns.get(search_column)\n                if column is not None:\n                    python_type = column.type.python_type\n                    try:\n                        if python_type is int:\n                            filter_criteria[search_column] = int(search_value)\n                        elif python_type is float:\n                            filter_criteria[search_column] = float(search_value)\n                        elif python_type is bool:\n                            lower_search = search_value.lower()\n                            if lower_search in (\"true\", \"yes\", \"1\", \"t\", \"y\"):\n                                filter_criteria[search_column] = True\n                            elif lower_search in (\"false\", \"no\", \"0\", \"f\", \"n\"):\n                                filter_criteria[search_column] = False\n                        elif python_type is str:\n                            filter_criteria[f\"{search_column}__ilike\"] = (\n                                f\"%{search_value}%\"\n                            )\n                    except (ValueError, TypeError):\n                        pass\n\n            try:\n                total_items = await self.crud.count(db=db, **cast(Any, filter_criteria))\n                max_page = max(1, (total_items + rows_per_page - 1) // rows_per_page)\n                page = min(page, max_page)\n                offset = (page - 1) * rows_per_page\n\n                items_result = await self.crud.get_multi(\n                    db=db,\n                    offset=offset,\n                    limit=rows_per_page,\n                    sort_columns=sort_columns,\n                    sort_orders=sort_orders,\n                    **cast(Any, filter_criteria),\n                )\n\n                items: Dict[str, Any] = {\n                    \"data\": items_result.get(\"data\", []),\n                    \"total_count\": items_result.get(\"total_count\", 0),\n                }\n\n            except Exception:\n                items = {\"data\": [], \"total_count\": 0}\n                total_items = 0\n                page = 1\n\n            table_columns = [column.key for column in self.model.__table__.columns]\n            primary_key_info = self.db_config.get_primary_key_info(self.model)\n\n            context: Dict[str, Any] = {\n                \"request\": request,\n                \"model_items\": items[\"data\"],\n                \"model_name\": self.model_key,\n                \"table_columns\": table_columns,\n                \"total_items\": items[\"total_count\"],\n                \"current_page\": page,\n                \"rows_per_page\": rows_per_page,\n                \"selected_column\": search_column,\n                \"primary_key_info\": primary_key_info,\n                \"mount_path\": self.admin_site.mount_path if self.admin_site else \"\",\n                \"sort_column\": sort_column,\n                \"sort_order\": sort_order,\n                \"allowed_actions\": self.allowed_actions,\n            }\n\n            if \"HX-Request\" in request.headers:\n                return self.templates.TemplateResponse(\n                    \"admin/model/components/list_content.html\", context\n                )\n\n            if self.admin_site is not None:\n                base_context = await self.admin_site.get_base_context(\n                    admin_db=admin_db, app_db=app_db\n                )\n                context.update(base_context)\n                context[\"include_sidebar_and_header\"] = True\n\n            return self.templates.TemplateResponse(template, context)\n\n        return cast(EndpointCallable, get_model_admin_page_inner)\n\n    def get_model_create_page(\n        self, template: str = \"admin/model/create.html\"\n    ) -&gt; EndpointCallable:\n        \"\"\"\n        Create endpoint for displaying new record creation form.\n\n        Args:\n            template: Path to Jinja2 template for rendering create form\n\n        Returns:\n            FastAPI route handler for create form page\n\n        Example:\n            ```python\n            endpoint = view.get_model_create_page(\"admin/model/create.html\")\n            router.add_api_route(\"/create\", endpoint, methods=[\"GET\"])\n            ```\n        \"\"\"\n\n        async def model_create_page(request: Request) -&gt; Response:\n            \"\"\"Show a blank form for creating a new record.\"\"\"\n            form_fields = _get_form_fields_from_schema(self.create_schema)\n            mount_path = self.admin_site.mount_path if self.admin_site else \"\"\n            return self.templates.TemplateResponse(\n                template,\n                {\n                    \"request\": request,\n                    \"model_name\": self.model_key,\n                    \"form_fields\": form_fields,\n                    \"mount_path\": mount_path,\n                },\n            )\n\n        return cast(EndpointCallable, model_create_page)\n\n    def get_model_update_page(self, template: str) -&gt; EndpointCallable:\n        \"\"\"\n        Create endpoint for displaying record update form.\n\n        Args:\n            template: Path to Jinja2 template for rendering update form\n\n        Returns:\n            FastAPI route handler for update form page\n\n        Example:\n            ```python\n            endpoint = view.get_model_update_page(\"admin/model/update.html\")\n            router.add_api_route(\"/update/{id}\", endpoint, methods=[\"GET\"])\n            ```\n        \"\"\"\n\n        async def get_model_update_page_inner(\n            request: Request,\n            id: int,\n            db: AsyncSession = Depends(self.session),\n        ) -&gt; Response:\n            \"\"\"Show a form to update an existing record by `id`.\"\"\"\n            item = await self.crud.get(db=db, id=id)\n            if not item:\n                return JSONResponse(\n                    status_code=404, content={\"message\": f\"Item with id {id} not found\"}\n                )\n\n            form_fields = _get_form_fields_from_schema(self.update_schema)\n            for field in form_fields:\n                field_name = field[\"name\"]\n                if field_name in item:\n                    field[\"value\"] = item[field_name]\n\n            mount_path = self.admin_site.mount_path if self.admin_site else \"\"\n            return self.templates.TemplateResponse(\n                template,\n                {\n                    \"request\": request,\n                    \"model_name\": self.model_key,\n                    \"form_fields\": form_fields,\n                    \"mount_path\": mount_path,\n                    \"id\": id,\n                },\n            )\n\n        return cast(EndpointCallable, get_model_update_page_inner)\n\n    def form_update_endpoint(self) -&gt; EndpointCallable:\n        \"\"\"\n        Create endpoint for handling form submissions to update existing records.\n\n        Returns:\n            FastAPI route handler for update form submission\n\n        Notes:\n            - Uses @log_admin_action decorator for event tracking\n            - Only updates provided fields\n            - Handles password hashing for AdminUser model\n            - Supports automatic updated_at timestamp\n        \"\"\"\n\n        @log_admin_action(EventType.UPDATE, model=self.model)\n        async def form_update_endpoint_inner(\n            request: Request,\n            db: AsyncSession = Depends(self.session),\n            admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n            current_user: dict = Depends(\n                cast(Any, self.admin_site).admin_authentication.get_current_user()\n            ),\n            event_integration=Depends(lambda: self.event_integration),\n            id: Optional[int] = None,\n        ) -&gt; Response:\n            \"\"\"Handle POST form submission to update an existing record.\"\"\"\n            assert self.admin_site is not None\n\n            if id is None:\n                return JSONResponse(\n                    status_code=422, content={\"message\": \"No id parameter provided\"}\n                )\n\n            item = await self.crud.get(db=db, id=id)\n            if not item:\n                return JSONResponse(\n                    status_code=404, content={\"message\": f\"Item with id {id} not found\"}\n                )\n\n            form_fields = _get_form_fields_from_schema(self.update_schema)\n            error_message: Optional[str] = None\n            field_errors: Dict[str, str] = {}\n            field_values: Dict[str, Any] = {}\n\n            try:\n                form_data = await request.form()\n                update_data: Dict[str, Any] = {}\n                has_updates = False\n\n                for key, raw_val in form_data.items():\n                    if isinstance(raw_val, UploadFile):\n                        field_values[key] = raw_val\n                        update_data[key] = raw_val\n                        has_updates = True\n                    elif isinstance(raw_val, str):\n                        val_str = raw_val.strip()\n                        if val_str:\n                            update_data[key] = val_str\n                            field_values[key] = val_str\n                            has_updates = True\n\n                if not has_updates:\n                    error_message = \"No changes were provided for update\"\n                else:\n                    if self.update_internal_schema is not None and hasattr(\n                        self.update_internal_schema, \"__fields__\"\n                    ):\n                        fields_dict = cast(\n                            Dict[str, Any], self.update_internal_schema.__fields__\n                        )\n                        if \"updated_at\" in fields_dict:\n                            update_data[\"updated_at\"] = datetime.datetime.now(\n                                datetime.UTC\n                            )\n\n                    try:\n                        if self.model.__name__ == \"AdminUser\":\n                            if not self.user_service:\n                                raise ValueError(\"No user_service available.\")\n\n                            update_schema_instance = self.update_schema(**update_data)\n\n                            internal_update_data: Dict[str, Any] = {\n                                \"updated_at\": datetime.datetime.now(datetime.UTC)\n                            }\n                            username = getattr(update_schema_instance, \"username\", None)\n                            if username is not None:\n                                internal_update_data[\"username\"] = username\n\n                            password = getattr(update_schema_instance, \"password\", None)\n                            if password is not None:\n                                internal_update_data[\"hashed_password\"] = (\n                                    self.user_service.get_password_hash(password)\n                                )\n\n                            from ..admin_user.schemas import AdminUserUpdateInternal\n\n                            internal_update_schema = AdminUserUpdateInternal(\n                                **internal_update_data\n                            )\n                            await self.crud.update(\n                                db=db, id=id, object=internal_update_schema\n                            )\n                        else:\n                            update_schema_instance = self.update_schema(**update_data)\n                            await self.crud.update(\n                                db=db, id=id, object=update_schema_instance\n                            )\n\n                        return RedirectResponse(\n                            url=f\"/{self.admin_site.mount_path}/{self.model.__name__}/\",\n                            status_code=303,\n                        )\n\n                    except ValidationError as e:\n                        field_errors = {\n                            str(err[\"loc\"][0]): err[\"msg\"] for err in e.errors()\n                        }\n                        error_message = \"Please correct the errors below.\"\n                    except Exception as e:\n                        error_message = str(e)\n\n            except Exception as e:\n                error_message = str(e)\n\n            for field in form_fields:\n                field_name = field[\"name\"]\n                if field_name not in field_values and field_name in item:\n                    field_values[field_name] = item[field_name]\n\n            context: Dict[str, Any] = {\n                \"request\": request,\n                \"model_name\": self.model_key,\n                \"form_fields\": form_fields,\n                \"error\": error_message,\n                \"field_errors\": field_errors,\n                \"field_values\": field_values,\n                \"mount_path\": self.admin_site.mount_path,\n                \"id\": id,\n                \"include_sidebar_and_header\": False,\n            }\n\n            return self.templates.TemplateResponse(\n                \"admin/model/update.html\",\n                context,\n                status_code=400 if error_message else 200,\n            )\n\n        return cast(EndpointCallable, form_update_endpoint_inner)\n\n    def table_body_content(self) -&gt; EndpointCallable:\n        \"\"\"\n        Create endpoint for HTMX-powered table content updates.\n\n        Returns:\n            FastAPI route handler for table content partial\n\n        Query Parameters:\n            - page: Page number (default: 1)\n            - rows-per-page-select: Records per page (default: 10)\n            - column-to-search: Column to search in\n            - search: Search term\n\n        Example:\n            ```python\n            # HTMX request for filtered content\n            response = await client.get(\n                \"/table-content?page=2&amp;column-to-search=name&amp;search=test\",\n                headers={\"HX-Request\": \"true\"}\n            )\n            ```\n        \"\"\"\n\n        async def table_body_content_inner(\n            request: Request,\n            db: AsyncSession = Depends(self.session),\n        ) -&gt; Response:\n            \"\"\"Return HTMX partial for table content with pagination/search.\"\"\"\n            page_str = request.query_params.get(\"page\", \"1\")\n            limit_str = request.query_params.get(\"rows-per-page-select\", \"10\")\n\n            try:\n                page = int(page_str)\n                limit = int(limit_str)\n            except ValueError:\n                page = 1\n                limit = 10\n\n            offset = (page - 1) * limit\n            search_column = request.query_params.get(\"column-to-search\")\n            search_value = request.query_params.get(\"search\", \"\")\n\n            filter_criteria: Dict[str, Any] = {}\n            if search_column and search_value:\n                filter_criteria[f\"{search_column}__ilike\"] = f\"%{search_value}%\"\n\n            items_result = await self.crud.get_multi(\n                db=db, offset=offset, limit=limit, **cast(Any, filter_criteria)\n            )\n\n            items: Dict[str, Any] = {\n                \"data\": items_result.get(\"data\", []),\n                \"total_count\": items_result.get(\"total_count\", 0),\n            }\n\n            total_items = items[\"total_count\"]\n            total_pages = (total_items + limit - 1) // limit\n\n            return self.templates.TemplateResponse(\n                \"model/components/table_content.html\",\n                {\n                    \"request\": request,\n                    \"model_items\": items[\"data\"],\n                    \"current_page\": page,\n                    \"rows_per_page\": limit,\n                    \"total_items\": total_items,\n                    \"total_pages\": total_pages,\n                },\n            )\n\n        return cast(EndpointCallable, table_body_content_inner)\n</code></pre>"},{"location":"api/model_view/#crudadmin.admin_interface.model_view.ModelView.bulk_delete_endpoint","title":"<code>bulk_delete_endpoint()</code>","text":"<p>Create endpoint for bulk deletion of model records.</p> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for bulk delete operations</p> Features <ul> <li>Handles multiple record deletion in one request</li> <li>Supports different primary key types (int, str, float)</li> <li>Validates IDs before deletion</li> <li>Handles pagination after deletion</li> <li>Event logging integration</li> <li>Transaction management</li> </ul> Notes <ul> <li>Expects JSON payload with \"ids\" list</li> <li>Performs type conversion based on primary key type</li> <li>Maintains pagination state after deletion</li> <li>Rolls back transaction on error</li> </ul> Example <pre><code># Delete multiple records\nawait client.delete(\"/bulk-delete\", json={\"ids\": [1, 2, 3]})\n</code></pre> Response Formats <p>Success:     - Returns updated list content template     - Status: 200 OK</p> <p>Errors:     - 400: No IDs provided     - 422: Invalid ID format     - 400: Database error during deletion</p> Source code in <code>crudadmin/admin_interface/model_view.py</code> <pre><code>def bulk_delete_endpoint(self) -&gt; EndpointCallable:\n    \"\"\"\n    Create endpoint for bulk deletion of model records.\n\n    Returns:\n        FastAPI route handler for bulk delete operations\n\n    Features:\n        - Handles multiple record deletion in one request\n        - Supports different primary key types (int, str, float)\n        - Validates IDs before deletion\n        - Handles pagination after deletion\n        - Event logging integration\n        - Transaction management\n\n    Notes:\n        - Expects JSON payload with \"ids\" list\n        - Performs type conversion based on primary key type\n        - Maintains pagination state after deletion\n        - Rolls back transaction on error\n\n    Example:\n        ```python\n        # Delete multiple records\n        await client.delete(\"/bulk-delete\", json={\"ids\": [1, 2, 3]})\n        ```\n\n    Response Formats:\n        **Success:**\n            - Returns updated list content template\n            - Status: 200 OK\n\n        **Errors:**\n            - 400: No IDs provided\n            - 422: Invalid ID format\n            - 400: Database error during deletion\n    \"\"\"\n\n    @log_admin_action(EventType.DELETE, model=self.model)\n    async def bulk_delete_endpoint_inner(\n        request: Request,\n        db: AsyncSession = Depends(self.session),\n        admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n        current_user: dict = Depends(\n            cast(Any, self.admin_site).admin_authentication.get_current_user()\n        ),\n        event_integration=Depends(lambda: self.event_integration),\n    ) -&gt; Response:\n        \"\"\"Handle bulk deletion of model instances using JSON list of IDs.\"\"\"\n        assert self.admin_site is not None\n        try:\n            body = await request.json()\n\n            page_str = request.query_params.get(\"page\", \"1\")\n            rows_str = request.query_params.get(\"rows-per-page-select\", \"10\")\n            page = int(page_str)\n            rows_per_page = int(rows_str)\n\n            ids = body.get(\"ids\", [])\n            if not ids:\n                return JSONResponse(\n                    status_code=400,\n                    content={\n                        \"detail\": [{\"message\": \"No IDs provided for deletion\"}]\n                    },\n                )\n\n            inspector = inspect(self.model)\n            primary_key = inspector.primary_key[0]\n            pk_name = primary_key.name\n            pk_type = primary_key.type.python_type\n\n            valid_ids: List[Union[int, str, float]] = []\n            for id_value in ids:\n                try:\n                    if pk_type is int:\n                        valid_ids.append(int(id_value))\n                    elif pk_type is str:\n                        valid_ids.append(str(id_value))\n                    elif pk_type is float:\n                        valid_ids.append(float(id_value))\n                    else:\n                        valid_ids.append(id_value)\n                except (ValueError, TypeError):\n                    return JSONResponse(\n                        status_code=422,\n                        content={\n                            \"detail\": [{\"message\": f\"Invalid ID value: {id_value}\"}]\n                        },\n                    )\n\n            filter_criteria: Dict[str, List[Union[int, str, float]]] = {\n                f\"{pk_name}__in\": valid_ids\n            }\n            records_to_delete = await self.crud.get_multi(\n                db=db, limit=len(valid_ids), **cast(Any, filter_criteria)\n            )\n\n            request.state.deleted_records = records_to_delete.get(\"data\", [])\n\n            try:\n                for id_value in valid_ids:\n                    await self.crud.delete(\n                        db=db,\n                        db_row=None,\n                        commit=False,\n                        allow_multiple=False,\n                        **{pk_name: id_value},\n                    )\n                await db.commit()\n            except Exception as e:\n                await db.rollback()\n                return JSONResponse(\n                    status_code=400,\n                    content={\n                        \"detail\": [{\"message\": f\"Error during deletion: {str(e)}\"}]\n                    },\n                )\n\n            total_count = await self.crud.count(db=db)\n            max_page = (total_count + rows_per_page - 1) // rows_per_page\n            adjusted_page = min(page, max(1, max_page))\n\n            items_result = await self.crud.get_multi(\n                db=db,\n                offset=(adjusted_page - 1) * rows_per_page,\n                limit=rows_per_page,\n            )\n\n            items: Dict[str, Any] = {\n                \"data\": items_result.get(\"data\", []),\n                \"total_count\": items_result.get(\"total_count\", 0),\n            }\n\n            table_columns = [column.key for column in self.model.__table__.columns]\n            primary_key_info = self.db_config.get_primary_key_info(self.model)\n\n            context: Dict[str, Any] = {\n                \"request\": request,\n                \"model_items\": items[\"data\"],\n                \"model_name\": self.model_key,\n                \"table_columns\": table_columns,\n                \"total_items\": items[\"total_count\"],\n                \"current_page\": adjusted_page,\n                \"rows_per_page\": rows_per_page,\n                \"primary_key_info\": primary_key_info,\n                \"mount_path\": self.admin_site.mount_path,\n            }\n\n            return self.templates.TemplateResponse(\n                \"admin/model/components/list_content.html\", context\n            )\n\n        except ValueError as e:\n            return JSONResponse(\n                status_code=422, content={\"detail\": [{\"message\": str(e)}]}\n            )\n        except Exception as e:\n            return JSONResponse(\n                status_code=422,\n                content={\n                    \"detail\": [{\"message\": f\"Error processing request: {str(e)}\"}]\n                },\n            )\n\n    return cast(EndpointCallable, bulk_delete_endpoint_inner)\n</code></pre>"},{"location":"api/model_view/#crudadmin.admin_interface.model_view.ModelView.form_create_endpoint","title":"<code>form_create_endpoint(template)</code>","text":"<p>Create endpoint for handling form submissions to create new model records.</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str</code> <p>Path to Jinja2 template for rendering form</p> required <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for create form submission</p> Features <ul> <li>Form data validation using create_schema</li> <li>Special handling for AdminUser model</li> <li>File upload support</li> <li>Field error collection</li> <li>Event logging integration</li> <li>HTMX support for dynamic updates</li> </ul> Notes <ul> <li>Uses @log_admin_action decorator for event tracking</li> <li>Handles both single and multi-value form fields</li> <li>Supports password hashing for AdminUser model</li> </ul> Example <pre><code>endpoint = view.form_create_endpoint(\"admin/model/create.html\")\nrouter.add_api_route(\"/create\", endpoint, methods=[\"POST\"])\n</code></pre> Source code in <code>crudadmin/admin_interface/model_view.py</code> <pre><code>def form_create_endpoint(self, template: str) -&gt; EndpointCallable:\n    \"\"\"\n    Create endpoint for handling form submissions to create new model records.\n\n    Args:\n        template: Path to Jinja2 template for rendering form\n\n    Returns:\n        FastAPI route handler for create form submission\n\n    Features:\n        - Form data validation using create_schema\n        - Special handling for AdminUser model\n        - File upload support\n        - Field error collection\n        - Event logging integration\n        - HTMX support for dynamic updates\n\n    Notes:\n        - Uses @log_admin_action decorator for event tracking\n        - Handles both single and multi-value form fields\n        - Supports password hashing for AdminUser model\n\n    Example:\n        ```python\n        endpoint = view.form_create_endpoint(\"admin/model/create.html\")\n        router.add_api_route(\"/create\", endpoint, methods=[\"POST\"])\n        ```\n    \"\"\"\n\n    @log_admin_action(EventType.CREATE, model=self.model)\n    async def form_create_endpoint_inner(\n        request: Request,\n        db: AsyncSession = Depends(self.session),\n        admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n        current_user: dict = Depends(\n            cast(Any, self.admin_site).admin_authentication.get_current_user()\n        ),\n        event_integration=Depends(lambda: self.event_integration),\n    ) -&gt; Response:\n        \"\"\"Handle POST form submission to create a model record.\"\"\"\n        assert self.admin_site is not None\n\n        form_fields = _get_form_fields_from_schema(self.create_schema)\n        error_message: Optional[str] = None\n        field_errors: Dict[str, str] = {}\n        field_values: Dict[str, Any] = {}\n\n        try:\n            if request.method == \"POST\":\n                form_data_raw = await request.form()\n                form_data: Dict[str, Any] = {}\n\n                for field in form_fields:\n                    key = field[\"name\"]\n                    raw_value = form_data_raw.getlist(key)\n                    if len(raw_value) == 1:\n                        value = raw_value[0]\n                        form_data[key] = value if value else field.get(\"default\")\n                        field_values[key] = value\n                    elif len(raw_value) &gt; 1:\n                        form_data[key] = raw_value\n                        field_values[key] = raw_value\n                    else:\n                        form_data[key] = field.get(\"default\")\n\n                try:\n                    if self.model.__name__ == \"AdminUser\":\n                        if not self.user_service:\n                            raise ValueError(\"No user_service available.\")\n                        item_data = self.create_schema(**form_data)\n\n                        password = getattr(item_data, \"password\", None)\n                        if password is not None:\n                            hashed_password = self.user_service.get_password_hash(\n                                password\n                            )\n                        else:\n                            hashed_password = None\n\n                        username = getattr(item_data, \"username\", None)\n                        if username is None:\n                            raise ValueError(\"AdminUser requires a username.\")\n\n                        from ..admin_user.schemas import AdminUserCreateInternal\n\n                        internal_data = AdminUserCreateInternal(\n                            username=username,\n                            hashed_password=hashed_password or \"\",\n                        )\n                        result = await self.crud.create(db=db, object=internal_data)\n                    else:\n                        item_data = self.create_schema(**form_data)\n                        result = await self.crud.create(db=db, object=item_data)\n                        await db.commit()\n\n                    if result:\n                        request.state.crud_result = result\n                        if \"HX-Request\" in request.headers:\n                            return RedirectResponse(\n                                url=f\"/{self.admin_site.mount_path}/{self.model.__name__}/\",\n                                headers={\n                                    \"HX-Redirect\": f\"/{self.admin_site.mount_path}/{self.model.__name__}/\"\n                                },\n                            )\n                        return RedirectResponse(\n                            url=f\"/{self.admin_site.mount_path}/{self.model.__name__}/\",\n                            status_code=303,\n                        )\n\n                except ValidationError as e:\n                    field_errors = {\n                        str(err[\"loc\"][0]): err[\"msg\"] for err in e.errors()\n                    }\n                    error_message = \"Please correct the errors below.\"\n                except Exception as e:\n                    error_message = str(e)\n\n        except Exception as e:\n            error_message = str(e)\n\n        context = {\n            \"request\": request,\n            \"model_name\": self.model_key,\n            \"form_fields\": form_fields,\n            \"error\": error_message,\n            \"field_errors\": field_errors,\n            \"field_values\": field_values,\n            \"mount_path\": self.admin_site.mount_path,\n        }\n\n        return self.templates.TemplateResponse(\n            template, context, status_code=422 if error_message else 200\n        )\n\n    return cast(EndpointCallable, form_create_endpoint_inner)\n</code></pre>"},{"location":"api/model_view/#crudadmin.admin_interface.model_view.ModelView.form_update_endpoint","title":"<code>form_update_endpoint()</code>","text":"<p>Create endpoint for handling form submissions to update existing records.</p> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for update form submission</p> Notes <ul> <li>Uses @log_admin_action decorator for event tracking</li> <li>Only updates provided fields</li> <li>Handles password hashing for AdminUser model</li> <li>Supports automatic updated_at timestamp</li> </ul> Source code in <code>crudadmin/admin_interface/model_view.py</code> <pre><code>def form_update_endpoint(self) -&gt; EndpointCallable:\n    \"\"\"\n    Create endpoint for handling form submissions to update existing records.\n\n    Returns:\n        FastAPI route handler for update form submission\n\n    Notes:\n        - Uses @log_admin_action decorator for event tracking\n        - Only updates provided fields\n        - Handles password hashing for AdminUser model\n        - Supports automatic updated_at timestamp\n    \"\"\"\n\n    @log_admin_action(EventType.UPDATE, model=self.model)\n    async def form_update_endpoint_inner(\n        request: Request,\n        db: AsyncSession = Depends(self.session),\n        admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n        current_user: dict = Depends(\n            cast(Any, self.admin_site).admin_authentication.get_current_user()\n        ),\n        event_integration=Depends(lambda: self.event_integration),\n        id: Optional[int] = None,\n    ) -&gt; Response:\n        \"\"\"Handle POST form submission to update an existing record.\"\"\"\n        assert self.admin_site is not None\n\n        if id is None:\n            return JSONResponse(\n                status_code=422, content={\"message\": \"No id parameter provided\"}\n            )\n\n        item = await self.crud.get(db=db, id=id)\n        if not item:\n            return JSONResponse(\n                status_code=404, content={\"message\": f\"Item with id {id} not found\"}\n            )\n\n        form_fields = _get_form_fields_from_schema(self.update_schema)\n        error_message: Optional[str] = None\n        field_errors: Dict[str, str] = {}\n        field_values: Dict[str, Any] = {}\n\n        try:\n            form_data = await request.form()\n            update_data: Dict[str, Any] = {}\n            has_updates = False\n\n            for key, raw_val in form_data.items():\n                if isinstance(raw_val, UploadFile):\n                    field_values[key] = raw_val\n                    update_data[key] = raw_val\n                    has_updates = True\n                elif isinstance(raw_val, str):\n                    val_str = raw_val.strip()\n                    if val_str:\n                        update_data[key] = val_str\n                        field_values[key] = val_str\n                        has_updates = True\n\n            if not has_updates:\n                error_message = \"No changes were provided for update\"\n            else:\n                if self.update_internal_schema is not None and hasattr(\n                    self.update_internal_schema, \"__fields__\"\n                ):\n                    fields_dict = cast(\n                        Dict[str, Any], self.update_internal_schema.__fields__\n                    )\n                    if \"updated_at\" in fields_dict:\n                        update_data[\"updated_at\"] = datetime.datetime.now(\n                            datetime.UTC\n                        )\n\n                try:\n                    if self.model.__name__ == \"AdminUser\":\n                        if not self.user_service:\n                            raise ValueError(\"No user_service available.\")\n\n                        update_schema_instance = self.update_schema(**update_data)\n\n                        internal_update_data: Dict[str, Any] = {\n                            \"updated_at\": datetime.datetime.now(datetime.UTC)\n                        }\n                        username = getattr(update_schema_instance, \"username\", None)\n                        if username is not None:\n                            internal_update_data[\"username\"] = username\n\n                        password = getattr(update_schema_instance, \"password\", None)\n                        if password is not None:\n                            internal_update_data[\"hashed_password\"] = (\n                                self.user_service.get_password_hash(password)\n                            )\n\n                        from ..admin_user.schemas import AdminUserUpdateInternal\n\n                        internal_update_schema = AdminUserUpdateInternal(\n                            **internal_update_data\n                        )\n                        await self.crud.update(\n                            db=db, id=id, object=internal_update_schema\n                        )\n                    else:\n                        update_schema_instance = self.update_schema(**update_data)\n                        await self.crud.update(\n                            db=db, id=id, object=update_schema_instance\n                        )\n\n                    return RedirectResponse(\n                        url=f\"/{self.admin_site.mount_path}/{self.model.__name__}/\",\n                        status_code=303,\n                    )\n\n                except ValidationError as e:\n                    field_errors = {\n                        str(err[\"loc\"][0]): err[\"msg\"] for err in e.errors()\n                    }\n                    error_message = \"Please correct the errors below.\"\n                except Exception as e:\n                    error_message = str(e)\n\n        except Exception as e:\n            error_message = str(e)\n\n        for field in form_fields:\n            field_name = field[\"name\"]\n            if field_name not in field_values and field_name in item:\n                field_values[field_name] = item[field_name]\n\n        context: Dict[str, Any] = {\n            \"request\": request,\n            \"model_name\": self.model_key,\n            \"form_fields\": form_fields,\n            \"error\": error_message,\n            \"field_errors\": field_errors,\n            \"field_values\": field_values,\n            \"mount_path\": self.admin_site.mount_path,\n            \"id\": id,\n            \"include_sidebar_and_header\": False,\n        }\n\n        return self.templates.TemplateResponse(\n            \"admin/model/update.html\",\n            context,\n            status_code=400 if error_message else 200,\n        )\n\n    return cast(EndpointCallable, form_update_endpoint_inner)\n</code></pre>"},{"location":"api/model_view/#crudadmin.admin_interface.model_view.ModelView.get_model_admin_page","title":"<code>get_model_admin_page(template='admin/model/list.html')</code>","text":"<p>Create endpoint for model list view with filtering and pagination.</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str</code> <p>Path to Jinja2 template for rendering list view</p> <code>'admin/model/list.html'</code> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for model list page</p> Example <pre><code># Basic list view\nresponse = await client.get(\"/?page=1&amp;rows-per-page-select=25\")\n\n# Sorted and filtered\nresponse = await client.get(\n    \"/?sort_by=username&amp;sort_order=desc&amp;column-to-search=email&amp;search-input=example.com\"\n)\n</code></pre> Source code in <code>crudadmin/admin_interface/model_view.py</code> <pre><code>def get_model_admin_page(\n    self, template: str = \"admin/model/list.html\"\n) -&gt; EndpointCallable:\n    \"\"\"\n    Create endpoint for model list view with filtering and pagination.\n\n    Args:\n        template: Path to Jinja2 template for rendering list view\n\n    Returns:\n        FastAPI route handler for model list page\n\n    Example:\n        ```python\n        # Basic list view\n        response = await client.get(\"/?page=1&amp;rows-per-page-select=25\")\n\n        # Sorted and filtered\n        response = await client.get(\n            \"/?sort_by=username&amp;sort_order=desc&amp;column-to-search=email&amp;search-input=example.com\"\n        )\n        ```\n    \"\"\"\n\n    async def get_model_admin_page_inner(\n        request: Request,\n        admin_db: AsyncSession = Depends(self.db_config.get_admin_db),\n        app_db: AsyncSession = Depends(\n            cast(\n                Callable[..., AsyncGenerator[AsyncSession, None]],\n                self.db_config.get_app_session(),\n            )\n        ),\n    ) -&gt; Response:\n        \"\"\"Display the model list page, allowing pagination, sorting, and searching.\"\"\"\n        if self._model_is_admin_model(self.model):\n            db = admin_db\n        else:\n            db = app_db\n\n        if template == \"admin/model/list.html\" and not request.url.path.endswith(\n            \"/\"\n        ):\n            redirect_url = request.url.path + \"/\"\n            if request.url.query:\n                redirect_url += \"?\" + request.url.query\n            return RedirectResponse(redirect_url, status_code=307)\n\n        try:\n            page = max(1, int(request.query_params.get(\"page\", \"1\")))\n            rows_per_page = int(\n                request.query_params.get(\"rows-per-page-select\", \"10\")\n            )\n        except ValueError:\n            page = 1\n            rows_per_page = 10\n\n        sort_column = request.query_params.get(\"sort_by\")\n        sort_order = request.query_params.get(\"sort_order\", \"asc\")\n\n        sort_columns = (\n            [sort_column] if sort_column and sort_column != \"None\" else None\n        )\n        sort_orders = [sort_order] if sort_order and sort_order != \"None\" else None\n\n        search_column = request.query_params.get(\"column-to-search\")\n        search_value = request.query_params.get(\"search-input\", \"\").strip()\n\n        filter_criteria: Dict[str, Any] = {}\n        if search_column and search_value:\n            column = self.model.__table__.columns.get(search_column)\n            if column is not None:\n                python_type = column.type.python_type\n                try:\n                    if python_type is int:\n                        filter_criteria[search_column] = int(search_value)\n                    elif python_type is float:\n                        filter_criteria[search_column] = float(search_value)\n                    elif python_type is bool:\n                        lower_search = search_value.lower()\n                        if lower_search in (\"true\", \"yes\", \"1\", \"t\", \"y\"):\n                            filter_criteria[search_column] = True\n                        elif lower_search in (\"false\", \"no\", \"0\", \"f\", \"n\"):\n                            filter_criteria[search_column] = False\n                    elif python_type is str:\n                        filter_criteria[f\"{search_column}__ilike\"] = (\n                            f\"%{search_value}%\"\n                        )\n                except (ValueError, TypeError):\n                    pass\n\n        try:\n            total_items = await self.crud.count(db=db, **cast(Any, filter_criteria))\n            max_page = max(1, (total_items + rows_per_page - 1) // rows_per_page)\n            page = min(page, max_page)\n            offset = (page - 1) * rows_per_page\n\n            items_result = await self.crud.get_multi(\n                db=db,\n                offset=offset,\n                limit=rows_per_page,\n                sort_columns=sort_columns,\n                sort_orders=sort_orders,\n                **cast(Any, filter_criteria),\n            )\n\n            items: Dict[str, Any] = {\n                \"data\": items_result.get(\"data\", []),\n                \"total_count\": items_result.get(\"total_count\", 0),\n            }\n\n        except Exception:\n            items = {\"data\": [], \"total_count\": 0}\n            total_items = 0\n            page = 1\n\n        table_columns = [column.key for column in self.model.__table__.columns]\n        primary_key_info = self.db_config.get_primary_key_info(self.model)\n\n        context: Dict[str, Any] = {\n            \"request\": request,\n            \"model_items\": items[\"data\"],\n            \"model_name\": self.model_key,\n            \"table_columns\": table_columns,\n            \"total_items\": items[\"total_count\"],\n            \"current_page\": page,\n            \"rows_per_page\": rows_per_page,\n            \"selected_column\": search_column,\n            \"primary_key_info\": primary_key_info,\n            \"mount_path\": self.admin_site.mount_path if self.admin_site else \"\",\n            \"sort_column\": sort_column,\n            \"sort_order\": sort_order,\n            \"allowed_actions\": self.allowed_actions,\n        }\n\n        if \"HX-Request\" in request.headers:\n            return self.templates.TemplateResponse(\n                \"admin/model/components/list_content.html\", context\n            )\n\n        if self.admin_site is not None:\n            base_context = await self.admin_site.get_base_context(\n                admin_db=admin_db, app_db=app_db\n            )\n            context.update(base_context)\n            context[\"include_sidebar_and_header\"] = True\n\n        return self.templates.TemplateResponse(template, context)\n\n    return cast(EndpointCallable, get_model_admin_page_inner)\n</code></pre>"},{"location":"api/model_view/#crudadmin.admin_interface.model_view.ModelView.get_model_create_page","title":"<code>get_model_create_page(template='admin/model/create.html')</code>","text":"<p>Create endpoint for displaying new record creation form.</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str</code> <p>Path to Jinja2 template for rendering create form</p> <code>'admin/model/create.html'</code> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for create form page</p> Example <pre><code>endpoint = view.get_model_create_page(\"admin/model/create.html\")\nrouter.add_api_route(\"/create\", endpoint, methods=[\"GET\"])\n</code></pre> Source code in <code>crudadmin/admin_interface/model_view.py</code> <pre><code>def get_model_create_page(\n    self, template: str = \"admin/model/create.html\"\n) -&gt; EndpointCallable:\n    \"\"\"\n    Create endpoint for displaying new record creation form.\n\n    Args:\n        template: Path to Jinja2 template for rendering create form\n\n    Returns:\n        FastAPI route handler for create form page\n\n    Example:\n        ```python\n        endpoint = view.get_model_create_page(\"admin/model/create.html\")\n        router.add_api_route(\"/create\", endpoint, methods=[\"GET\"])\n        ```\n    \"\"\"\n\n    async def model_create_page(request: Request) -&gt; Response:\n        \"\"\"Show a blank form for creating a new record.\"\"\"\n        form_fields = _get_form_fields_from_schema(self.create_schema)\n        mount_path = self.admin_site.mount_path if self.admin_site else \"\"\n        return self.templates.TemplateResponse(\n            template,\n            {\n                \"request\": request,\n                \"model_name\": self.model_key,\n                \"form_fields\": form_fields,\n                \"mount_path\": mount_path,\n            },\n        )\n\n    return cast(EndpointCallable, model_create_page)\n</code></pre>"},{"location":"api/model_view/#crudadmin.admin_interface.model_view.ModelView.get_model_update_page","title":"<code>get_model_update_page(template)</code>","text":"<p>Create endpoint for displaying record update form.</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str</code> <p>Path to Jinja2 template for rendering update form</p> required <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for update form page</p> Example <pre><code>endpoint = view.get_model_update_page(\"admin/model/update.html\")\nrouter.add_api_route(\"/update/{id}\", endpoint, methods=[\"GET\"])\n</code></pre> Source code in <code>crudadmin/admin_interface/model_view.py</code> <pre><code>def get_model_update_page(self, template: str) -&gt; EndpointCallable:\n    \"\"\"\n    Create endpoint for displaying record update form.\n\n    Args:\n        template: Path to Jinja2 template for rendering update form\n\n    Returns:\n        FastAPI route handler for update form page\n\n    Example:\n        ```python\n        endpoint = view.get_model_update_page(\"admin/model/update.html\")\n        router.add_api_route(\"/update/{id}\", endpoint, methods=[\"GET\"])\n        ```\n    \"\"\"\n\n    async def get_model_update_page_inner(\n        request: Request,\n        id: int,\n        db: AsyncSession = Depends(self.session),\n    ) -&gt; Response:\n        \"\"\"Show a form to update an existing record by `id`.\"\"\"\n        item = await self.crud.get(db=db, id=id)\n        if not item:\n            return JSONResponse(\n                status_code=404, content={\"message\": f\"Item with id {id} not found\"}\n            )\n\n        form_fields = _get_form_fields_from_schema(self.update_schema)\n        for field in form_fields:\n            field_name = field[\"name\"]\n            if field_name in item:\n                field[\"value\"] = item[field_name]\n\n        mount_path = self.admin_site.mount_path if self.admin_site else \"\"\n        return self.templates.TemplateResponse(\n            template,\n            {\n                \"request\": request,\n                \"model_name\": self.model_key,\n                \"form_fields\": form_fields,\n                \"mount_path\": mount_path,\n                \"id\": id,\n            },\n        )\n\n    return cast(EndpointCallable, get_model_update_page_inner)\n</code></pre>"},{"location":"api/model_view/#crudadmin.admin_interface.model_view.ModelView.setup_routes","title":"<code>setup_routes()</code>","text":"<p>Configure FastAPI routes based on allowed actions.</p> <p>Sets up the following routes if allowed: - Create: /form_create (POST), /create_page (GET) - View: / (GET), /get_model_list (GET) - Delete: /bulk-delete (DELETE) - Update: /update/{id} (GET), /form_update/{id} (POST)</p> <p>Routes are configured based on the allowed_actions set provided during initialization. All routes use appropriate templates and include required dependencies.</p> Example <pre><code># Configure with specific actions\nview = ModelView(\n    allowed_actions={\"view\", \"create\", \"update\"},\n    ...\n)\nview.setup_routes()  # Only creates view/create/update routes\n</code></pre> Source code in <code>crudadmin/admin_interface/model_view.py</code> <pre><code>def setup_routes(self) -&gt; None:\n    \"\"\"\n    Configure FastAPI routes based on allowed actions.\n\n    Sets up the following routes if allowed:\n    - Create: /form_create (POST), /create_page (GET)\n    - View: / (GET), /get_model_list (GET)\n    - Delete: /bulk-delete (DELETE)\n    - Update: /update/{id} (GET), /form_update/{id} (POST)\n\n    Routes are configured based on the allowed_actions set provided during initialization.\n    All routes use appropriate templates and include required dependencies.\n\n    Example:\n        ```python\n        # Configure with specific actions\n        view = ModelView(\n            allowed_actions={\"view\", \"create\", \"update\"},\n            ...\n        )\n        view.setup_routes()  # Only creates view/create/update routes\n        ```\n    \"\"\"\n    if \"create\" in self.allowed_actions:\n        self.router.add_api_route(\n            \"/form_create\",\n            self.form_create_endpoint(template=\"admin/model/create.html\"),\n            methods=[\"POST\"],\n            include_in_schema=False,\n            response_model=None,\n        )\n        self.router.add_api_route(\n            \"/create_page\",\n            self.get_model_create_page(template=\"admin/model/create.html\"),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            response_model=None,\n        )\n\n    if \"view\" in self.allowed_actions:\n        self.router.add_api_route(\n            \"/\",\n            self.get_model_admin_page(),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            response_model=None,\n        )\n        self.router.add_api_route(\n            \"/get_model_list\",\n            self.get_model_admin_page(\n                template=\"admin/model/components/list_content.html\"\n            ),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            response_model=None,\n        )\n\n    if \"delete\" in self.allowed_actions:\n        self.router.add_api_route(\n            \"/bulk-delete\",\n            self.bulk_delete_endpoint(),\n            methods=[\"DELETE\"],\n            include_in_schema=False,\n            response_model=None,\n        )\n\n    if \"update\" in self.allowed_actions:\n        self.router.add_api_route(\n            \"/update/{id}\",\n            self.get_model_update_page(template=\"admin/model/update.html\"),\n            methods=[\"GET\"],\n            include_in_schema=False,\n            response_model=None,\n        )\n        self.router.add_api_route(\n            \"/form_update/{id}\",\n            self.form_update_endpoint(),\n            methods=[\"POST\"],\n            include_in_schema=False,\n            response_model=None,\n        )\n</code></pre>"},{"location":"api/model_view/#crudadmin.admin_interface.model_view.ModelView.table_body_content","title":"<code>table_body_content()</code>","text":"<p>Create endpoint for HTMX-powered table content updates.</p> <p>Returns:</p> Type Description <code>EndpointCallable</code> <p>FastAPI route handler for table content partial</p> Query Parameters <ul> <li>page: Page number (default: 1)</li> <li>rows-per-page-select: Records per page (default: 10)</li> <li>column-to-search: Column to search in</li> <li>search: Search term</li> </ul> Example <pre><code># HTMX request for filtered content\nresponse = await client.get(\n    \"/table-content?page=2&amp;column-to-search=name&amp;search=test\",\n    headers={\"HX-Request\": \"true\"}\n)\n</code></pre> Source code in <code>crudadmin/admin_interface/model_view.py</code> <pre><code>def table_body_content(self) -&gt; EndpointCallable:\n    \"\"\"\n    Create endpoint for HTMX-powered table content updates.\n\n    Returns:\n        FastAPI route handler for table content partial\n\n    Query Parameters:\n        - page: Page number (default: 1)\n        - rows-per-page-select: Records per page (default: 10)\n        - column-to-search: Column to search in\n        - search: Search term\n\n    Example:\n        ```python\n        # HTMX request for filtered content\n        response = await client.get(\n            \"/table-content?page=2&amp;column-to-search=name&amp;search=test\",\n            headers={\"HX-Request\": \"true\"}\n        )\n        ```\n    \"\"\"\n\n    async def table_body_content_inner(\n        request: Request,\n        db: AsyncSession = Depends(self.session),\n    ) -&gt; Response:\n        \"\"\"Return HTMX partial for table content with pagination/search.\"\"\"\n        page_str = request.query_params.get(\"page\", \"1\")\n        limit_str = request.query_params.get(\"rows-per-page-select\", \"10\")\n\n        try:\n            page = int(page_str)\n            limit = int(limit_str)\n        except ValueError:\n            page = 1\n            limit = 10\n\n        offset = (page - 1) * limit\n        search_column = request.query_params.get(\"column-to-search\")\n        search_value = request.query_params.get(\"search\", \"\")\n\n        filter_criteria: Dict[str, Any] = {}\n        if search_column and search_value:\n            filter_criteria[f\"{search_column}__ilike\"] = f\"%{search_value}%\"\n\n        items_result = await self.crud.get_multi(\n            db=db, offset=offset, limit=limit, **cast(Any, filter_criteria)\n        )\n\n        items: Dict[str, Any] = {\n            \"data\": items_result.get(\"data\", []),\n            \"total_count\": items_result.get(\"total_count\", 0),\n        }\n\n        total_items = items[\"total_count\"]\n        total_pages = (total_items + limit - 1) // limit\n\n        return self.templates.TemplateResponse(\n            \"model/components/table_content.html\",\n            {\n                \"request\": request,\n                \"model_items\": items[\"data\"],\n                \"current_page\": page,\n                \"rows_per_page\": limit,\n                \"total_items\": total_items,\n                \"total_pages\": total_pages,\n            },\n        )\n\n    return cast(EndpointCallable, table_body_content_inner)\n</code></pre>"},{"location":"community/CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"community/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"community/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"community/CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"community/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"community/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at igor.magalhaes.r@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"community/CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"community/CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"community/CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"community/CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"community/CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"community/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"community/CONTRIBUTING/","title":"Contributing to CRUDAdmin","text":"<p>Thank you for your interest in contributing to CRUDAdmin! This guide is meant to make it easy for you to get started.</p>"},{"location":"community/CONTRIBUTING/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":""},{"location":"community/CONTRIBUTING/#cloning-the-repository","title":"Cloning the Repository","text":"<p>Start by forking and cloning the CRUDAdmin repository:</p> <pre><code>git clone https://github.com/igorbenav/crudadmin.git\n</code></pre>"},{"location":"community/CONTRIBUTING/#using-uv-for-dependency-management","title":"Using UV for Dependency Management","text":"<p>CRUDAdmin uses UV for managing dependencies. If you don't have UV installed, follow the instructions on the official UV website.</p> <p>Once UV is installed, navigate to the cloned repository.</p>"},{"location":"community/CONTRIBUTING/#activating-the-virtual-environment","title":"Activating the Virtual Environment","text":"<p>UV can a virtual environment for your project. Activate it using:</p> <pre><code>uv venv\n</code></pre> <p>Then</p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"community/CONTRIBUTING/#making-contributions","title":"Making Contributions","text":""},{"location":"community/CONTRIBUTING/#coding-standards","title":"Coding Standards","text":"<ul> <li>Follow PEP 8 guidelines.</li> <li>Write meaningful tests for new features or bug fixes.</li> </ul>"},{"location":"community/CONTRIBUTING/#testing-with-pytest","title":"Testing with Pytest","text":"<p>CRUDAdmin uses pytest for testing. Run tests using: <pre><code>uv run pytest\n</code></pre></p>"},{"location":"community/CONTRIBUTING/#linting","title":"Linting","text":"<p>Use mypy for type checking: <pre><code>uv run mypy crudadmin\n</code></pre></p> <p>Use ruff for style: <pre><code>uv run ruff check --fix\nuv run ruff format\n</code></pre></p> <p>Ensure your code passes linting before submitting.</p>"},{"location":"community/CONTRIBUTING/#submitting-your-contributions","title":"Submitting Your Contributions","text":""},{"location":"community/CONTRIBUTING/#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>After making your changes:</p> <ul> <li>Push your changes to your fork.</li> <li>Open a pull request with a clear description of your changes.</li> <li>Update the README.md if necessary.</li> </ul>"},{"location":"community/CONTRIBUTING/#code-reviews","title":"Code Reviews","text":"<ul> <li>Address any feedback from code reviews.</li> <li>Once approved, your contributions will be merged into the main branch.</li> </ul>"},{"location":"community/CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please adhere to our Code of Conduct to maintain a welcoming and inclusive environment.</p> <p>Thank you for contributing to CRUDAdmin\ud83d\ude80</p>"},{"location":"community/LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Igor Benav</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"community/overview/","title":"Community Overview","text":"<p>Welcome to the project's community hub. Here, you'll find essential resources and guidelines that are crucial for contributing to and participating in the project. Please take the time to familiarize yourself with the following documents:</p>"},{"location":"community/overview/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Contributing</li> <li>Code of Conduct</li> <li>License</li> </ul>"},{"location":"community/overview/#contributing","title":"Contributing","text":"<p>View the Contributing Guidelines</p> <p>Interested in contributing to the project? Great! The contributing guidelines will provide you with all the information you need to get started. This includes how to submit issues, propose changes, and the process for submitting pull requests.</p>"},{"location":"community/overview/#code-of-conduct","title":"Code of Conduct","text":"<p>View the Code of Conduct</p> <p>The Code of Conduct outlines the standards and behaviors expected of our community members. It's crucial to ensure a welcoming and inclusive environment for everyone. Please take the time to read and adhere to these guidelines.</p>"},{"location":"community/overview/#license","title":"License","text":"<p>View the License</p> <p>The license document outlines the terms under which our project can be used, modified, and distributed. Understanding the licensing is important for both users and contributors of the project.</p> <p>Thank you for being a part of our community and for contributing to our project's success!</p>"},{"location":"usage/admin/","title":"Admin","text":"<p>BEGIN RAW</p>"},{"location":"usage/admin/#building-admin-interfaces-with-crudadmin","title":"Building Admin Interfaces with CRUDAdmin","text":"<p>CRUDAdmin helps you create powerful admin interfaces for your FastAPI applications with minimal effort. Built on top of FastCRUD and SQLAlchemy, it supports any database that these libraries work with, including PostgreSQL, MySQL, SQLite, Oracle, and Microsoft SQL Server.</p>"},{"location":"usage/admin/#understanding-crudadmin","title":"Understanding CRUDAdmin","text":"<p>At its core, CRUDAdmin creates a web-based admin interface for your SQLAlchemy models. It handles all the complexities of:</p> <ul> <li>User authentication and session management</li> <li>Model operations (Create, Read, Update, Delete) through FastCRUD</li> <li>Security features like IP restrictions and HTTPS enforcement</li> <li>Event logging and audit trails</li> <li>Health monitoring</li> </ul> <p>Note</p> <p>Since CRUDAdmin uses FastCRUD with SQLAlchemy, you can use it with any database that SQLAlchemy supports. Just make sure you have the appropriate database driver installed.</p>"},{"location":"usage/admin/#getting-started","title":"Getting Started","text":""},{"location":"usage/admin/#setting-up-your-first-admin-interface","title":"Setting Up Your First Admin Interface","text":"<p>The first step is creating a basic admin interface. You'll need a database connection and at least one model to manage. Here's a simple example:</p> <pre><code>from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy import Column, Integer, String\nimport os\n\n# First, set up your database models\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)  \n    username = Column(String, unique=True)\n    email = Column(String)\n    role = Column(String)\n\n# Create your database connection\nengine = create_async_engine(\"sqlite+aiosqlite:///app.db\")\nsession = AsyncSession(engine)\n\n# Generate a secure secret key\nSECRET_KEY = os.environ.get(\"ADMIN_SECRET_KEY\") or os.urandom(32).hex()\n\n# Create your admin interface\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    initial_admin={\n        \"username\": \"admin\",\n        \"password\": \"secure_pass123\"  \n    }\n)\n</code></pre> <p>This code sets up a basic admin interface with SQLite storage and creates an initial admin user.</p>"},{"location":"usage/admin/#mounting-and-initializing-the-admin-interface","title":"Mounting and Initializing the Admin Interface","text":"<p>Unlike many FastAPI components, CRUDAdmin requires an initialization step before your application starts serving requests. This ensures all internal tables (for admin users, sessions, event logs, etc.) are created, and that the initial admin user is set up if needed.</p>"},{"location":"usage/admin/#1-using-fastapis-lifespan","title":"1. Using FastAPI's Lifespan","text":"<p>A recommended approach is using FastAPI's lifespan feature to handle both database table creation and admin initialization:</p> <pre><code>from contextlib import asynccontextmanager\nfrom fastapi import FastAPI\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # 1. Create database tables for your models if they don't exist\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # 2. Initialize the admin interface (creates internal admin tables, initial admin user, etc.)\n    await admin.initialize()\n\n    # Your other startup logic, if any\n    yield\n    # Cleanup logic, if any\n\n# Create FastAPI app with lifespan\napp = FastAPI(lifespan=lifespan)\n\n# Mount the admin interface at \"/admin\"\napp.mount(\"/admin\", admin.app)\n</code></pre> <p>With this configuration:</p> <ol> <li>Your SQLAlchemy models are created (if they don't already exist).  </li> <li><code>admin.initialize()</code> sets up all internal CRUDAdmin tables and ensures an initial admin user is present.  </li> <li>The admin interface is accessible at <code>/admin</code> once the app is running.</li> </ol> <p>Note</p> <ul> <li>If your project uses database migrations (e.g., Alembic), you can rely on those for table creation. However, it's still necessary to call <code>admin.initialize()</code> so CRUDAdmin can create its own internal tables and apply any needed logic.  </li> <li>The <code>initial_admin</code> user is only created if no admin user currently exists. If you remove <code>initial_admin</code> from your code, no default admin user will be created.</li> </ul>"},{"location":"usage/admin/#2-manual-initialization-if-needed","title":"2. Manual Initialization (If Needed)","text":"<p>If you prefer a manual initialization approach (for instance, in scripts or tests), you can do something like:</p> <pre><code>async def startup():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n    await admin.initialize()\n\n# Then call startup() before running your FastAPI application\nawait startup()\n</code></pre>"},{"location":"usage/admin/#database-configuration","title":"Database Configuration","text":"<p>You can use any supported database, but CRUDAdmin uses SQLite by default. You can configure this separately from your main application database:</p> <pre><code># Using PostgreSQL for admin data\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    admin_db_url=\"postgresql+asyncpg://user:pass@localhost/admin\"\n)\n\n# Or using custom SQLite\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    admin_db_path=\"./custom_admin.db\"\n)\n</code></pre> <p>The admin database stores:</p> <ul> <li>User accounts and credentials</li> <li>Session information and tracking</li> <li>Event logs and audit trails (if enabled)</li> <li>System health metrics</li> </ul>"},{"location":"usage/admin/#adding-models-to-the-admin-interface","title":"Adding Models to the Admin Interface","text":"<p>For each model you want to manage through the admin interface, you need to define Pydantic schemas that specify how the data should be validated. Let's look at a practical example:</p> <pre><code>from pydantic import BaseModel, Field, validator\nfrom decimal import Decimal\nfrom datetime import datetime\nfrom typing import Optional\n\n# First, define your SQLAlchemy model\nclass Product(Base):\n    __tablename__ = \"products\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n    price = Column(Decimal, nullable=False)\n    description = Column(String)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n# Then create schemas for creating and updating products\nclass ProductCreate(BaseModel):\n    name: str = Field(..., min_length=2, max_length=100)\n    price: Decimal = Field(..., gt=0)\n    description: Optional[str] = Field(None, max_length=500)\n\n    @validator(\"price\")\n    def validate_price(cls, v):\n        if v &gt; 1000000:\n            raise ValueError(\"Price cannot exceed 1,000,000\")\n        return v\n\nclass ProductUpdate(BaseModel):\n    name: Optional[str] = Field(None, min_length=2, max_length=100)\n    price: Optional[Decimal] = Field(None, gt=0)\n    description: Optional[str] = None\n\n# Add the model to your admin interface\nadmin.add_view(\n    model=Product,\n    create_schema=ProductCreate,\n    update_schema=ProductUpdate,\n    update_internal_schema=None,\n    delete_schema=None,\n    allowed_actions={\"view\", \"create\", \"update\"}  # Disable deletion if needed\n)\n</code></pre> <p>The schemas define validation rules and field constraints, ensuring that data entered through the admin interface is valid. The <code>allowed_actions</code> parameter lets you control which operations are available for each model.</p>"},{"location":"usage/admin/#security-features","title":"Security Features","text":""},{"location":"usage/admin/#authentication-and-session-management","title":"Authentication and Session Management","text":"<p>CRUDAdmin implements server-side sessions for robust and secure authentication.</p> <p>Note</p> <p>Server-side sessions provide excellent security for admin interfaces, allowing for immediate session invalidation and detailed control over active users.</p> <p>Here's a detailed configuration:</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY, # Still needed for signing session cookies\n    # Session management\n    max_sessions_per_user=5,          # Limit concurrent sessions\n    session_timeout_minutes=30,       # Session inactivity timeout\n    cleanup_interval_minutes=15,      # How often to remove expired sessions\n    # Enable secure cookies and HTTPS for production\n    secure_cookies=True,\n    enforce_https=True,\n)\n</code></pre> <p>This configuration creates a secure authentication system where:</p> <ul> <li>Server-side sessions provide stateful, secure authentication:</li> <li>Sessions are stored in the admin database.</li> <li>Can be invalidated immediately if needed (e.g., on logout or if a security issue is detected).</li> <li>Limited to 5 concurrent sessions per user (<code>max_sessions_per_user</code>).</li> <li>Sessions expire after 30 minutes of inactivity (<code>session_timeout_minutes</code>).</li> <li> <p>Expired sessions are cleaned up every 15 minutes (<code>cleanup_interval_minutes</code>).</p> </li> <li> <p>Additional security features:</p> </li> <li>Secure cookies for HTTPS-only transmission of the session ID.</li> <li>Session tracking and monitoring available through the admin interface.</li> <li>Failed login attempt tracking (if event logging is enabled).</li> </ul> <p>Tip</p> <p>Configure shorter session timeouts (<code>session_timeout_minutes</code>) for sensitive admin interfaces.</p> <p>Warning</p> <p>Ensure <code>session_manager.cleanup_expired_sessions()</code> is called periodically (handled internally by CRUDAdmin's middleware) to prevent session table bloat.</p>"},{"location":"usage/admin/#ip-restrictions-and-https","title":"IP Restrictions and HTTPS","text":"<p>For production environments, you can restrict access to specific IP addresses and enforce HTTPS:</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    # Restrict access to specific IPs or networks\n    allowed_ips=[\"10.0.0.1\", \"10.0.0.2\"],\n    allowed_networks=[\"192.168.1.0/24\"],\n    # Force HTTPS\n    enforce_https=True,\n    https_port=443\n)\n</code></pre> <p>This is particularly useful when your admin interface needs to be accessible only from specific locations, like your office network or VPN.</p>"},{"location":"usage/admin/#event-tracking-and-audit-logs","title":"Event Tracking and Audit Logs","text":"<p>Event tracking provides detailed information about system usage and changes. Enable it like this:</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    track_events=True  # Enable event tracking\n)\n</code></pre> <p>When enabled, CRUDAdmin automatically logs:</p> <ul> <li>All login attempts (successful and failed)</li> <li>CRUD operations on models (who changed what and when)</li> <li>System health status changes</li> <li>Security-related events</li> <li>Session management events</li> </ul> <p>Each event includes:</p> <ul> <li>Timestamp with timezone</li> <li>User who performed the action</li> <li>IP address of the request</li> <li>Type of action</li> <li>Success/failure status</li> <li>Detailed information about changes</li> <li>Related resource information</li> </ul> <p>You can view these logs through the built-in event log interface at <code>/admin/management/events</code>, which provides:</p> <ul> <li>Filtering by event type, user, date range, and status</li> <li>Detailed view of each event</li> <li>Export capabilities for further analysis</li> </ul>"},{"location":"usage/admin/#health-monitoring","title":"Health Monitoring","text":"<p>CRUDAdmin includes a health monitoring dashboard that helps you keep track of your system's status. Access it at <code>/admin/management/health</code> to see:</p>"},{"location":"usage/admin/#system-status-checks","title":"System Status Checks","text":"<ul> <li>Database connectivity and response times</li> <li>Session management status</li> <li>Recent errors or issues</li> </ul> <p>The health monitoring system runs regular checks and provides real-time status updates, making it easier to identify and troubleshoot issues before they become problems.</p>"},{"location":"usage/admin/#best-practices","title":"Best Practices","text":""},{"location":"usage/admin/#1-secret-management","title":"1. Secret Management","text":"<p>Proper secret key management is crucial for the security of your admin interface. CRUDAdmin uses this key for signing session cookies.</p> <p>Key Generation</p> <pre><code># Option 1: Using Python's secrets module (Recommended)\nimport secrets\nSECRET_KEY = secrets.token_urlsafe(32)\n\n# Option 2: Using OpenSSL (from command line)\n# $ openssl rand -base64 32\n\n# Option 3: Using /dev/urandom on Unix systems\n# $ head -c 32 /dev/urandom | base64\n</code></pre> <p>Environment-Based Configuration</p> <p>Warning</p> <p>Never commit your <code>.env</code> file to version control. Always add it to your <code>.gitignore</code> file.</p> <p>Tip</p> <p>Use Starlette's <code>Secret</code> type for sensitive values like passwords and API keys. This prevents accidental exposure through string representation.</p> <pre><code>from starlette.config import Config\nfrom starlette.datastructures import Secret, CommaSeparatedStrings\n\n# Config will be read from environment variables and/or \".env\" files\nconfig = Config(\".env\")\n\n# Load configuration with type casting\nDEBUG = config('DEBUG', cast=bool, default=False)\nSECRET_KEY = config('SECRET_KEY', cast=Secret)\nALLOWED_IPS = config('ALLOWED_IPS', cast=CommaSeparatedStrings, default='')\nALLOWED_NETWORKS = config('ALLOWED_NETWORKS', cast=CommaSeparatedStrings, default='')\n\n# Development configuration\nif not DEBUG:\n    admin = CRUDAdmin(\n        session=session,\n        SECRET_KEY=str(SECRET_KEY),  # Convert Secret to string\n        secure_cookies=True,\n        enforce_https=True,\n        allowed_ips=list(ALLOWED_IPS),\n        allowed_networks=list(ALLOWED_NETWORKS)\n    )\n# Production configuration\nelse:\n    admin = CRUDAdmin(\n        session=session,\n        SECRET_KEY=str(SECRET_KEY),\n        secure_cookies=False  # For local development\n    )\n</code></pre> <p>Note</p> <p>The <code>SECRET_KEY</code> should be at least 32 bytes long for secure cookie signing. Use a cryptographically secure method to generate it.</p> <p>Danger</p> <p>Running without HTTPS in production is extremely dangerous. Only disable <code>secure_cookies</code> and <code>enforce_https</code> in development environments.</p> <p>Key Storage Best Practices</p> <ul> <li>Store keys in environment variables or secure key management systems</li> <li>Keep different keys for development, staging, and production</li> <li>Rotate keys periodically</li> <li>Never commit keys to version control</li> <li>Use appropriate file permissions for any files containing keys</li> </ul>"},{"location":"usage/admin/#2-authentication-settings","title":"2. Authentication Settings","text":"<p>Configure authentication to balance security and user experience.</p> <p>Session Management Configuration</p> <p>Warning</p> <p>Keep session timeout values appropriate for your security needs. Shorter timeouts provide better security but may impact user experience.</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    # Session management settings\n    max_sessions_per_user=5,          # Limit concurrent sessions\n    session_timeout_minutes=30,       # Session inactivity timeout\n    cleanup_interval_minutes=15,      # How often to remove expired sessions\n\n    # Security settings\n    secure_cookies=True,              # Enable secure cookie flags\n    enforce_https=True,               # Force HTTPS in production\n)\n</code></pre> <p>Production Security Settings</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    # Enable secure cookies\n    secure_cookies=True,\n\n    # Force HTTPS\n    enforce_https=True,\n    https_port=443,\n\n    # Restrict access to specific IPs\n    allowed_ips=[\"10.0.0.1\", \"10.0.0.2\"],\n    allowed_networks=[\"192.168.1.0/24\"]\n)\n</code></pre>"},{"location":"usage/admin/#3-network-security","title":"3. Network Security","text":"<p>Implement multiple layers of security to protect your admin interface.</p> <p>IP Restrictions</p> <p>Tip</p> <p>Use CIDR notation for network ranges to make IP restrictions more manageable. For example, <code>10.0.0.0/24</code> covers all IPs from <code>10.0.0.0</code> to <code>10.0.0.255</code>.</p> <p>Warning</p> <p>IP restrictions should not be your only security measure. Always use them in combination with proper authentication and HTTPS.</p> <pre><code># Restrict access to office network and VPN\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    allowed_ips=[\n        \"10.0.0.1\",     # Office gateway\n        \"10.0.0.2\"      # VPN server\n    ],\n    allowed_networks=[\n        \"192.168.1.0/24\",   # Office network\n        \"10.8.0.0/24\"       # VPN network\n    ]\n)\n</code></pre> <p>HTTPS Configuration</p> <ul> <li>Always enable HTTPS in production</li> <li>Use valid SSL certificates (not self-signed)</li> <li>Configure proper HTTP to HTTPS redirects</li> <li>Set appropriate security headers</li> </ul> <p>Access Control</p> <p>Warning</p> <p>Always use the principle of least privilege when setting <code>allowed_actions</code>. Only grant the minimum permissions necessary for each model.</p> <p>Danger</p> <p>Be especially careful with delete permissions. Consider using soft deletes where possible by adding an <code>is_deleted</code> flag to your models.</p> <pre><code># Limit model access based on roles\nadmin.add_view(\n    model=User,\n    create_schema=UserCreate,\n    update_schema=UserUpdate,\n    # Only allow viewing and updating users\n    allowed_actions={\"view\", \"update\"}\n)\n\nadmin.add_view(\n    model=AuditLog,\n    create_schema=AuditLogSchema,\n    update_schema=AuditLogSchema,\n    # Read-only access to audit logs\n    allowed_actions={\"view\"}\n)\n</code></pre>"},{"location":"usage/admin/#4-monitoring-and-audit","title":"4. Monitoring and Audit","text":"<p>Set up comprehensive monitoring to detect and respond to issues quickly.</p> <p>Event Tracking Setup</p> <p>Note</p> <p>Event tracking has a small performance impact. For high-traffic applications, consider using a separate database for event storage.</p> <p>Tip</p> <p>Set up log rotation or archival policies to manage the size of your event logs over time.</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    # Enable comprehensive event tracking\n    track_events=True,\n\n    # Store events in a separate database\n    admin_db_url=\"postgresql+asyncpg://user:pass@localhost/admin_logs\"\n)\n</code></pre> <p>Health Monitoring</p> <p>The health dashboard at <code>/admin/management/health</code> provides real-time information about:</p> <ul> <li>Database connectivity and performance</li> <li>Session management status</li> <li>Authentication service status</li> <li>System resources</li> </ul> <p>Example Health Check Response:</p> <pre><code>{\n    \"database\": {\n        \"status\": \"healthy\",\n        \"latency_ms\": 5.23,\n        \"active_connections\": 12\n    },\n    \"session_management\": {\n        \"status\": \"healthy\",\n        \"active_sessions\": 8,\n        \"cleanup_status\": \"ok\"\n    }\n}\n</code></pre> <p>Event Log Monitoring</p> <p>The event log interface at <code>/admin/management/events</code> lets you:</p> <ol> <li> <p>Filter events by:</p> <ul> <li>Event type (login, create, update, delete)</li> <li>Status (success, failure)</li> <li>User</li> <li>Date range</li> </ul> </li> <li> <p>View detailed information about each event:</p> <ul> <li>Timestamp</li> <li>User who performed the action</li> <li>IP address</li> <li>Action details</li> <li>Success/failure status</li> <li>Related resource information</li> </ul> </li> <li> <p>Export events for further analysis or archival</p> </li> </ol> <p>Regularly review these logs for:</p> <ul> <li>Failed login attempts from unexpected locations</li> <li>Unusual patterns of database operations</li> <li>System health issues</li> <li>Security-related events</li> </ul> <p>By following these practices and understanding CRUDAdmin's features, you can create secure, maintainable admin interfaces that make managing your application's data easier and safer.</p>"},{"location":"usage/getting_started/","title":"Getting Started with CRUDAdmin","text":"<p>Welcome to CRUDAdmin! This guide will walk you through creating your first admin interface for a FastAPI application. We'll start with the basics and gradually add more functionality as you become comfortable with the core concepts.</p>"},{"location":"usage/getting_started/#what-is-crudadmin","title":"What is CRUDAdmin?","text":"<p>CRUDAdmin is a tool that creates web-based admin interfaces for FastAPI applications. If you've used Django's admin interface, you'll find CRUDAdmin familiar - it provides similar functionality but is built specifically for FastAPI and SQLAlchemy with FastCRUD.</p> <p>Think of CRUDAdmin as your application's control center. It automatically creates a professional admin interface where you can:</p> <ul> <li>Manage your application's data through a clean web interface</li> <li>Handle user authentication and permissions</li> <li>Monitor your application's health</li> <li>Track changes and maintain audit logs</li> </ul> <p>The best part? You can set this up in minutes rather than building it from scratch.</p>"},{"location":"usage/getting_started/#your-first-admin-interface","title":"Your First Admin Interface","text":"<p>Let's create a simple admin interface for managing users. We'll build this step by step:</p>"},{"location":"usage/getting_started/#step-1-setting-up-your-database-models","title":"Step 1: Setting Up Your Database Models","text":"<p>First, we need to define what data we want to manage. Let's create a basic User model:</p> <pre><code>from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy import Column, Integer, String\nimport os\n\n# Create the base class for our models\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)  \n    username = Column(String, unique=True)\n    email = Column(String)\n    role = Column(String)\n</code></pre> <p>This model represents a simple user table in our database. Each user has an ID, username, email, and role. The <code>unique=True</code> parameter ensures no two users can have the same username.</p>"},{"location":"usage/getting_started/#step-2-creating-the-database-connection","title":"Step 2: Creating the Database Connection","text":"<p>Now we need to connect to our database. We'll start with SQLite for simplicity:</p> <pre><code># Create the database engine\nengine = create_async_engine(\"sqlite+aiosqlite:///app.db\")\nsession = AsyncSession(engine)\n</code></pre> <p>We're using SQLite here because it's perfect for development - it doesn't require a separate server, and the database is just a file on your computer. For production, you'll want to switch to something like PostgreSQL (we'll cover that later).</p>"},{"location":"usage/getting_started/#step-3-setting-up-crudadmin","title":"Step 3: Setting Up CRUDAdmin","text":"<p>Here's where the magic happens. We'll create our admin interface:</p> <pre><code># Generate a secure secret key\nSECRET_KEY = os.environ.get(\"ADMIN_SECRET_KEY\") or os.urandom(32).hex()\n\n# Create your admin interface\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    initial_admin={\n        \"username\": \"admin\",\n        \"password\": \"secure_pass123\"  \n    }\n)\n</code></pre> <p>Let's break down what's happening here:</p> <ul> <li>The <code>SECRET_KEY</code> is used for securing sessions and signing cookies. In production, you'll want to set this through environment variables</li> <li><code>session</code> connects CRUDAdmin to your database</li> <li><code>initial_admin</code> creates your first admin user - you'll use these credentials to log in</li> </ul>"},{"location":"usage/getting_started/#step-4-mounting-and-initializing-the-admin-interface","title":"Step 4: Mounting and Initializing the Admin Interface","text":"<p>Now we need to make our admin interface accessible through our FastAPI application and ensure it's properly initialized. Here's how to do it correctly:</p> <pre><code>from contextlib import asynccontextmanager\nfrom fastapi import FastAPI\n\n# Setup FastAPI lifespan for initialization\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Initialize database tables for your models\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # Initialize admin interface\n    await admin.initialize()\n    yield\n\n# Create FastAPI app with lifespan\napp = FastAPI(lifespan=lifespan)\n\n# Mount the admin interface\napp.mount(\"/admin\", admin.app)\n</code></pre> <p>This setup ensures that:</p> <ol> <li>Your database tables are created before the application starts</li> <li>The admin interface is properly initialized</li> <li>The admin interface is mounted at the correct URL path</li> </ol> <p>After these steps, your admin interface will be available at <code>http://your-server/admin</code>. When you visit this URL, you'll see a login page where you can use the admin credentials we set up earlier.</p>"},{"location":"usage/getting_started/#step-5-understanding-the-admin-interface-initialization","title":"Step 5: Understanding the Admin Interface Initialization","text":"<p>Let's take a closer look at what happens during the initialization process and how to configure it for different scenarios.</p> <p>The <code>initialize()</code> method is a crucial step that sets up the necessary database tables and creates your initial admin user. Here's what it does in detail:</p> <p>What <code>initialize()</code> does:</p> <ol> <li> <p>Creates necessary admin database tables:</p> <ul> <li>AdminUser table for managing admin users</li> <li>AdminSession table for session management</li> <li>If event tracking is enabled, creates AdminEventLog and AdminAuditLog tables</li> </ul> </li> <li> <p>Creates the initial admin user if one doesn't exist yet, using the credentials provided in <code>initial_admin</code></p> </li> <li> <p>Sets up any additional configurations needed for the admin interface to function</p> </li> </ol> <p>You can also initialize the admin interface manually if you prefer:</p> <pre><code>async def startup():\n    await admin.initialize()\n\n# Call this before running your application\nawait startup()\n</code></pre>"},{"location":"usage/getting_started/#important-notes","title":"Important Notes:","text":"<ul> <li>Always call <code>initialize()</code> before your application starts accepting requests</li> <li>The best practice is to use FastAPI's lifespan event as shown above</li> <li>Make sure your database is accessible before calling <code>initialize()</code></li> <li>The initial admin user is only created if no admin users exist in the database</li> <li>If you're using migrations, you may want to create these tables through your migration system instead</li> </ul>"},{"location":"usage/getting_started/#example-with-more-configuration","title":"Example with More Configuration:","text":"<pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    theme=\"dark-theme\",  # UI theme\n    initial_admin={\n        \"username\": \"admin\",\n        \"password\": \"secure_pass123\"\n    },\n    track_events=True,  # Enable audit logging\n)\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Create your application tables\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # Initialize admin interface with all features\n    await admin.initialize()\n\n    # Your other startup code here\n    yield\n    # Your cleanup code here\n\napp = FastAPI(lifespan=lifespan)\n</code></pre>"},{"location":"usage/getting_started/#troubleshooting-initialization","title":"Troubleshooting Initialization:","text":"<p>If you encounter issues during initialization, check:</p> <ol> <li>Database connectivity - ensure your database is running and accessible</li> <li>Permissions - verify your database user has rights to create tables</li> <li>Configuration - double-check your CRUDAdmin configuration parameters</li> <li>Existing admin users - if you're having issues with the initial admin creation, check if an admin user already exists</li> </ol> <p>The initialization process is designed to be idempotent, meaning it's safe to call multiple times - it won't create duplicate tables or admin users if they already exist.</p>"},{"location":"usage/getting_started/#adding-more-functionality","title":"Adding More Functionality","text":"<p>Once you have the basic admin interface running, you'll want to add more models to manage. Let's create a more complex example with a Product model:</p>"},{"location":"usage/getting_started/#step-1-define-the-model","title":"Step 1: Define the Model","text":"<p>First, we'll create a Product model with validation:</p> <pre><code>from pydantic import BaseModel, Field, validator\nfrom decimal import Decimal\nfrom datetime import datetime\nfrom typing import Optional\n\nclass Product(Base):\n    __tablename__ = \"products\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n    price = Column(Decimal, nullable=False)\n    description = Column(String)\n    created_at = Column(DateTime, default=datetime.utcnow)\n</code></pre>"},{"location":"usage/getting_started/#step-2-create-validation-schemas","title":"Step 2: Create Validation Schemas","text":"<p>CRUDAdmin uses Pydantic schemas to validate data before it goes into your database. This helps prevent invalid data and provides better error messages:</p> <pre><code>class ProductCreate(BaseModel):\n    name: str = Field(..., min_length=2, max_length=100)\n    price: Decimal = Field(..., gt=0)\n    description: Optional[str] = Field(None, max_length=500)\n\n    @validator(\"price\")\n    def validate_price(cls, v):\n        if v &gt; 1000000:\n            raise ValueError(\"Price cannot exceed 1,000,000\")\n        return v\n\nclass ProductUpdate(BaseModel):\n    name: Optional[str] = Field(None, min_length=2, max_length=100)\n    price: Optional[Decimal] = Field(None, gt=0)\n    description: Optional[str] = None\n</code></pre> <p>These schemas ensure that:</p> <ul> <li>Product names are between 2 and 100 characters</li> <li>Prices are always positive</li> <li>Descriptions are optional but can't exceed 500 characters</li> <li>No product can cost more than 1,000,000</li> </ul>"},{"location":"usage/getting_started/#step-3-add-the-model-to-crudadmin","title":"Step 3: Add the Model to CRUDAdmin","text":"<p>Finally, we register our model with the admin interface:</p> <pre><code>admin.add_view(\n    model=Product,\n    create_schema=ProductCreate,\n    update_schema=ProductUpdate,\n    allowed_actions={\"view\", \"create\", \"update\"}  # Disable deletion if needed\n)\n</code></pre> <p>The <code>allowed_actions</code> parameter lets you control what users can do with products. Here, we're allowing viewing, creating, and updating, but not deletion - a common pattern for important business data.</p>"},{"location":"usage/getting_started/#whats-next","title":"What's Next?","text":"<p>Now that you have your admin interface up and running, it's time to make it secure. Head to the Security and Authentication section to learn about:</p> <ul> <li>Setting up robust authentication for your admin users</li> <li>Protecting your interface with IP restrictions</li> <li>Configuring HTTPS for secure communication</li> <li>Implementing best practices for production deployment</li> </ul> <p>Remember: while the setup we've covered here is perfect for development, you'll want to add security measures before going to production!</p>"},{"location":"usage/monitoring_maintenance/","title":"Monitoring Your Admin Interface","text":"<p>Every admin interface needs proper monitoring - you need to know who's making changes, when they're making them, and whether your system is healthy. In this guide, we'll walk through setting up monitoring for your CRUDAdmin interface and learn how to effectively use these monitoring tools.</p>"},{"location":"usage/monitoring_maintenance/#setting-up-event-tracking","title":"Setting Up Event Tracking","text":"<p>Let's start with the most important monitoring feature: event tracking. Imagine you need to know who changed a user's role last week, or why certain records were updated. Event tracking gives you this visibility.</p>"},{"location":"usage/monitoring_maintenance/#enabling-event-tracking","title":"Enabling Event Tracking","text":"<p>First, let's enable event tracking in your admin interface:</p> <pre><code>from contextlib import asynccontextmanager\nfrom fastapi import FastAPI\n\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    track_events=True,\n    # Store events in a separate database to keep your main DB clean\n    admin_db_url=\"postgresql+asyncpg://user:pass@localhost/admin_logs\"\n)\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Create your application's database tables\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # Initialize admin interface with event tracking\n    # This will create necessary event tracking tables\n    await admin.initialize()\n    yield\n\napp = FastAPI(lifespan=lifespan)\napp.mount(\"/admin\", admin.app)\n</code></pre> <p>Pro tip: Using a separate database for logs helps keep your main application database lean and prevents log entries from impacting your app's performance. The <code>initialize()</code> call will create the necessary event tracking tables in your specified admin database.</p>"},{"location":"usage/monitoring_maintenance/#what-gets-tracked","title":"What Gets Tracked?","text":"<p>Once initialized with event tracking enabled, CRUDAdmin automatically tracks key events. Let's look at some real examples:</p> <ol> <li> <p>When someone logs in: <pre><code>{\n    \"timestamp\": \"2024-02-01T09:15:23+00:00\",\n    \"user\": \"sarah.admin\",\n    \"ip_address\": \"10.0.0.1\",\n    \"event_type\": \"auth.login\",\n    \"status\": \"success\"\n}\n</code></pre></p> </li> <li> <p>When a user record is updated: <pre><code>{\n    \"timestamp\": \"2024-02-01T15:23:45+00:00\",\n    \"user\": \"john.manager\",\n    \"ip_address\": \"10.0.0.2\",\n    \"event_type\": \"record.update\",\n    \"resource\": \"users\",\n    \"resource_id\": 456,\n    \"changes\": {\n        \"role\": {\n            \"old\": \"user\",\n            \"new\": \"admin\"\n        }\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"usage/monitoring_maintenance/#using-the-health-dashboard","title":"Using the Health Dashboard","text":"<p>The health dashboard is your window into the system's current state. You can find it at <code>/admin/management/health</code>. Let's understand what each part tells you:</p>"},{"location":"usage/monitoring_maintenance/#reading-health-status","title":"Reading Health Status","text":"<p>Here's what a typical health check looks like: <pre><code>{\n    \"database\": {\n        \"status\": \"healthy\",\n        \"latency_ms\": 5.23,\n        \"active_connections\": 12\n    },\n    \"session_management\": {\n        \"status\": \"healthy\",\n        \"active_sessions\": 8,\n        \"cleanup_status\": \"ok\"\n    }\n}\n</code></pre></p> <p>Let's break down what to look for:</p> <ol> <li> <p>Database Health</p> <ul> <li><code>latency_ms</code>: Should typically be under 100ms</li> <li><code>active_connections</code>: Watch for unusually high numbers</li> </ul> </li> <li> <p>Session Management</p> <ul> <li><code>active_sessions</code>: Unusual spikes might indicate issues</li> <li><code>cleanup_status</code>: Should always be \"ok\"</li> </ul> </li> </ol>"},{"location":"usage/monitoring_maintenance/#working-with-event-logs","title":"Working with Event Logs","text":"<p>The event log interface at <code>/admin/management/events</code> is where you'll spend most of your monitoring time. Let's walk through some common scenarios:</p>"},{"location":"usage/monitoring_maintenance/#scenario-1-investigating-changes","title":"Scenario 1: Investigating Changes","text":"<p>Suppose a user reports their account details were changed. Here's how to investigate:</p> <ol> <li>Go to <code>/admin/management/events</code></li> <li>Filter by:</li> <li>Resource type: \"users\"</li> <li>Event type: \"record.update\"</li> <li>Time period: Last 24 hours</li> </ol> <p>You'll see all user record changes, including who made them and exactly what changed.</p>"},{"location":"usage/monitoring_maintenance/#scenario-2-security-audit","title":"Scenario 2: Security Audit","text":"<p>For a security audit, you might need to review all login attempts:</p> <ol> <li>Filter by event type: \"auth.login\"</li> <li>Look for:</li> <li>Failed login attempts from the same IP</li> <li>Successful logins at unusual hours</li> <li>Login attempts for disabled accounts</li> </ol>"},{"location":"usage/monitoring_maintenance/#maintaining-your-system","title":"Maintaining Your System","text":""},{"location":"usage/monitoring_maintenance/#regular-cleanup","title":"Regular Cleanup","text":"<p>To keep your system running smoothly, set up regular session cleanup:</p> <pre><code>@app.on_event(\"startup\")\nasync def schedule_cleanup():\n    # Clean expired sessions\n    await admin.session_manager.cleanup_expired_sessions()\n</code></pre>"},{"location":"usage/monitoring_maintenance/#database-connection-management","title":"Database Connection Management","text":"<p>For better database performance, configure your connection pool:</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    # Adjust these based on your application's needs\n    pool_size=20,          # Maximum number of connections\n    max_overflow=10,       # Extra connections if needed\n    pool_timeout=30        # How long to wait for a connection\n)\n</code></pre>"},{"location":"usage/monitoring_maintenance/#daily-monitoring-routine","title":"Daily Monitoring Routine","text":"<p>Here's a practical daily routine for monitoring your admin interface:</p> <ol> <li> <p>Morning Check (Start of Day)</p> <ul> <li>Open the health dashboard</li> <li>Verify all systems show \"healthy\"</li> <li>Check active session count</li> </ul> </li> <li> <p>Security Review</p> <ul> <li>Review failed login attempts</li> <li>Check for unusual activity patterns</li> <li>Verify no unexpected permission changes</li> </ul> </li> <li> <p>System Maintenance</p> <ul> <li>Confirm session cleanup is running</li> <li>Check database connection stats</li> <li>Review event log storage usage</li> </ul> </li> </ol>"},{"location":"usage/monitoring_maintenance/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"usage/monitoring_maintenance/#high-database-latency","title":"High Database Latency","text":"<p>If you see high <code>latency_ms</code> values:</p> <ol> <li>Check your database connection pool settings</li> <li>Look for long-running queries in your event logs</li> <li>Consider if you need to optimize your queries</li> </ol>"},{"location":"usage/monitoring_maintenance/#session-management-issues","title":"Session Management Issues","text":"<p>If <code>active_sessions</code> seems too high:</p> <ol> <li>Verify your session cleanup is running</li> <li>Check for stuck or abandoned sessions</li> <li>Look for any authentication service issues</li> </ol> <p>With these monitoring practices in place, you'll be well-equipped to:</p> <ul> <li>Track all important changes in your system</li> <li>Spot potential issues before they become problems</li> <li>Maintain a healthy admin interface</li> <li>Respond quickly to security concerns</li> </ul> <p>Remember: Regular monitoring is key to maintaining a stable and secure admin interface. Make checking your health dashboard and event logs part of your daily routine.</p>"},{"location":"usage/overview/","title":"CRUDAdmin Usage Overview","text":"<p>This guide provides comprehensive information about using CRUDAdmin to create admin interfaces for your FastAPI applications. Whether you're just getting started or looking to implement advanced features, you'll find everything you need in these sections.</p>"},{"location":"usage/overview/#core-documentation","title":"Core Documentation","text":""},{"location":"usage/overview/#getting-started-guide","title":"Getting Started Guide","text":"<p>Learn the basics of CRUDAdmin and set up your first admin interface:</p> <ul> <li>Understanding CRUDAdmin's core concepts</li> <li>Setting up your first admin interface</li> <li>Configuring database connections</li> <li>Adding and managing models</li> <li>Basic usage and configuration</li> </ul>"},{"location":"usage/overview/#security-and-authentication","title":"Security and Authentication","text":"<p>Implement robust security measures for your admin interface:</p> <ul> <li>Setting up authentication and session management</li> <li>Configuring IP restrictions and HTTPS</li> <li>Managing secrets securely</li> <li>Implementing access control</li> <li>Production security best practices</li> </ul>"},{"location":"usage/overview/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":"<p>Keep your admin interface running smoothly:</p> <ul> <li>Setting up event tracking and audit logs</li> <li>Using the health monitoring dashboard</li> <li>Managing event logs effectively</li> <li>Implementing maintenance best practices</li> <li>Daily monitoring routines</li> </ul>"},{"location":"usage/overview/#quick-start-example","title":"Quick Start Example","text":"<p>Here's a minimal example to get your admin interface up and running:</p> <pre><code>from fastapi import FastAPI\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.orm import declarative_base\nimport os\n\n# Set up database\nBase = declarative_base()\nengine = create_async_engine(\"sqlite+aiosqlite:///app.db\")\nsession = AsyncSession(engine)\n\n# Create admin interface\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=os.environ.get(\"ADMIN_SECRET_KEY\"),\n    initial_admin={\n        \"username\": \"admin\",\n        \"password\": \"secure_pass123\"\n    }\n)\n\n# Mount to FastAPI\napp = FastAPI()\napp.mount(\"/admin\", admin.app)\n</code></pre>"},{"location":"usage/overview/#common-use-cases","title":"Common Use Cases","text":""},{"location":"usage/overview/#basic-admin-interface","title":"Basic Admin Interface","text":"<p>Perfect for simple applications needing data management: <pre><code># Define your model\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    username = Column(String, unique=True)\n    email = Column(String)\n\n# Add to admin interface\nadmin.add_view(\n    model=User,\n    create_schema=UserCreate,\n    update_schema=UserUpdate\n)\n</code></pre></p>"},{"location":"usage/overview/#secure-production-setup","title":"Secure Production Setup","text":"<p>Recommended configuration for production environments: <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    enforce_https=True,\n    secure_cookies=True,\n    allowed_networks=[\"10.0.0.0/24\"],\n    track_events=True\n)\n</code></pre></p>"},{"location":"usage/overview/#monitored-environment","title":"Monitored Environment","text":"<p>Set up comprehensive monitoring: <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    track_events=True,\n    admin_db_url=\"postgresql+asyncpg://user:pass@localhost/admin_logs\"\n)\n</code></pre></p>"},{"location":"usage/overview/#next-steps","title":"Next Steps","text":"<ol> <li>Start with the Getting Started Guide to create your first admin interface</li> <li>Implement security measures using the Security and Authentication guide</li> <li>Set up monitoring using the Monitoring and Maintenance guide</li> </ol> <p>Each guide provides detailed examples and best practices to help you make the most of CRUDAdmin's features.</p>"},{"location":"usage/security_authentication/","title":"Securing Your Admin Interface","text":"<p>Security is crucial for any admin interface - after all, this is where your application's most sensitive operations happen. This guide will walk you through securing your CRUDAdmin interface, from basic authentication to production-ready security measures.</p>"},{"location":"usage/security_authentication/#understanding-authentication-in-crudadmin","title":"Understanding Authentication in CRUDAdmin","text":"<p>CRUDAdmin uses server-side sessions for authentication. Let's understand why this matters and how to set it up properly.</p>"},{"location":"usage/security_authentication/#authentication-in-crudadmin","title":"Authentication in CRUDAdmin","text":"<p>CRUDAdmin uses server-side sessions for authentication, which is perfect for admin interfaces where security is more important than handling large numbers of concurrent users. This approach gives you:</p> <ol> <li>Complete control over active sessions</li> <li>Ability to immediately invalidate sessions when needed</li> <li>Built-in protection against common authentication attacks</li> <li>Easy session monitoring through the admin interface</li> </ol> <p>Here's how to set up this authentication system:</p> <pre><code>from contextlib import asynccontextmanager\nfrom fastapi import FastAPI\n\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY, # Still needed for signing session cookies and other internal uses\n    # Session Management\n    max_sessions_per_user=5,          # Limit concurrent sessions\n    session_timeout_minutes=30,       # Session inactivity timeout\n    cleanup_interval_minutes=15,      # Cleanup schedule\n)\n\n# Setup FastAPI lifespan for secure initialization\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Initialize database tables\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # Initialize admin interface and security features\n    await admin.initialize()\n    yield\n\napp = FastAPI(lifespan=lifespan)\napp.mount(\"/admin\", admin.app)\n</code></pre> <p>Let's break down these settings:</p> <ol> <li>Session Limits (5 per user): This prevents a single user from having too many active sessions. If an attacker tries to create multiple sessions, they'll be limited.</li> <li>Session Timeout (30 minutes): Sessions automatically expire after a period of inactivity.</li> <li>Cleanup Interval (15 minutes): Determines how often expired sessions are removed from the database.</li> </ol>"},{"location":"usage/security_authentication/#protecting-your-admin-interface","title":"Protecting Your Admin Interface","text":""},{"location":"usage/security_authentication/#ip-restrictions","title":"IP Restrictions","text":"<p>In production, you'll want to limit who can even attempt to access your admin interface. IP restrictions are your first line of defense:</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    allowed_ips=[\"10.0.0.1\", \"10.0.0.2\"],        # Specific IPs\n    allowed_networks=[\"192.168.1.0/24\"],          # Entire networks\n)\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n    # Initialize admin with IP restrictions\n    await admin.initialize()\n    yield\n</code></pre> <p>This configuration means:</p> <ul> <li>Only requests from <code>10.0.0.1</code> or <code>10.0.0.2</code> will be allowed</li> <li>All IPs in the range <code>192.168.1.0</code> to <code>192.168.1.255</code> can access the admin</li> <li>All other IPs will be blocked before they even reach the login page</li> </ul> <p>Common scenarios for IP restrictions:</p> <ul> <li>Allow only office IP addresses</li> <li>Allow access through your VPN</li> <li>Restrict to internal network addresses</li> </ul>"},{"location":"usage/security_authentication/#https-configuration","title":"HTTPS Configuration","text":"<p>HTTPS isn't optional for admin interfaces - it's essential. Here's how to enforce it:</p> <pre><code>admin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=SECRET_KEY,\n    enforce_https=True,\n    https_port=443,\n    secure_cookies=True\n)\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Create database tables\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # Initialize admin with HTTPS enforcement\n    await admin.initialize()\n    yield\n</code></pre> <p>This configuration:</p> <ol> <li>Forces all traffic over HTTPS</li> <li>Sets the Secure flag on cookies</li> <li>Redirects HTTP traffic to HTTPS automatically</li> </ol>"},{"location":"usage/security_authentication/#managing-secrets-securely","title":"Managing Secrets Securely","text":"<p>One of the most common security mistakes is hardcoding secrets in your code. Let's set up proper secret management:</p> <pre><code>from contextlib import asynccontextmanager\nfrom starlette.config import Config\nfrom starlette.datastructures import Secret, CommaSeparatedStrings\n\n# Load configuration from .env file and environment variables\nconfig = Config(\".env\")\n\n# Development vs Production settings\nDEBUG = config('DEBUG', cast=bool, default=False)\nSECRET_KEY = config('SECRET_KEY', cast=Secret)\nALLOWED_IPS = config('ALLOWED_IPS', cast=CommaSeparatedStrings, default='')\n\nadmin = CRUDAdmin(\n    session=session,\n    SECRET_KEY=str(SECRET_KEY),\n    # Production settings\n    secure_cookies=not DEBUG,\n    enforce_https=not DEBUG,\n    allowed_ips=list(ALLOWED_IPS) if not DEBUG else None\n)\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n    # Initialize admin with secure configuration\n    await admin.initialize()\n    yield\n\napp = FastAPI(lifespan=lifespan)\n</code></pre> <p>Store your <code>.env</code> file with this structure: <pre><code>DEBUG=false\nSECRET_KEY=your-secure-key-here\nALLOWED_IPS=10.0.0.1,10.0.0.2\n</code></pre></p>"},{"location":"usage/security_authentication/#implementing-access-control","title":"Implementing Access Control","text":"<p>Not all admin users should have the same permissions. CRUDAdmin lets you implement fine-grained access control:</p> <pre><code># Users can only be viewed and updated, not created or deleted\nadmin.add_view(\n    model=User,\n    create_schema=UserCreate,\n    update_schema=UserUpdate,\n    allowed_actions={\"view\", \"update\"}\n)\n\n# Audit logs are read-only\nadmin.add_view(\n    model=AuditLog,\n    create_schema=AuditLogSchema,\n    allowed_actions={\"view\"}\n)\n</code></pre> <p>Instead of deleting records, consider using soft deletes: <pre><code>class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    username = Column(String, unique=True)\n    is_deleted = Column(Boolean, default=False)\n    deleted_at = Column(DateTime, nullable=True)\n</code></pre></p>"},{"location":"usage/security_authentication/#security-checklist-for-production","title":"Security Checklist for Production","text":"<p>Before deploying to production, ensure you've covered these essential points:</p> <ol> <li> <p>Authentication</p> <ul> <li>[ ] Generate a strong SECRET_KEY (for session cookie signing)</li> <li>[ ] Configure session limits and timeouts</li> </ul> </li> <li> <p>Network Security</p> <ul> <li>[ ] Enable HTTPS with valid certificates</li> <li>[ ] Configure IP restrictions</li> <li>[ ] Enable secure cookies</li> </ul> </li> <li> <p>Access Control</p> <ul> <li>[ ] Review and limit model permissions</li> <li>[ ] Implement soft deletes where appropriate</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>[ ] Set up audit logging</li> <li>[ ] Configure error tracking</li> <li>[ ] Enable security alerts</li> </ul> </li> </ol> <p>Now that your admin interface is secure, let's move on to Monitoring and Maintenance to learn about:</p> <ul> <li>Setting up comprehensive audit trails</li> <li>Monitoring system health and performance</li> <li>Managing logs and backups</li> <li>Handling system maintenance</li> </ul>"}]}